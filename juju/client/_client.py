# DO NOT CHANGE THIS FILE! This file is auto-generated by facade.py.
# Changes will be overwritten/lost when the file is regenerated.

from juju.client.facade import Type, ReturnMapping


class Action(Type):
    _toSchema = {'receiver': 'receiver', 'parameters': 'parameters', 'name': 'name', 'tag': 'tag'}
    _toPy = {'receiver': 'receiver', 'parameters': 'parameters', 'name': 'name', 'tag': 'tag'}
    def __init__(self, name=None, parameters=None, receiver=None, tag=None):
        '''
        name : str
        parameters : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        receiver : str
        tag : str
        '''
        self.name = name
        self.parameters = parameters
        self.receiver = receiver
        self.tag = tag


class ActionResult(Type):
    _toSchema = {'enqueued': 'enqueued', 'completed': 'completed', 'output': 'output', 'started': 'started', 'action': 'action', 'status': 'status', 'error': 'error', 'message': 'message'}
    _toPy = {'enqueued': 'enqueued', 'completed': 'completed', 'output': 'output', 'started': 'started', 'action': 'action', 'status': 'status', 'error': 'error', 'message': 'message'}
    def __init__(self, action=None, completed=None, enqueued=None, error=None, message=None, output=None, started=None, status=None):
        '''
        action : Action
        completed : str
        enqueued : str
        error : Error
        message : str
        output : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        started : str
        status : str
        '''
        self.action = Action.from_json(action) if action else None
        self.completed = completed
        self.enqueued = enqueued
        self.error = Error.from_json(error) if error else None
        self.message = message
        self.output = output
        self.started = started
        self.status = status


class ActionResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ActionResult]<~ActionResult>
        '''
        self.results = [ActionResult.from_json(o) for o in results or []]


class ActionSpec(Type):
    _toSchema = {'description': 'description', 'params': 'params'}
    _toPy = {'description': 'description', 'params': 'params'}
    def __init__(self, description=None, params=None):
        '''
        description : str
        params : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.description = description
        self.params = params


class Actions(Type):
    _toSchema = {'actions': 'actions'}
    _toPy = {'actions': 'actions'}
    def __init__(self, actions=None):
        '''
        actions : typing.Sequence<+T_co>[~Action]<~Action>
        '''
        self.actions = [Action.from_json(o) for o in actions or []]


class ActionsByName(Type):
    _toSchema = {'actions': 'actions', 'error': 'error', 'name': 'name'}
    _toPy = {'actions': 'actions', 'error': 'error', 'name': 'name'}
    def __init__(self, actions=None, error=None, name=None):
        '''
        actions : typing.Sequence<+T_co>[~ActionResult]<~ActionResult>
        error : Error
        name : str
        '''
        self.actions = [ActionResult.from_json(o) for o in actions or []]
        self.error = Error.from_json(error) if error else None
        self.name = name


class ActionsByNames(Type):
    _toSchema = {'actions': 'actions'}
    _toPy = {'actions': 'actions'}
    def __init__(self, actions=None):
        '''
        actions : typing.Sequence<+T_co>[~ActionsByName]<~ActionsByName>
        '''
        self.actions = [ActionsByName.from_json(o) for o in actions or []]


class ActionsByReceiver(Type):
    _toSchema = {'actions': 'actions', 'receiver': 'receiver', 'error': 'error'}
    _toPy = {'actions': 'actions', 'receiver': 'receiver', 'error': 'error'}
    def __init__(self, actions=None, error=None, receiver=None):
        '''
        actions : typing.Sequence<+T_co>[~ActionResult]<~ActionResult>
        error : Error
        receiver : str
        '''
        self.actions = [ActionResult.from_json(o) for o in actions or []]
        self.error = Error.from_json(error) if error else None
        self.receiver = receiver


class ActionsByReceivers(Type):
    _toSchema = {'actions': 'actions'}
    _toPy = {'actions': 'actions'}
    def __init__(self, actions=None):
        '''
        actions : typing.Sequence<+T_co>[~ActionsByReceiver]<~ActionsByReceiver>
        '''
        self.actions = [ActionsByReceiver.from_json(o) for o in actions or []]


class ApplicationCharmActionsResult(Type):
    _toSchema = {'application_tag': 'application-tag', 'actions': 'actions', 'error': 'error'}
    _toPy = {'actions': 'actions', 'error': 'error', 'application-tag': 'application_tag'}
    def __init__(self, actions=None, application_tag=None, error=None):
        '''
        actions : typing.Mapping<~KT, +VT_co>[str, ~ActionSpec]<~ActionSpec>
        application_tag : str
        error : Error
        '''
        self.actions = actions
        self.application_tag = application_tag
        self.error = Error.from_json(error) if error else None


class ApplicationsCharmActionsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ApplicationCharmActionsResult]<~ApplicationCharmActionsResult>
        '''
        self.results = [ApplicationCharmActionsResult.from_json(o) for o in results or []]


class Entities(Type):
    _toSchema = {'entities': 'entities'}
    _toPy = {'entities': 'entities'}
    def __init__(self, entities=None):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        '''
        self.entities = [Entity.from_json(o) for o in entities or []]


class Entity(Type):
    _toSchema = {'tag': 'tag'}
    _toPy = {'tag': 'tag'}
    def __init__(self, tag=None):
        '''
        tag : str
        '''
        self.tag = tag


class Error(Type):
    _toSchema = {'code': 'code', 'info': 'info', 'message': 'message'}
    _toPy = {'code': 'code', 'info': 'info', 'message': 'message'}
    def __init__(self, code=None, info=None, message=None):
        '''
        code : str
        info : ErrorInfo
        message : str
        '''
        self.code = code
        self.info = ErrorInfo.from_json(info) if info else None
        self.message = message


class ErrorInfo(Type):
    _toSchema = {'macaroon_path': 'macaroon-path', 'macaroon': 'macaroon'}
    _toPy = {'macaroon-path': 'macaroon_path', 'macaroon': 'macaroon'}
    def __init__(self, macaroon=None, macaroon_path=None):
        '''
        macaroon : Macaroon
        macaroon_path : str
        '''
        self.macaroon = Macaroon.from_json(macaroon) if macaroon else None
        self.macaroon_path = macaroon_path


class FindActionsByNames(Type):
    _toSchema = {'names': 'names'}
    _toPy = {'names': 'names'}
    def __init__(self, names=None):
        '''
        names : typing.Sequence<+T_co>[str]
        '''
        self.names = names


class FindTags(Type):
    _toSchema = {'prefixes': 'prefixes'}
    _toPy = {'prefixes': 'prefixes'}
    def __init__(self, prefixes=None):
        '''
        prefixes : typing.Sequence<+T_co>[str]
        '''
        self.prefixes = prefixes


class FindTagsResults(Type):
    _toSchema = {'matches': 'matches'}
    _toPy = {'matches': 'matches'}
    def __init__(self, matches=None):
        '''
        matches : typing.Sequence<+T_co>[~Entity]<~Entity>
        '''
        self.matches = [Entity.from_json(o) for o in matches or []]


class Macaroon(Type):
    _toSchema = {}
    _toPy = {}
    def __init__(self):
        '''

        '''
        pass


class RunParams(Type):
    _toSchema = {'commands': 'commands', 'units': 'units', 'timeout': 'timeout', 'machines': 'machines', 'applications': 'applications'}
    _toPy = {'commands': 'commands', 'units': 'units', 'timeout': 'timeout', 'machines': 'machines', 'applications': 'applications'}
    def __init__(self, applications=None, commands=None, machines=None, timeout=None, units=None):
        '''
        applications : typing.Sequence<+T_co>[str]
        commands : str
        machines : typing.Sequence<+T_co>[str]
        timeout : int
        units : typing.Sequence<+T_co>[str]
        '''
        self.applications = applications
        self.commands = commands
        self.machines = machines
        self.timeout = timeout
        self.units = units


class AgentGetEntitiesResult(Type):
    _toSchema = {'jobs': 'jobs', 'life': 'life', 'error': 'error', 'container_type': 'container-type'}
    _toPy = {'jobs': 'jobs', 'container-type': 'container_type', 'error': 'error', 'life': 'life'}
    def __init__(self, container_type=None, error=None, jobs=None, life=None):
        '''
        container_type : str
        error : Error
        jobs : typing.Sequence<+T_co>[str]
        life : str
        '''
        self.container_type = container_type
        self.error = Error.from_json(error) if error else None
        self.jobs = jobs
        self.life = life


class AgentGetEntitiesResults(Type):
    _toSchema = {'entities': 'entities'}
    _toPy = {'entities': 'entities'}
    def __init__(self, entities=None):
        '''
        entities : typing.Sequence<+T_co>[~AgentGetEntitiesResult]<~AgentGetEntitiesResult>
        '''
        self.entities = [AgentGetEntitiesResult.from_json(o) for o in entities or []]


class CloudCredential(Type):
    _toSchema = {'attrs': 'attrs', 'auth_type': 'auth-type', 'redacted': 'redacted'}
    _toPy = {'attrs': 'attrs', 'redacted': 'redacted', 'auth-type': 'auth_type'}
    def __init__(self, attrs=None, auth_type=None, redacted=None):
        '''
        attrs : typing.Mapping<~KT, +VT_co>[str, str]
        auth_type : str
        redacted : typing.Sequence<+T_co>[str]
        '''
        self.attrs = attrs
        self.auth_type = auth_type
        self.redacted = redacted


class CloudSpec(Type):
    _toSchema = {'region': 'region', 'storage_endpoint': 'storage-endpoint', 'type_': 'type', 'endpoint': 'endpoint', 'name': 'name', 'credential': 'credential', 'identity_endpoint': 'identity-endpoint'}
    _toPy = {'region': 'region', 'type': 'type_', 'storage-endpoint': 'storage_endpoint', 'identity-endpoint': 'identity_endpoint', 'name': 'name', 'credential': 'credential', 'endpoint': 'endpoint'}
    def __init__(self, credential=None, endpoint=None, identity_endpoint=None, name=None, region=None, storage_endpoint=None, type_=None):
        '''
        credential : CloudCredential
        endpoint : str
        identity_endpoint : str
        name : str
        region : str
        storage_endpoint : str
        type_ : str
        '''
        self.credential = CloudCredential.from_json(credential) if credential else None
        self.endpoint = endpoint
        self.identity_endpoint = identity_endpoint
        self.name = name
        self.region = region
        self.storage_endpoint = storage_endpoint
        self.type_ = type_


class CloudSpecResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : CloudSpec
        '''
        self.error = Error.from_json(error) if error else None
        self.result = CloudSpec.from_json(result) if result else None


class CloudSpecResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~CloudSpecResult]<~CloudSpecResult>
        '''
        self.results = [CloudSpecResult.from_json(o) for o in results or []]


class ControllerConfigResult(Type):
    _toSchema = {'config': 'config'}
    _toPy = {'config': 'config'}
    def __init__(self, config=None):
        '''
        config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.config = config


class EntityPassword(Type):
    _toSchema = {'password': 'password', 'tag': 'tag'}
    _toPy = {'password': 'password', 'tag': 'tag'}
    def __init__(self, password=None, tag=None):
        '''
        password : str
        tag : str
        '''
        self.password = password
        self.tag = tag


class EntityPasswords(Type):
    _toSchema = {'changes': 'changes'}
    _toPy = {'changes': 'changes'}
    def __init__(self, changes=None):
        '''
        changes : typing.Sequence<+T_co>[~EntityPassword]<~EntityPassword>
        '''
        self.changes = [EntityPassword.from_json(o) for o in changes or []]


class ErrorResult(Type):
    _toSchema = {'error': 'error'}
    _toPy = {'error': 'error'}
    def __init__(self, error=None):
        '''
        error : Error
        '''
        self.error = Error.from_json(error) if error else None


class ErrorResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        self.results = [ErrorResult.from_json(o) for o in results or []]


class IsMasterResult(Type):
    _toSchema = {'master': 'master'}
    _toPy = {'master': 'master'}
    def __init__(self, master=None):
        '''
        master : bool
        '''
        self.master = master


class ModelConfigResult(Type):
    _toSchema = {'config': 'config'}
    _toPy = {'config': 'config'}
    def __init__(self, config=None):
        '''
        config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.config = config


class NotifyWatchResult(Type):
    _toSchema = {'notifywatcherid': 'NotifyWatcherId', 'error': 'error'}
    _toPy = {'NotifyWatcherId': 'notifywatcherid', 'error': 'error'}
    def __init__(self, notifywatcherid=None, error=None):
        '''
        notifywatcherid : str
        error : Error
        '''
        self.notifywatcherid = notifywatcherid
        self.error = Error.from_json(error) if error else None


class StateServingInfo(Type):
    _toSchema = {'shared_secret': 'shared-secret', 'state_port': 'state-port', 'system_identity': 'system-identity', 'private_key': 'private-key', 'cert': 'cert', 'ca_private_key': 'ca-private-key', 'api_port': 'api-port'}
    _toPy = {'state-port': 'state_port', 'ca-private-key': 'ca_private_key', 'api-port': 'api_port', 'shared-secret': 'shared_secret', 'system-identity': 'system_identity', 'private-key': 'private_key', 'cert': 'cert'}
    def __init__(self, api_port=None, ca_private_key=None, cert=None, private_key=None, shared_secret=None, state_port=None, system_identity=None):
        '''
        api_port : int
        ca_private_key : str
        cert : str
        private_key : str
        shared_secret : str
        state_port : int
        system_identity : str
        '''
        self.api_port = api_port
        self.ca_private_key = ca_private_key
        self.cert = cert
        self.private_key = private_key
        self.shared_secret = shared_secret
        self.state_port = state_port
        self.system_identity = system_identity


class AllWatcherNextResults(Type):
    _toSchema = {'deltas': 'deltas'}
    _toPy = {'deltas': 'deltas'}
    def __init__(self, deltas=None):
        '''
        deltas : typing.Sequence<+T_co>[~Delta]<~Delta>
        '''
        self.deltas = [Delta.from_json(o) for o in deltas or []]


class Delta(Type):
    _toSchema = {'entity': 'entity', 'removed': 'removed'}
    _toPy = {'entity': 'entity', 'removed': 'removed'}
    def __init__(self, entity=None, removed=None):
        '''
        entity : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        removed : bool
        '''
        self.entity = entity
        self.removed = removed


class AnnotationsGetResult(Type):
    _toSchema = {'annotations': 'annotations', 'entity': 'entity', 'error': 'error'}
    _toPy = {'annotations': 'annotations', 'entity': 'entity', 'error': 'error'}
    def __init__(self, annotations=None, entity=None, error=None):
        '''
        annotations : typing.Mapping<~KT, +VT_co>[str, str]
        entity : str
        error : ErrorResult
        '''
        self.annotations = annotations
        self.entity = entity
        self.error = ErrorResult.from_json(error) if error else None


class AnnotationsGetResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~AnnotationsGetResult]<~AnnotationsGetResult>
        '''
        self.results = [AnnotationsGetResult.from_json(o) for o in results or []]


class AnnotationsSet(Type):
    _toSchema = {'annotations': 'annotations'}
    _toPy = {'annotations': 'annotations'}
    def __init__(self, annotations=None):
        '''
        annotations : typing.Sequence<+T_co>[~EntityAnnotations]<~EntityAnnotations>
        '''
        self.annotations = [EntityAnnotations.from_json(o) for o in annotations or []]


class EntityAnnotations(Type):
    _toSchema = {'annotations': 'annotations', 'entity': 'entity'}
    _toPy = {'annotations': 'annotations', 'entity': 'entity'}
    def __init__(self, annotations=None, entity=None):
        '''
        annotations : typing.Mapping<~KT, +VT_co>[str, str]
        entity : str
        '''
        self.annotations = annotations
        self.entity = entity


class AddApplicationUnits(Type):
    _toSchema = {'application': 'application', 'placement': 'placement', 'num_units': 'num-units'}
    _toPy = {'application': 'application', 'num-units': 'num_units', 'placement': 'placement'}
    def __init__(self, application=None, num_units=None, placement=None):
        '''
        application : str
        num_units : int
        placement : typing.Sequence<+T_co>[~Placement]<~Placement>
        '''
        self.application = application
        self.num_units = num_units
        self.placement = [Placement.from_json(o) for o in placement or []]


class AddApplicationUnitsResults(Type):
    _toSchema = {'units': 'units'}
    _toPy = {'units': 'units'}
    def __init__(self, units=None):
        '''
        units : typing.Sequence<+T_co>[str]
        '''
        self.units = units


class AddRelation(Type):
    _toSchema = {'endpoints': 'endpoints'}
    _toPy = {'endpoints': 'endpoints'}
    def __init__(self, endpoints=None):
        '''
        endpoints : typing.Sequence<+T_co>[str]
        '''
        self.endpoints = endpoints


class AddRelationResults(Type):
    _toSchema = {'endpoints': 'endpoints'}
    _toPy = {'endpoints': 'endpoints'}
    def __init__(self, endpoints=None):
        '''
        endpoints : typing.Mapping<~KT, +VT_co>[str, ~CharmRelation]<~CharmRelation>
        '''
        self.endpoints = endpoints


class ApplicationCharmRelations(Type):
    _toSchema = {'application': 'application'}
    _toPy = {'application': 'application'}
    def __init__(self, application=None):
        '''
        application : str
        '''
        self.application = application


class ApplicationCharmRelationsResults(Type):
    _toSchema = {'charm_relations': 'charm-relations'}
    _toPy = {'charm-relations': 'charm_relations'}
    def __init__(self, charm_relations=None):
        '''
        charm_relations : typing.Sequence<+T_co>[str]
        '''
        self.charm_relations = charm_relations


class ApplicationDeploy(Type):
    _toSchema = {'storage': 'storage', 'config': 'config', 'endpoint_bindings': 'endpoint-bindings', 'num_units': 'num-units', 'placement': 'placement', 'series': 'series', 'charm_url': 'charm-url', 'config_yaml': 'config-yaml', 'constraints': 'constraints', 'application': 'application', 'resources': 'resources', 'channel': 'channel'}
    _toPy = {'storage': 'storage', 'config': 'config', 'num-units': 'num_units', 'series': 'series', 'placement': 'placement', 'config-yaml': 'config_yaml', 'constraints': 'constraints', 'charm-url': 'charm_url', 'application': 'application', 'resources': 'resources', 'endpoint-bindings': 'endpoint_bindings', 'channel': 'channel'}
    def __init__(self, application=None, channel=None, charm_url=None, config=None, config_yaml=None, constraints=None, endpoint_bindings=None, num_units=None, placement=None, resources=None, series=None, storage=None):
        '''
        application : str
        channel : str
        charm_url : str
        config : typing.Mapping<~KT, +VT_co>[str, str]
        config_yaml : str
        constraints : Value
        endpoint_bindings : typing.Mapping<~KT, +VT_co>[str, str]
        num_units : int
        placement : typing.Sequence<+T_co>[~Placement]<~Placement>
        resources : typing.Mapping<~KT, +VT_co>[str, str]
        series : str
        storage : typing.Mapping<~KT, +VT_co>[str, ~Constraints]<~Constraints>
        '''
        self.application = application
        self.channel = channel
        self.charm_url = charm_url
        self.config = config
        self.config_yaml = config_yaml
        self.constraints = Value.from_json(constraints) if constraints else None
        self.endpoint_bindings = endpoint_bindings
        self.num_units = num_units
        self.placement = [Placement.from_json(o) for o in placement or []]
        self.resources = resources
        self.series = series
        self.storage = storage


class ApplicationDestroy(Type):
    _toSchema = {'application': 'application'}
    _toPy = {'application': 'application'}
    def __init__(self, application=None):
        '''
        application : str
        '''
        self.application = application


class ApplicationExpose(Type):
    _toSchema = {'application': 'application'}
    _toPy = {'application': 'application'}
    def __init__(self, application=None):
        '''
        application : str
        '''
        self.application = application


class ApplicationGet(Type):
    _toSchema = {'application': 'application'}
    _toPy = {'application': 'application'}
    def __init__(self, application=None):
        '''
        application : str
        '''
        self.application = application


class ApplicationGetResults(Type):
    _toSchema = {'series': 'series', 'application': 'application', 'config': 'config', 'charm': 'charm', 'constraints': 'constraints'}
    _toPy = {'series': 'series', 'application': 'application', 'config': 'config', 'charm': 'charm', 'constraints': 'constraints'}
    def __init__(self, application=None, charm=None, config=None, constraints=None, series=None):
        '''
        application : str
        charm : str
        config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        constraints : Value
        series : str
        '''
        self.application = application
        self.charm = charm
        self.config = config
        self.constraints = Value.from_json(constraints) if constraints else None
        self.series = series


class ApplicationMetricCredential(Type):
    _toSchema = {'metrics_credentials': 'metrics-credentials', 'application': 'application'}
    _toPy = {'application': 'application', 'metrics-credentials': 'metrics_credentials'}
    def __init__(self, application=None, metrics_credentials=None):
        '''
        application : str
        metrics_credentials : typing.Sequence<+T_co>[int]
        '''
        self.application = application
        self.metrics_credentials = metrics_credentials


class ApplicationMetricCredentials(Type):
    _toSchema = {'creds': 'creds'}
    _toPy = {'creds': 'creds'}
    def __init__(self, creds=None):
        '''
        creds : typing.Sequence<+T_co>[~ApplicationMetricCredential]<~ApplicationMetricCredential>
        '''
        self.creds = [ApplicationMetricCredential.from_json(o) for o in creds or []]


class ApplicationSet(Type):
    _toSchema = {'application': 'application', 'options': 'options'}
    _toPy = {'application': 'application', 'options': 'options'}
    def __init__(self, application=None, options=None):
        '''
        application : str
        options : typing.Mapping<~KT, +VT_co>[str, str]
        '''
        self.application = application
        self.options = options


class ApplicationSetCharm(Type):
    _toSchema = {'charm_url': 'charm-url', 'force_units': 'force-units', 'resource_ids': 'resource-ids', 'application': 'application', 'force_series': 'force-series', 'channel': 'channel'}
    _toPy = {'force-series': 'force_series', 'resource-ids': 'resource_ids', 'force-units': 'force_units', 'charm-url': 'charm_url', 'application': 'application', 'channel': 'channel'}
    def __init__(self, application=None, channel=None, charm_url=None, force_series=None, force_units=None, resource_ids=None):
        '''
        application : str
        channel : str
        charm_url : str
        force_series : bool
        force_units : bool
        resource_ids : typing.Mapping<~KT, +VT_co>[str, str]
        '''
        self.application = application
        self.channel = channel
        self.charm_url = charm_url
        self.force_series = force_series
        self.force_units = force_units
        self.resource_ids = resource_ids


class ApplicationUnexpose(Type):
    _toSchema = {'application': 'application'}
    _toPy = {'application': 'application'}
    def __init__(self, application=None):
        '''
        application : str
        '''
        self.application = application


class ApplicationUnset(Type):
    _toSchema = {'application': 'application', 'options': 'options'}
    _toPy = {'application': 'application', 'options': 'options'}
    def __init__(self, application=None, options=None):
        '''
        application : str
        options : typing.Sequence<+T_co>[str]
        '''
        self.application = application
        self.options = options


class ApplicationUpdate(Type):
    _toSchema = {'charm_url': 'charm-url', 'force_charm_url': 'force-charm-url', 'settings_yaml': 'settings-yaml', 'constraints': 'constraints', 'min_units': 'min-units', 'application': 'application', 'force_series': 'force-series', 'settings': 'settings'}
    _toPy = {'force-series': 'force_series', 'force-charm-url': 'force_charm_url', 'settings-yaml': 'settings_yaml', 'constraints': 'constraints', 'charm-url': 'charm_url', 'application': 'application', 'min-units': 'min_units', 'settings': 'settings'}
    def __init__(self, application=None, charm_url=None, constraints=None, force_charm_url=None, force_series=None, min_units=None, settings=None, settings_yaml=None):
        '''
        application : str
        charm_url : str
        constraints : Value
        force_charm_url : bool
        force_series : bool
        min_units : int
        settings : typing.Mapping<~KT, +VT_co>[str, str]
        settings_yaml : str
        '''
        self.application = application
        self.charm_url = charm_url
        self.constraints = Value.from_json(constraints) if constraints else None
        self.force_charm_url = force_charm_url
        self.force_series = force_series
        self.min_units = min_units
        self.settings = settings
        self.settings_yaml = settings_yaml


class ApplicationsDeploy(Type):
    _toSchema = {'applications': 'applications'}
    _toPy = {'applications': 'applications'}
    def __init__(self, applications=None):
        '''
        applications : typing.Sequence<+T_co>[~ApplicationDeploy]<~ApplicationDeploy>
        '''
        self.applications = [ApplicationDeploy.from_json(o) for o in applications or []]


class CharmRelation(Type):
    _toSchema = {'role': 'role', 'limit': 'limit', 'scope': 'scope', 'interface': 'interface', 'optional': 'optional', 'name': 'name'}
    _toPy = {'role': 'role', 'limit': 'limit', 'scope': 'scope', 'interface': 'interface', 'optional': 'optional', 'name': 'name'}
    def __init__(self, interface=None, limit=None, name=None, optional=None, role=None, scope=None):
        '''
        interface : str
        limit : int
        name : str
        optional : bool
        role : str
        scope : str
        '''
        self.interface = interface
        self.limit = limit
        self.name = name
        self.optional = optional
        self.role = role
        self.scope = scope


class Constraints(Type):
    _toSchema = {'size': 'Size', 'pool': 'Pool', 'count': 'Count'}
    _toPy = {'Count': 'count', 'Size': 'size', 'Pool': 'pool'}
    def __init__(self, count=None, pool=None, size=None):
        '''
        count : int
        pool : str
        size : int
        '''
        self.count = count
        self.pool = pool
        self.size = size


class DestroyApplicationUnits(Type):
    _toSchema = {'unit_names': 'unit-names'}
    _toPy = {'unit-names': 'unit_names'}
    def __init__(self, unit_names=None):
        '''
        unit_names : typing.Sequence<+T_co>[str]
        '''
        self.unit_names = unit_names


class DestroyRelation(Type):
    _toSchema = {'endpoints': 'endpoints'}
    _toPy = {'endpoints': 'endpoints'}
    def __init__(self, endpoints=None):
        '''
        endpoints : typing.Sequence<+T_co>[str]
        '''
        self.endpoints = endpoints


class GetApplicationConstraints(Type):
    _toSchema = {'application': 'application'}
    _toPy = {'application': 'application'}
    def __init__(self, application=None):
        '''
        application : str
        '''
        self.application = application


class GetConstraintsResults(Type):
    _toSchema = {'constraints': 'constraints'}
    _toPy = {'constraints': 'constraints'}
    def __init__(self, constraints=None):
        '''
        constraints : Value
        '''
        self.constraints = Value.from_json(constraints) if constraints else None


class Placement(Type):
    _toSchema = {'scope': 'scope', 'directive': 'directive'}
    _toPy = {'scope': 'scope', 'directive': 'directive'}
    def __init__(self, directive=None, scope=None):
        '''
        directive : str
        scope : str
        '''
        self.directive = directive
        self.scope = scope


class SetConstraints(Type):
    _toSchema = {'application': 'application', 'constraints': 'constraints'}
    _toPy = {'application': 'application', 'constraints': 'constraints'}
    def __init__(self, application=None, constraints=None):
        '''
        application : str
        constraints : Value
        '''
        self.application = application
        self.constraints = Value.from_json(constraints) if constraints else None


class StringResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : str
        '''
        self.error = Error.from_json(error) if error else None
        self.result = result


class Value(Type):
    _toSchema = {'root_disk': 'root-disk', 'instance_type': 'instance-type', 'container': 'container', 'cpu_power': 'cpu-power', 'tags': 'tags', 'cpu_cores': 'cpu-cores', 'spaces': 'spaces', 'virt_type': 'virt-type', 'arch': 'arch', 'mem': 'mem'}
    _toPy = {'root-disk': 'root_disk', 'container': 'container', 'virt-type': 'virt_type', 'tags': 'tags', 'spaces': 'spaces', 'arch': 'arch', 'cpu-cores': 'cpu_cores', 'instance-type': 'instance_type', 'mem': 'mem', 'cpu-power': 'cpu_power'}
    def __init__(self, arch=None, container=None, cpu_cores=None, cpu_power=None, instance_type=None, mem=None, root_disk=None, spaces=None, tags=None, virt_type=None):
        '''
        arch : str
        container : str
        cpu_cores : int
        cpu_power : int
        instance_type : str
        mem : int
        root_disk : int
        spaces : typing.Sequence<+T_co>[str]
        tags : typing.Sequence<+T_co>[str]
        virt_type : str
        '''
        self.arch = arch
        self.container = container
        self.cpu_cores = cpu_cores
        self.cpu_power = cpu_power
        self.instance_type = instance_type
        self.mem = mem
        self.root_disk = root_disk
        self.spaces = spaces
        self.tags = tags
        self.virt_type = virt_type


class StringsWatchResult(Type):
    _toSchema = {'changes': 'changes', 'watcher_id': 'watcher-id', 'error': 'error'}
    _toPy = {'changes': 'changes', 'error': 'error', 'watcher-id': 'watcher_id'}
    def __init__(self, changes=None, error=None, watcher_id=None):
        '''
        changes : typing.Sequence<+T_co>[str]
        error : Error
        watcher_id : str
        '''
        self.changes = changes
        self.error = Error.from_json(error) if error else None
        self.watcher_id = watcher_id


class BackupsCreateArgs(Type):
    _toSchema = {'notes': 'notes'}
    _toPy = {'notes': 'notes'}
    def __init__(self, notes=None):
        '''
        notes : str
        '''
        self.notes = notes


class BackupsInfoArgs(Type):
    _toSchema = {'id_': 'id'}
    _toPy = {'id': 'id_'}
    def __init__(self, id_=None):
        '''
        id_ : str
        '''
        self.id_ = id_


class BackupsListArgs(Type):
    _toSchema = {}
    _toPy = {}
    def __init__(self):
        '''

        '''
        pass


class BackupsListResult(Type):
    _toSchema = {'list_': 'list'}
    _toPy = {'list': 'list_'}
    def __init__(self, list_=None):
        '''
        list_ : typing.Sequence<+T_co>[~BackupsMetadataResult]<~BackupsMetadataResult>
        '''
        self.list_ = [BackupsMetadataResult.from_json(o) for o in list_ or []]


class BackupsMetadataResult(Type):
    _toSchema = {'model': 'model', 'finished': 'finished', 'ca_cert': 'ca-cert', 'ca_private_key': 'ca-private-key', 'machine': 'machine', 'series': 'series', 'checksum_format': 'checksum-format', 'version': 'version', 'started': 'started', 'stored': 'stored', 'checksum': 'checksum', 'size': 'size', 'notes': 'notes', 'hostname': 'hostname', 'id_': 'id'}
    _toPy = {'model': 'model', 'checksum-format': 'checksum_format', 'finished': 'finished', 'ca-private-key': 'ca_private_key', 'started': 'started', 'machine': 'machine', 'series': 'series', 'version': 'version', 'ca-cert': 'ca_cert', 'stored': 'stored', 'checksum': 'checksum', 'size': 'size', 'notes': 'notes', 'hostname': 'hostname', 'id': 'id_'}
    def __init__(self, ca_cert=None, ca_private_key=None, checksum=None, checksum_format=None, finished=None, hostname=None, id_=None, machine=None, model=None, notes=None, series=None, size=None, started=None, stored=None, version=None):
        '''
        ca_cert : str
        ca_private_key : str
        checksum : str
        checksum_format : str
        finished : str
        hostname : str
        id_ : str
        machine : str
        model : str
        notes : str
        series : str
        size : int
        started : str
        stored : str
        version : Number
        '''
        self.ca_cert = ca_cert
        self.ca_private_key = ca_private_key
        self.checksum = checksum
        self.checksum_format = checksum_format
        self.finished = finished
        self.hostname = hostname
        self.id_ = id_
        self.machine = machine
        self.model = model
        self.notes = notes
        self.series = series
        self.size = size
        self.started = started
        self.stored = stored
        self.version = Number.from_json(version) if version else None


class BackupsRemoveArgs(Type):
    _toSchema = {'id_': 'id'}
    _toPy = {'id': 'id_'}
    def __init__(self, id_=None):
        '''
        id_ : str
        '''
        self.id_ = id_


class Number(Type):
    _toSchema = {'patch': 'Patch', 'minor': 'Minor', 'build': 'Build', 'tag': 'Tag', 'major': 'Major'}
    _toPy = {'Tag': 'tag', 'Major': 'major', 'Build': 'build', 'Patch': 'patch', 'Minor': 'minor'}
    def __init__(self, build=None, major=None, minor=None, patch=None, tag=None):
        '''
        build : int
        major : int
        minor : int
        patch : int
        tag : str
        '''
        self.build = build
        self.major = major
        self.minor = minor
        self.patch = patch
        self.tag = tag


class RestoreArgs(Type):
    _toSchema = {'backup_id': 'backup-id'}
    _toPy = {'backup-id': 'backup_id'}
    def __init__(self, backup_id=None):
        '''
        backup_id : str
        '''
        self.backup_id = backup_id


class Block(Type):
    _toSchema = {'tag': 'tag', 'type_': 'type', 'id_': 'id', 'message': 'message'}
    _toPy = {'tag': 'tag', 'message': 'message', 'type': 'type_', 'id': 'id_'}
    def __init__(self, id_=None, message=None, tag=None, type_=None):
        '''
        id_ : str
        message : str
        tag : str
        type_ : str
        '''
        self.id_ = id_
        self.message = message
        self.tag = tag
        self.type_ = type_


class BlockResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : Block
        '''
        self.error = Error.from_json(error) if error else None
        self.result = Block.from_json(result) if result else None


class BlockResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~BlockResult]<~BlockResult>
        '''
        self.results = [BlockResult.from_json(o) for o in results or []]


class BlockSwitchParams(Type):
    _toSchema = {'type_': 'type', 'message': 'message'}
    _toPy = {'type': 'type_', 'message': 'message'}
    def __init__(self, message=None, type_=None):
        '''
        message : str
        type_ : str
        '''
        self.message = message
        self.type_ = type_


class CharmActionSpec(Type):
    _toSchema = {'description': 'description', 'params': 'params'}
    _toPy = {'description': 'description', 'params': 'params'}
    def __init__(self, description=None, params=None):
        '''
        description : str
        params : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.description = description
        self.params = params


class CharmActions(Type):
    _toSchema = {'specs': 'specs'}
    _toPy = {'specs': 'specs'}
    def __init__(self, specs=None):
        '''
        specs : typing.Mapping<~KT, +VT_co>[str, ~CharmActionSpec]<~CharmActionSpec>
        '''
        self.specs = specs


class CharmInfo(Type):
    _toSchema = {'actions': 'actions', 'meta': 'meta', 'metrics': 'metrics', 'url': 'url', 'config': 'config', 'revision': 'revision'}
    _toPy = {'actions': 'actions', 'meta': 'meta', 'metrics': 'metrics', 'url': 'url', 'config': 'config', 'revision': 'revision'}
    def __init__(self, actions=None, config=None, meta=None, metrics=None, revision=None, url=None):
        '''
        actions : CharmActions
        config : typing.Mapping<~KT, +VT_co>[str, ~CharmOption]<~CharmOption>
        meta : CharmMeta
        metrics : CharmMetrics
        revision : int
        url : str
        '''
        self.actions = CharmActions.from_json(actions) if actions else None
        self.config = config
        self.meta = CharmMeta.from_json(meta) if meta else None
        self.metrics = CharmMetrics.from_json(metrics) if metrics else None
        self.revision = revision
        self.url = url


class CharmMeta(Type):
    _toSchema = {'tags': 'tags', 'storage': 'storage', 'payload_classes': 'payload-classes', 'min_juju_version': 'min-juju-version', 'requires': 'requires', 'subordinate': 'subordinate', 'series': 'series', 'categories': 'categories', 'terms': 'terms', 'extra_bindings': 'extra-bindings', 'provides': 'provides', 'summary': 'summary', 'resources': 'resources', 'description': 'description', 'name': 'name', 'peers': 'peers'}
    _toPy = {'tags': 'tags', 'storage': 'storage', 'subordinate': 'subordinate', 'requires': 'requires', 'description': 'description', 'min-juju-version': 'min_juju_version', 'series': 'series', 'categories': 'categories', 'terms': 'terms', 'payload-classes': 'payload_classes', 'provides': 'provides', 'summary': 'summary', 'resources': 'resources', 'extra-bindings': 'extra_bindings', 'name': 'name', 'peers': 'peers'}
    def __init__(self, categories=None, description=None, extra_bindings=None, min_juju_version=None, name=None, payload_classes=None, peers=None, provides=None, requires=None, resources=None, series=None, storage=None, subordinate=None, summary=None, tags=None, terms=None):
        '''
        categories : typing.Sequence<+T_co>[str]
        description : str
        extra_bindings : typing.Mapping<~KT, +VT_co>[str, str]
        min_juju_version : str
        name : str
        payload_classes : typing.Mapping<~KT, +VT_co>[str, ~CharmPayloadClass]<~CharmPayloadClass>
        peers : typing.Mapping<~KT, +VT_co>[str, ~CharmRelation]<~CharmRelation>
        provides : typing.Mapping<~KT, +VT_co>[str, ~CharmRelation]<~CharmRelation>
        requires : typing.Mapping<~KT, +VT_co>[str, ~CharmRelation]<~CharmRelation>
        resources : typing.Mapping<~KT, +VT_co>[str, ~CharmResourceMeta]<~CharmResourceMeta>
        series : typing.Sequence<+T_co>[str]
        storage : typing.Mapping<~KT, +VT_co>[str, ~CharmStorage]<~CharmStorage>
        subordinate : bool
        summary : str
        tags : typing.Sequence<+T_co>[str]
        terms : typing.Sequence<+T_co>[str]
        '''
        self.categories = categories
        self.description = description
        self.extra_bindings = extra_bindings
        self.min_juju_version = min_juju_version
        self.name = name
        self.payload_classes = payload_classes
        self.peers = peers
        self.provides = provides
        self.requires = requires
        self.resources = resources
        self.series = series
        self.storage = storage
        self.subordinate = subordinate
        self.summary = summary
        self.tags = tags
        self.terms = terms


class CharmMetric(Type):
    _toSchema = {'type_': 'type', 'description': 'description'}
    _toPy = {'description': 'description', 'type': 'type_'}
    def __init__(self, description=None, type_=None):
        '''
        description : str
        type_ : str
        '''
        self.description = description
        self.type_ = type_


class CharmMetrics(Type):
    _toSchema = {'plan': 'plan', 'metrics': 'metrics'}
    _toPy = {'plan': 'plan', 'metrics': 'metrics'}
    def __init__(self, metrics=None, plan=None):
        '''
        metrics : typing.Mapping<~KT, +VT_co>[str, ~CharmMetric]<~CharmMetric>
        plan : CharmPlan
        '''
        self.metrics = metrics
        self.plan = CharmPlan.from_json(plan) if plan else None


class CharmOption(Type):
    _toSchema = {'type_': 'type', 'default': 'default', 'description': 'description'}
    _toPy = {'default': 'default', 'description': 'description', 'type': 'type_'}
    def __init__(self, default=None, description=None, type_=None):
        '''
        default : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        description : str
        type_ : str
        '''
        self.default = default
        self.description = description
        self.type_ = type_


class CharmPayloadClass(Type):
    _toSchema = {'type_': 'type', 'name': 'name'}
    _toPy = {'name': 'name', 'type': 'type_'}
    def __init__(self, name=None, type_=None):
        '''
        name : str
        type_ : str
        '''
        self.name = name
        self.type_ = type_


class CharmPlan(Type):
    _toSchema = {'required': 'required'}
    _toPy = {'required': 'required'}
    def __init__(self, required=None):
        '''
        required : bool
        '''
        self.required = required


class CharmResourceMeta(Type):
    _toSchema = {'path': 'path', 'type_': 'type', 'description': 'description', 'name': 'name'}
    _toPy = {'path': 'path', 'description': 'description', 'name': 'name', 'type': 'type_'}
    def __init__(self, description=None, name=None, path=None, type_=None):
        '''
        description : str
        name : str
        path : str
        type_ : str
        '''
        self.description = description
        self.name = name
        self.path = path
        self.type_ = type_


class CharmStorage(Type):
    _toSchema = {'name': 'name', 'properties': 'properties', 'shared': 'shared', 'read_only': 'read-only', 'type_': 'type', 'minimum_size': 'minimum-size', 'count_max': 'count-max', 'description': 'description', 'count_min': 'count-min', 'location': 'location'}
    _toPy = {'properties': 'properties', 'shared': 'shared', 'read-only': 'read_only', 'minimum-size': 'minimum_size', 'count-max': 'count_max', 'count-min': 'count_min', 'description': 'description', 'location': 'location', 'type': 'type_', 'name': 'name'}
    def __init__(self, count_max=None, count_min=None, description=None, location=None, minimum_size=None, name=None, properties=None, read_only=None, shared=None, type_=None):
        '''
        count_max : int
        count_min : int
        description : str
        location : str
        minimum_size : int
        name : str
        properties : typing.Sequence<+T_co>[str]
        read_only : bool
        shared : bool
        type_ : str
        '''
        self.count_max = count_max
        self.count_min = count_min
        self.description = description
        self.location = location
        self.minimum_size = minimum_size
        self.name = name
        self.properties = properties
        self.read_only = read_only
        self.shared = shared
        self.type_ = type_


class CharmURL(Type):
    _toSchema = {'url': 'url'}
    _toPy = {'url': 'url'}
    def __init__(self, url=None):
        '''
        url : str
        '''
        self.url = url


class CharmsList(Type):
    _toSchema = {'names': 'names'}
    _toPy = {'names': 'names'}
    def __init__(self, names=None):
        '''
        names : typing.Sequence<+T_co>[str]
        '''
        self.names = names


class CharmsListResult(Type):
    _toSchema = {'charm_urls': 'charm-urls'}
    _toPy = {'charm-urls': 'charm_urls'}
    def __init__(self, charm_urls=None):
        '''
        charm_urls : typing.Sequence<+T_co>[str]
        '''
        self.charm_urls = charm_urls


class IsMeteredResult(Type):
    _toSchema = {'metered': 'metered'}
    _toPy = {'metered': 'metered'}
    def __init__(self, metered=None):
        '''
        metered : bool
        '''
        self.metered = metered


class APIHostPortsResult(Type):
    _toSchema = {'servers': 'servers'}
    _toPy = {'servers': 'servers'}
    def __init__(self, servers=None):
        '''
        servers : typing.Sequence<+T_co>[~HostPort]<~HostPort>
        '''
        self.servers = [HostPort.from_json(o) for o in servers or []]


class AddCharm(Type):
    _toSchema = {'url': 'url', 'channel': 'channel'}
    _toPy = {'url': 'url', 'channel': 'channel'}
    def __init__(self, channel=None, url=None):
        '''
        channel : str
        url : str
        '''
        self.channel = channel
        self.url = url


class AddCharmWithAuthorization(Type):
    _toSchema = {'macaroon': 'macaroon', 'url': 'url', 'channel': 'channel'}
    _toPy = {'macaroon': 'macaroon', 'url': 'url', 'channel': 'channel'}
    def __init__(self, channel=None, macaroon=None, url=None):
        '''
        channel : str
        macaroon : Macaroon
        url : str
        '''
        self.channel = channel
        self.macaroon = Macaroon.from_json(macaroon) if macaroon else None
        self.url = url


class AddMachineParams(Type):
    _toSchema = {'series': 'series', 'placement': 'placement', 'jobs': 'jobs', 'parent_id': 'parent-id', 'hardware_characteristics': 'hardware-characteristics', 'constraints': 'constraints', 'instance_id': 'instance-id', 'container_type': 'container-type', 'disks': 'disks', 'nonce': 'nonce', 'addresses': 'addresses'}
    _toPy = {'parent-id': 'parent_id', 'placement': 'placement', 'container-type': 'container_type', 'series': 'series', 'constraints': 'constraints', 'instance-id': 'instance_id', 'jobs': 'jobs', 'addresses': 'addresses', 'hardware-characteristics': 'hardware_characteristics', 'nonce': 'nonce', 'disks': 'disks'}
    def __init__(self, addresses=None, constraints=None, container_type=None, disks=None, hardware_characteristics=None, instance_id=None, jobs=None, nonce=None, parent_id=None, placement=None, series=None):
        '''
        addresses : typing.Sequence<+T_co>[~Address]<~Address>
        constraints : Value
        container_type : str
        disks : typing.Sequence<+T_co>[~Constraints]<~Constraints>
        hardware_characteristics : HardwareCharacteristics
        instance_id : str
        jobs : typing.Sequence<+T_co>[str]
        nonce : str
        parent_id : str
        placement : Placement
        series : str
        '''
        self.addresses = [Address.from_json(o) for o in addresses or []]
        self.constraints = Value.from_json(constraints) if constraints else None
        self.container_type = container_type
        self.disks = [Constraints.from_json(o) for o in disks or []]
        self.hardware_characteristics = HardwareCharacteristics.from_json(hardware_characteristics) if hardware_characteristics else None
        self.instance_id = instance_id
        self.jobs = jobs
        self.nonce = nonce
        self.parent_id = parent_id
        self.placement = Placement.from_json(placement) if placement else None
        self.series = series


class AddMachines(Type):
    _toSchema = {'params': 'params'}
    _toPy = {'params': 'params'}
    def __init__(self, params=None):
        '''
        params : typing.Sequence<+T_co>[~AddMachineParams]<~AddMachineParams>
        '''
        self.params = [AddMachineParams.from_json(o) for o in params or []]


class AddMachinesResult(Type):
    _toSchema = {'machine': 'machine', 'error': 'error'}
    _toPy = {'machine': 'machine', 'error': 'error'}
    def __init__(self, error=None, machine=None):
        '''
        error : Error
        machine : str
        '''
        self.error = Error.from_json(error) if error else None
        self.machine = machine


class AddMachinesResults(Type):
    _toSchema = {'machines': 'machines'}
    _toPy = {'machines': 'machines'}
    def __init__(self, machines=None):
        '''
        machines : typing.Sequence<+T_co>[~AddMachinesResult]<~AddMachinesResult>
        '''
        self.machines = [AddMachinesResult.from_json(o) for o in machines or []]


class Address(Type):
    _toSchema = {'scope': 'scope', 'type_': 'type', 'value': 'value', 'space_name': 'space-name'}
    _toPy = {'scope': 'scope', 'space-name': 'space_name', 'value': 'value', 'type': 'type_'}
    def __init__(self, scope=None, space_name=None, type_=None, value=None):
        '''
        scope : str
        space_name : str
        type_ : str
        value : str
        '''
        self.scope = scope
        self.space_name = space_name
        self.type_ = type_
        self.value = value


class AgentVersionResult(Type):
    _toSchema = {'version': 'version'}
    _toPy = {'version': 'version'}
    def __init__(self, version=None):
        '''
        version : Number
        '''
        self.version = Number.from_json(version) if version else None


class AllWatcherId(Type):
    _toSchema = {'watcher_id': 'watcher-id'}
    _toPy = {'watcher-id': 'watcher_id'}
    def __init__(self, watcher_id=None):
        '''
        watcher_id : str
        '''
        self.watcher_id = watcher_id


class ApplicationStatus(Type):
    _toSchema = {'status': 'status', 'charm': 'charm', 'relations': 'relations', 'subordinate_to': 'subordinate-to', 'err': 'err', 'series': 'series', 'exposed': 'exposed', 'workload_version': 'workload-version', 'can_upgrade_to': 'can-upgrade-to', 'meter_statuses': 'meter-statuses', 'life': 'life', 'units': 'units'}
    _toPy = {'status': 'status', 'charm': 'charm', 'can-upgrade-to': 'can_upgrade_to', 'relations': 'relations', 'workload-version': 'workload_version', 'err': 'err', 'series': 'series', 'exposed': 'exposed', 'meter-statuses': 'meter_statuses', 'life': 'life', 'subordinate-to': 'subordinate_to', 'units': 'units'}
    def __init__(self, can_upgrade_to=None, charm=None, err=None, exposed=None, life=None, meter_statuses=None, relations=None, series=None, status=None, subordinate_to=None, units=None, workload_version=None):
        '''
        can_upgrade_to : str
        charm : str
        err : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        exposed : bool
        life : str
        meter_statuses : typing.Mapping<~KT, +VT_co>[str, ~MeterStatus]<~MeterStatus>
        relations : typing.Sequence<+T_co>[str]
        series : str
        status : DetailedStatus
        subordinate_to : typing.Sequence<+T_co>[str]
        units : typing.Mapping<~KT, +VT_co>[str, ~UnitStatus]<~UnitStatus>
        workload_version : str
        '''
        self.can_upgrade_to = can_upgrade_to
        self.charm = charm
        self.err = err
        self.exposed = exposed
        self.life = life
        self.meter_statuses = meter_statuses
        self.relations = relations
        self.series = series
        self.status = DetailedStatus.from_json(status) if status else None
        self.subordinate_to = subordinate_to
        self.units = units
        self.workload_version = workload_version


class Binary(Type):
    _toSchema = {'series': 'Series', 'arch': 'Arch', 'number': 'Number'}
    _toPy = {'Series': 'series', 'Arch': 'arch', 'Number': 'number'}
    def __init__(self, arch=None, number=None, series=None):
        '''
        arch : str
        number : Number
        series : str
        '''
        self.arch = arch
        self.number = Number.from_json(number) if number else None
        self.series = series


class BundleChangesChange(Type):
    _toSchema = {'requires': 'requires', 'args': 'args', 'method': 'method', 'id_': 'id'}
    _toPy = {'requires': 'requires', 'args': 'args', 'method': 'method', 'id': 'id_'}
    def __init__(self, args=None, id_=None, method=None, requires=None):
        '''
        args : typing.Sequence<+T_co>[typing.Any]
        id_ : str
        method : str
        requires : typing.Sequence<+T_co>[str]
        '''
        self.args = args
        self.id_ = id_
        self.method = method
        self.requires = requires


class ConfigValue(Type):
    _toSchema = {'source': 'source', 'value': 'value'}
    _toPy = {'source': 'source', 'value': 'value'}
    def __init__(self, source=None, value=None):
        '''
        source : str
        value : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.source = source
        self.value = value


class DestroyMachines(Type):
    _toSchema = {'machine_names': 'machine-names', 'force': 'force'}
    _toPy = {'machine-names': 'machine_names', 'force': 'force'}
    def __init__(self, force=None, machine_names=None):
        '''
        force : bool
        machine_names : typing.Sequence<+T_co>[str]
        '''
        self.force = force
        self.machine_names = machine_names


class DetailedStatus(Type):
    _toSchema = {'kind': 'kind', 'since': 'since', 'version': 'version', 'status': 'status', 'data': 'data', 'err': 'err', 'info': 'info', 'life': 'life'}
    _toPy = {'kind': 'kind', 'since': 'since', 'version': 'version', 'status': 'status', 'data': 'data', 'err': 'err', 'info': 'info', 'life': 'life'}
    def __init__(self, data=None, err=None, info=None, kind=None, life=None, since=None, status=None, version=None):
        '''
        data : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        err : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        info : str
        kind : str
        life : str
        since : str
        status : str
        version : str
        '''
        self.data = data
        self.err = err
        self.info = info
        self.kind = kind
        self.life = life
        self.since = since
        self.status = status
        self.version = version


class EndpointStatus(Type):
    _toSchema = {'role': 'role', 'application': 'application', 'name': 'name', 'subordinate': 'subordinate'}
    _toPy = {'role': 'role', 'application': 'application', 'name': 'name', 'subordinate': 'subordinate'}
    def __init__(self, application=None, name=None, role=None, subordinate=None):
        '''
        application : str
        name : str
        role : str
        subordinate : bool
        '''
        self.application = application
        self.name = name
        self.role = role
        self.subordinate = subordinate


class EntityStatus(Type):
    _toSchema = {'since': 'since', 'info': 'info', 'data': 'data', 'status': 'status'}
    _toPy = {'since': 'since', 'info': 'info', 'data': 'data', 'status': 'status'}
    def __init__(self, data=None, info=None, since=None, status=None):
        '''
        data : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        info : str
        since : str
        status : str
        '''
        self.data = data
        self.info = info
        self.since = since
        self.status = status


class FindToolsParams(Type):
    _toSchema = {'series': 'series', 'number': 'number', 'arch': 'arch', 'minor': 'minor', 'major': 'major'}
    _toPy = {'series': 'series', 'number': 'number', 'arch': 'arch', 'minor': 'minor', 'major': 'major'}
    def __init__(self, arch=None, major=None, minor=None, number=None, series=None):
        '''
        arch : str
        major : int
        minor : int
        number : Number
        series : str
        '''
        self.arch = arch
        self.major = major
        self.minor = minor
        self.number = Number.from_json(number) if number else None
        self.series = series


class FindToolsResult(Type):
    _toSchema = {'error': 'error', 'list_': 'list'}
    _toPy = {'error': 'error', 'list': 'list_'}
    def __init__(self, error=None, list_=None):
        '''
        error : Error
        list_ : typing.Sequence<+T_co>[~Tools]<~Tools>
        '''
        self.error = Error.from_json(error) if error else None
        self.list_ = [Tools.from_json(o) for o in list_ or []]


class FullStatus(Type):
    _toSchema = {'model': 'model', 'relations': 'relations', 'machines': 'machines', 'applications': 'applications'}
    _toPy = {'model': 'model', 'relations': 'relations', 'machines': 'machines', 'applications': 'applications'}
    def __init__(self, applications=None, machines=None, model=None, relations=None):
        '''
        applications : typing.Mapping<~KT, +VT_co>[str, ~ApplicationStatus]<~ApplicationStatus>
        machines : typing.Mapping<~KT, +VT_co>[str, ~MachineStatus]<~MachineStatus>
        model : ModelStatusInfo
        relations : typing.Sequence<+T_co>[~RelationStatus]<~RelationStatus>
        '''
        self.applications = applications
        self.machines = machines
        self.model = ModelStatusInfo.from_json(model) if model else None
        self.relations = [RelationStatus.from_json(o) for o in relations or []]


class GetBundleChangesParams(Type):
    _toSchema = {'yaml': 'yaml'}
    _toPy = {'yaml': 'yaml'}
    def __init__(self, yaml=None):
        '''
        yaml : str
        '''
        self.yaml = yaml


class GetBundleChangesResults(Type):
    _toSchema = {'changes': 'changes', 'errors': 'errors'}
    _toPy = {'changes': 'changes', 'errors': 'errors'}
    def __init__(self, changes=None, errors=None):
        '''
        changes : typing.Sequence<+T_co>[~BundleChangesChange]<~BundleChangesChange>
        errors : typing.Sequence<+T_co>[str]
        '''
        self.changes = [BundleChangesChange.from_json(o) for o in changes or []]
        self.errors = errors


class HardwareCharacteristics(Type):
    _toSchema = {'root_disk': 'root-disk', 'cpu_power': 'cpu-power', 'tags': 'tags', 'cpu_cores': 'cpu-cores', 'arch': 'arch', 'mem': 'mem', 'availability_zone': 'availability-zone'}
    _toPy = {'root-disk': 'root_disk', 'tags': 'tags', 'cpu-cores': 'cpu_cores', 'cpu-power': 'cpu_power', 'arch': 'arch', 'availability-zone': 'availability_zone', 'mem': 'mem'}
    def __init__(self, arch=None, availability_zone=None, cpu_cores=None, cpu_power=None, mem=None, root_disk=None, tags=None):
        '''
        arch : str
        availability_zone : str
        cpu_cores : int
        cpu_power : int
        mem : int
        root_disk : int
        tags : typing.Sequence<+T_co>[str]
        '''
        self.arch = arch
        self.availability_zone = availability_zone
        self.cpu_cores = cpu_cores
        self.cpu_power = cpu_power
        self.mem = mem
        self.root_disk = root_disk
        self.tags = tags


class History(Type):
    _toSchema = {'error': 'error', 'statuses': 'statuses'}
    _toPy = {'error': 'error', 'statuses': 'statuses'}
    def __init__(self, error=None, statuses=None):
        '''
        error : Error
        statuses : typing.Sequence<+T_co>[~DetailedStatus]<~DetailedStatus>
        '''
        self.error = Error.from_json(error) if error else None
        self.statuses = [DetailedStatus.from_json(o) for o in statuses or []]


class HostPort(Type):
    _toSchema = {'address': 'Address', 'port': 'port'}
    _toPy = {'Address': 'address', 'port': 'port'}
    def __init__(self, address=None, port=None):
        '''
        address : Address
        port : int
        '''
        self.address = Address.from_json(address) if address else None
        self.port = port


class MachineHardware(Type):
    _toSchema = {'root_disk': 'root-disk', 'cpu_power': 'cpu-power', 'cores': 'cores', 'tags': 'tags', 'arch': 'arch', 'mem': 'mem', 'availability_zone': 'availability-zone'}
    _toPy = {'tags': 'tags', 'cores': 'cores', 'root-disk': 'root_disk', 'cpu-power': 'cpu_power', 'arch': 'arch', 'mem': 'mem', 'availability-zone': 'availability_zone'}
    def __init__(self, arch=None, availability_zone=None, cores=None, cpu_power=None, mem=None, root_disk=None, tags=None):
        '''
        arch : str
        availability_zone : str
        cores : int
        cpu_power : int
        mem : int
        root_disk : int
        tags : typing.Sequence<+T_co>[str]
        '''
        self.arch = arch
        self.availability_zone = availability_zone
        self.cores = cores
        self.cpu_power = cpu_power
        self.mem = mem
        self.root_disk = root_disk
        self.tags = tags


class MachineStatus(Type):
    _toSchema = {'series': 'series', 'containers': 'containers', 'instance_status': 'instance-status', 'hardware': 'hardware', 'agent_status': 'agent-status', 'dns_name': 'dns-name', 'instance_id': 'instance-id', 'jobs': 'jobs', 'has_vote': 'has-vote', 'id_': 'id', 'wants_vote': 'wants-vote'}
    _toPy = {'series': 'series', 'containers': 'containers', 'has-vote': 'has_vote', 'hardware': 'hardware', 'dns-name': 'dns_name', 'instance-status': 'instance_status', 'instance-id': 'instance_id', 'jobs': 'jobs', 'agent-status': 'agent_status', 'wants-vote': 'wants_vote', 'id': 'id_'}
    def __init__(self, agent_status=None, containers=None, dns_name=None, hardware=None, has_vote=None, id_=None, instance_id=None, instance_status=None, jobs=None, series=None, wants_vote=None):
        '''
        agent_status : DetailedStatus
        containers : typing.Mapping<~KT, +VT_co>[str, ~MachineStatus]<~MachineStatus>
        dns_name : str
        hardware : str
        has_vote : bool
        id_ : str
        instance_id : str
        instance_status : DetailedStatus
        jobs : typing.Sequence<+T_co>[str]
        series : str
        wants_vote : bool
        '''
        self.agent_status = DetailedStatus.from_json(agent_status) if agent_status else None
        self.containers = containers
        self.dns_name = dns_name
        self.hardware = hardware
        self.has_vote = has_vote
        self.id_ = id_
        self.instance_id = instance_id
        self.instance_status = DetailedStatus.from_json(instance_status) if instance_status else None
        self.jobs = jobs
        self.series = series
        self.wants_vote = wants_vote


class MeterStatus(Type):
    _toSchema = {'color': 'color', 'message': 'message'}
    _toPy = {'color': 'color', 'message': 'message'}
    def __init__(self, color=None, message=None):
        '''
        color : str
        message : str
        '''
        self.color = color
        self.message = message


class ModelConfigResults(Type):
    _toSchema = {'config': 'config'}
    _toPy = {'config': 'config'}
    def __init__(self, config=None):
        '''
        config : typing.Mapping<~KT, +VT_co>[str, ~ConfigValue]<~ConfigValue>
        '''
        self.config = config


class ModelDefaultValues(Type):
    _toSchema = {'cloud_tag': 'cloud-tag', 'cloud_region': 'cloud-region', 'config': 'config'}
    _toPy = {'cloud-region': 'cloud_region', 'cloud-tag': 'cloud_tag', 'config': 'config'}
    def __init__(self, cloud_region=None, cloud_tag=None, config=None):
        '''
        cloud_region : str
        cloud_tag : str
        config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.cloud_region = cloud_region
        self.cloud_tag = cloud_tag
        self.config = config


class ModelDefaults(Type):
    _toSchema = {'regions': 'regions', 'controller': 'controller', 'default': 'default'}
    _toPy = {'regions': 'regions', 'controller': 'controller', 'default': 'default'}
    def __init__(self, controller=None, default=None, regions=None):
        '''
        controller : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        default : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        regions : typing.Sequence<+T_co>[~RegionDefaults]<~RegionDefaults>
        '''
        self.controller = controller
        self.default = default
        self.regions = [RegionDefaults.from_json(o) for o in regions or []]


class ModelDefaultsResult(Type):
    _toSchema = {'config': 'config'}
    _toPy = {'config': 'config'}
    def __init__(self, config=None):
        '''
        config : typing.Mapping<~KT, +VT_co>[str, ~ModelDefaults]<~ModelDefaults>
        '''
        self.config = config


class ModelInfo(Type):
    _toSchema = {'status': 'status', 'machines': 'machines', 'users': 'users', 'uuid': 'uuid', 'life': 'life', 'cloud_region': 'cloud-region', 'owner_tag': 'owner-tag', 'cloud': 'cloud', 'controller_uuid': 'controller-uuid', 'provider_type': 'provider-type', 'default_series': 'default-series', 'name': 'name', 'cloud_credential_tag': 'cloud-credential-tag'}
    _toPy = {'machines': 'machines', 'users': 'users', 'owner-tag': 'owner_tag', 'uuid': 'uuid', 'life': 'life', 'default-series': 'default_series', 'cloud': 'cloud', 'controller-uuid': 'controller_uuid', 'cloud-credential-tag': 'cloud_credential_tag', 'cloud-region': 'cloud_region', 'provider-type': 'provider_type', 'name': 'name', 'status': 'status'}
    def __init__(self, cloud=None, cloud_credential_tag=None, cloud_region=None, controller_uuid=None, default_series=None, life=None, machines=None, name=None, owner_tag=None, provider_type=None, status=None, users=None, uuid=None):
        '''
        cloud : str
        cloud_credential_tag : str
        cloud_region : str
        controller_uuid : str
        default_series : str
        life : str
        machines : typing.Sequence<+T_co>[~ModelMachineInfo]<~ModelMachineInfo>
        name : str
        owner_tag : str
        provider_type : str
        status : EntityStatus
        users : typing.Sequence<+T_co>[~ModelUserInfo]<~ModelUserInfo>
        uuid : str
        '''
        self.cloud = cloud
        self.cloud_credential_tag = cloud_credential_tag
        self.cloud_region = cloud_region
        self.controller_uuid = controller_uuid
        self.default_series = default_series
        self.life = life
        self.machines = [ModelMachineInfo.from_json(o) for o in machines or []]
        self.name = name
        self.owner_tag = owner_tag
        self.provider_type = provider_type
        self.status = EntityStatus.from_json(status) if status else None
        self.users = [ModelUserInfo.from_json(o) for o in users or []]
        self.uuid = uuid


class ModelMachineInfo(Type):
    _toSchema = {'hardware': 'hardware', 'id_': 'id'}
    _toPy = {'hardware': 'hardware', 'id': 'id_'}
    def __init__(self, hardware=None, id_=None):
        '''
        hardware : MachineHardware
        id_ : str
        '''
        self.hardware = MachineHardware.from_json(hardware) if hardware else None
        self.id_ = id_


class ModelSet(Type):
    _toSchema = {'config': 'config'}
    _toPy = {'config': 'config'}
    def __init__(self, config=None):
        '''
        config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.config = config


class ModelStatusInfo(Type):
    _toSchema = {'region': 'region', 'available_version': 'available-version', 'migration': 'migration', 'cloud': 'cloud', 'version': 'version', 'name': 'name'}
    _toPy = {'region': 'region', 'version': 'version', 'migration': 'migration', 'cloud': 'cloud', 'available-version': 'available_version', 'name': 'name'}
    def __init__(self, available_version=None, cloud=None, migration=None, name=None, region=None, version=None):
        '''
        available_version : str
        cloud : str
        migration : str
        name : str
        region : str
        version : str
        '''
        self.available_version = available_version
        self.cloud = cloud
        self.migration = migration
        self.name = name
        self.region = region
        self.version = version


class ModelUnset(Type):
    _toSchema = {'keys': 'keys'}
    _toPy = {'keys': 'keys'}
    def __init__(self, keys=None):
        '''
        keys : typing.Sequence<+T_co>[str]
        '''
        self.keys = keys


class ModelUnsetKeys(Type):
    _toSchema = {'cloud_tag': 'cloud-tag', 'cloud_region': 'cloud-region', 'keys': 'keys'}
    _toPy = {'cloud-region': 'cloud_region', 'cloud-tag': 'cloud_tag', 'keys': 'keys'}
    def __init__(self, cloud_region=None, cloud_tag=None, keys=None):
        '''
        cloud_region : str
        cloud_tag : str
        keys : typing.Sequence<+T_co>[str]
        '''
        self.cloud_region = cloud_region
        self.cloud_tag = cloud_tag
        self.keys = keys


class ModelUserInfo(Type):
    _toSchema = {'display_name': 'display-name', 'last_connection': 'last-connection', 'access': 'access', 'user': 'user'}
    _toPy = {'access': 'access', 'display-name': 'display_name', 'user': 'user', 'last-connection': 'last_connection'}
    def __init__(self, access=None, display_name=None, last_connection=None, user=None):
        '''
        access : str
        display_name : str
        last_connection : str
        user : str
        '''
        self.access = access
        self.display_name = display_name
        self.last_connection = last_connection
        self.user = user


class ModelUserInfoResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : ModelUserInfo
        '''
        self.error = Error.from_json(error) if error else None
        self.result = ModelUserInfo.from_json(result) if result else None


class ModelUserInfoResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ModelUserInfoResult]<~ModelUserInfoResult>
        '''
        self.results = [ModelUserInfoResult.from_json(o) for o in results or []]


class PrivateAddress(Type):
    _toSchema = {'target': 'target'}
    _toPy = {'target': 'target'}
    def __init__(self, target=None):
        '''
        target : str
        '''
        self.target = target


class PrivateAddressResults(Type):
    _toSchema = {'private_address': 'private-address'}
    _toPy = {'private-address': 'private_address'}
    def __init__(self, private_address=None):
        '''
        private_address : str
        '''
        self.private_address = private_address


class ProvisioningScriptParams(Type):
    _toSchema = {'disable_package_commands': 'disable-package-commands', 'machine_id': 'machine-id', 'nonce': 'nonce', 'data_dir': 'data-dir'}
    _toPy = {'data-dir': 'data_dir', 'nonce': 'nonce', 'disable-package-commands': 'disable_package_commands', 'machine-id': 'machine_id'}
    def __init__(self, data_dir=None, disable_package_commands=None, machine_id=None, nonce=None):
        '''
        data_dir : str
        disable_package_commands : bool
        machine_id : str
        nonce : str
        '''
        self.data_dir = data_dir
        self.disable_package_commands = disable_package_commands
        self.machine_id = machine_id
        self.nonce = nonce


class ProvisioningScriptResult(Type):
    _toSchema = {'script': 'script'}
    _toPy = {'script': 'script'}
    def __init__(self, script=None):
        '''
        script : str
        '''
        self.script = script


class PublicAddress(Type):
    _toSchema = {'target': 'target'}
    _toPy = {'target': 'target'}
    def __init__(self, target=None):
        '''
        target : str
        '''
        self.target = target


class PublicAddressResults(Type):
    _toSchema = {'public_address': 'public-address'}
    _toPy = {'public-address': 'public_address'}
    def __init__(self, public_address=None):
        '''
        public_address : str
        '''
        self.public_address = public_address


class RegionDefaults(Type):
    _toSchema = {'value': 'value', 'region_name': 'region-name'}
    _toPy = {'value': 'value', 'region-name': 'region_name'}
    def __init__(self, region_name=None, value=None):
        '''
        region_name : str
        value : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.region_name = region_name
        self.value = value


class RelationStatus(Type):
    _toSchema = {'scope': 'scope', 'key': 'key', 'endpoints': 'endpoints', 'id_': 'id', 'interface': 'interface'}
    _toPy = {'scope': 'scope', 'key': 'key', 'interface': 'interface', 'endpoints': 'endpoints', 'id': 'id_'}
    def __init__(self, endpoints=None, id_=None, interface=None, key=None, scope=None):
        '''
        endpoints : typing.Sequence<+T_co>[~EndpointStatus]<~EndpointStatus>
        id_ : int
        interface : str
        key : str
        scope : str
        '''
        self.endpoints = [EndpointStatus.from_json(o) for o in endpoints or []]
        self.id_ = id_
        self.interface = interface
        self.key = key
        self.scope = scope


class ResolveCharmResult(Type):
    _toSchema = {'error': 'error', 'url': 'url'}
    _toPy = {'error': 'error', 'url': 'url'}
    def __init__(self, error=None, url=None):
        '''
        error : str
        url : str
        '''
        self.error = error
        self.url = url


class ResolveCharmResults(Type):
    _toSchema = {'urls': 'urls'}
    _toPy = {'urls': 'urls'}
    def __init__(self, urls=None):
        '''
        urls : typing.Sequence<+T_co>[~ResolveCharmResult]<~ResolveCharmResult>
        '''
        self.urls = [ResolveCharmResult.from_json(o) for o in urls or []]


class ResolveCharms(Type):
    _toSchema = {'references': 'references'}
    _toPy = {'references': 'references'}
    def __init__(self, references=None):
        '''
        references : typing.Sequence<+T_co>[str]
        '''
        self.references = references


class Resolved(Type):
    _toSchema = {'retry': 'retry', 'unit_name': 'unit-name'}
    _toPy = {'unit-name': 'unit_name', 'retry': 'retry'}
    def __init__(self, retry=None, unit_name=None):
        '''
        retry : bool
        unit_name : str
        '''
        self.retry = retry
        self.unit_name = unit_name


class SetModelAgentVersion(Type):
    _toSchema = {'version': 'version'}
    _toPy = {'version': 'version'}
    def __init__(self, version=None):
        '''
        version : Number
        '''
        self.version = Number.from_json(version) if version else None


class SetModelDefaults(Type):
    _toSchema = {'config': 'config'}
    _toPy = {'config': 'config'}
    def __init__(self, config=None):
        '''
        config : typing.Sequence<+T_co>[~ModelDefaultValues]<~ModelDefaultValues>
        '''
        self.config = [ModelDefaultValues.from_json(o) for o in config or []]


class StatusHistoryFilter(Type):
    _toSchema = {'delta': 'delta', 'date': 'date', 'size': 'size'}
    _toPy = {'delta': 'delta', 'date': 'date', 'size': 'size'}
    def __init__(self, date=None, delta=None, size=None):
        '''
        date : str
        delta : int
        size : int
        '''
        self.date = date
        self.delta = delta
        self.size = size


class StatusHistoryRequest(Type):
    _toSchema = {'tag': 'tag', 'historykind': 'historyKind', 'size': 'size', 'filter_': 'filter'}
    _toPy = {'tag': 'tag', 'size': 'size', 'historyKind': 'historykind', 'filter': 'filter_'}
    def __init__(self, filter_=None, historykind=None, size=None, tag=None):
        '''
        filter_ : StatusHistoryFilter
        historykind : str
        size : int
        tag : str
        '''
        self.filter_ = StatusHistoryFilter.from_json(filter_) if filter_ else None
        self.historykind = historykind
        self.size = size
        self.tag = tag


class StatusHistoryRequests(Type):
    _toSchema = {'requests': 'requests'}
    _toPy = {'requests': 'requests'}
    def __init__(self, requests=None):
        '''
        requests : typing.Sequence<+T_co>[~StatusHistoryRequest]<~StatusHistoryRequest>
        '''
        self.requests = [StatusHistoryRequest.from_json(o) for o in requests or []]


class StatusHistoryResult(Type):
    _toSchema = {'error': 'error', 'history': 'history'}
    _toPy = {'error': 'error', 'history': 'history'}
    def __init__(self, error=None, history=None):
        '''
        error : Error
        history : History
        '''
        self.error = Error.from_json(error) if error else None
        self.history = History.from_json(history) if history else None


class StatusHistoryResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~StatusHistoryResult]<~StatusHistoryResult>
        '''
        self.results = [StatusHistoryResult.from_json(o) for o in results or []]


class StatusParams(Type):
    _toSchema = {'patterns': 'patterns'}
    _toPy = {'patterns': 'patterns'}
    def __init__(self, patterns=None):
        '''
        patterns : typing.Sequence<+T_co>[str]
        '''
        self.patterns = patterns


class Tools(Type):
    _toSchema = {'sha256': 'sha256', 'version': 'version', 'url': 'url', 'size': 'size'}
    _toPy = {'sha256': 'sha256', 'version': 'version', 'url': 'url', 'size': 'size'}
    def __init__(self, sha256=None, size=None, url=None, version=None):
        '''
        sha256 : str
        size : int
        url : str
        version : Binary
        '''
        self.sha256 = sha256
        self.size = size
        self.url = url
        self.version = Binary.from_json(version) if version else None


class UnitStatus(Type):
    _toSchema = {'machine': 'machine', 'opened_ports': 'opened-ports', 'public_address': 'public-address', 'workload_version': 'workload-version', 'agent_status': 'agent-status', 'charm': 'charm', 'subordinates': 'subordinates', 'workload_status': 'workload-status'}
    _toPy = {'machine': 'machine', 'opened-ports': 'opened_ports', 'subordinates': 'subordinates', 'charm': 'charm', 'workload-status': 'workload_status', 'public-address': 'public_address', 'workload-version': 'workload_version', 'agent-status': 'agent_status'}
    def __init__(self, agent_status=None, charm=None, machine=None, opened_ports=None, public_address=None, subordinates=None, workload_status=None, workload_version=None):
        '''
        agent_status : DetailedStatus
        charm : str
        machine : str
        opened_ports : typing.Sequence<+T_co>[str]
        public_address : str
        subordinates : typing.Mapping<~KT, +VT_co>[str, ~UnitStatus]<~UnitStatus>
        workload_status : DetailedStatus
        workload_version : str
        '''
        self.agent_status = DetailedStatus.from_json(agent_status) if agent_status else None
        self.charm = charm
        self.machine = machine
        self.opened_ports = opened_ports
        self.public_address = public_address
        self.subordinates = subordinates
        self.workload_status = DetailedStatus.from_json(workload_status) if workload_status else None
        self.workload_version = workload_version


class UnsetModelDefaults(Type):
    _toSchema = {'keys': 'keys'}
    _toPy = {'keys': 'keys'}
    def __init__(self, keys=None):
        '''
        keys : typing.Sequence<+T_co>[~ModelUnsetKeys]<~ModelUnsetKeys>
        '''
        self.keys = [ModelUnsetKeys.from_json(o) for o in keys or []]


class Cloud(Type):
    _toSchema = {'regions': 'regions', 'auth_types': 'auth-types', 'type_': 'type', 'endpoint': 'endpoint', 'storage_endpoint': 'storage-endpoint', 'identity_endpoint': 'identity-endpoint'}
    _toPy = {'regions': 'regions', 'auth-types': 'auth_types', 'storage-endpoint': 'storage_endpoint', 'identity-endpoint': 'identity_endpoint', 'type': 'type_', 'endpoint': 'endpoint'}
    def __init__(self, auth_types=None, endpoint=None, identity_endpoint=None, regions=None, storage_endpoint=None, type_=None):
        '''
        auth_types : typing.Sequence<+T_co>[str]
        endpoint : str
        identity_endpoint : str
        regions : typing.Sequence<+T_co>[~CloudRegion]<~CloudRegion>
        storage_endpoint : str
        type_ : str
        '''
        self.auth_types = auth_types
        self.endpoint = endpoint
        self.identity_endpoint = identity_endpoint
        self.regions = [CloudRegion.from_json(o) for o in regions or []]
        self.storage_endpoint = storage_endpoint
        self.type_ = type_


class CloudCredentialResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : CloudCredential
        '''
        self.error = Error.from_json(error) if error else None
        self.result = CloudCredential.from_json(result) if result else None


class CloudCredentialResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~CloudCredentialResult]<~CloudCredentialResult>
        '''
        self.results = [CloudCredentialResult.from_json(o) for o in results or []]


class CloudRegion(Type):
    _toSchema = {'identity_endpoint': 'identity-endpoint', 'name': 'name', 'storage_endpoint': 'storage-endpoint', 'endpoint': 'endpoint'}
    _toPy = {'storage-endpoint': 'storage_endpoint', 'identity-endpoint': 'identity_endpoint', 'name': 'name', 'endpoint': 'endpoint'}
    def __init__(self, endpoint=None, identity_endpoint=None, name=None, storage_endpoint=None):
        '''
        endpoint : str
        identity_endpoint : str
        name : str
        storage_endpoint : str
        '''
        self.endpoint = endpoint
        self.identity_endpoint = identity_endpoint
        self.name = name
        self.storage_endpoint = storage_endpoint


class CloudResult(Type):
    _toSchema = {'error': 'error', 'cloud': 'cloud'}
    _toPy = {'error': 'error', 'cloud': 'cloud'}
    def __init__(self, cloud=None, error=None):
        '''
        cloud : Cloud
        error : Error
        '''
        self.cloud = Cloud.from_json(cloud) if cloud else None
        self.error = Error.from_json(error) if error else None


class CloudResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~CloudResult]<~CloudResult>
        '''
        self.results = [CloudResult.from_json(o) for o in results or []]


class CloudsResult(Type):
    _toSchema = {'clouds': 'clouds'}
    _toPy = {'clouds': 'clouds'}
    def __init__(self, clouds=None):
        '''
        clouds : typing.Mapping<~KT, +VT_co>[str, ~Cloud]<~Cloud>
        '''
        self.clouds = clouds


class StringsResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : typing.Sequence<+T_co>[str]
        '''
        self.error = Error.from_json(error) if error else None
        self.result = result


class StringsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~StringsResult]<~StringsResult>
        '''
        self.results = [StringsResult.from_json(o) for o in results or []]


class UpdateCloudCredential(Type):
    _toSchema = {'tag': 'tag', 'credential': 'credential'}
    _toPy = {'tag': 'tag', 'credential': 'credential'}
    def __init__(self, credential=None, tag=None):
        '''
        credential : CloudCredential
        tag : str
        '''
        self.credential = CloudCredential.from_json(credential) if credential else None
        self.tag = tag


class UpdateCloudCredentials(Type):
    _toSchema = {'credentials': 'credentials'}
    _toPy = {'credentials': 'credentials'}
    def __init__(self, credentials=None):
        '''
        credentials : typing.Sequence<+T_co>[~UpdateCloudCredential]<~UpdateCloudCredential>
        '''
        self.credentials = [UpdateCloudCredential.from_json(o) for o in credentials or []]


class UserCloud(Type):
    _toSchema = {'cloud_tag': 'cloud-tag', 'user_tag': 'user-tag'}
    _toPy = {'user-tag': 'user_tag', 'cloud-tag': 'cloud_tag'}
    def __init__(self, cloud_tag=None, user_tag=None):
        '''
        cloud_tag : str
        user_tag : str
        '''
        self.cloud_tag = cloud_tag
        self.user_tag = user_tag


class UserClouds(Type):
    _toSchema = {'user_clouds': 'user-clouds'}
    _toPy = {'user-clouds': 'user_clouds'}
    def __init__(self, user_clouds=None):
        '''
        user_clouds : typing.Sequence<+T_co>[~UserCloud]<~UserCloud>
        '''
        self.user_clouds = [UserCloud.from_json(o) for o in user_clouds or []]


class DestroyControllerArgs(Type):
    _toSchema = {'destroy_models': 'destroy-models'}
    _toPy = {'destroy-models': 'destroy_models'}
    def __init__(self, destroy_models=None):
        '''
        destroy_models : bool
        '''
        self.destroy_models = destroy_models


class InitiateMigrationArgs(Type):
    _toSchema = {'specs': 'specs'}
    _toPy = {'specs': 'specs'}
    def __init__(self, specs=None):
        '''
        specs : typing.Sequence<+T_co>[~MigrationSpec]<~MigrationSpec>
        '''
        self.specs = [MigrationSpec.from_json(o) for o in specs or []]


class InitiateMigrationResult(Type):
    _toSchema = {'migration_id': 'migration-id', 'error': 'error', 'model_tag': 'model-tag'}
    _toPy = {'error': 'error', 'migration-id': 'migration_id', 'model-tag': 'model_tag'}
    def __init__(self, error=None, migration_id=None, model_tag=None):
        '''
        error : Error
        migration_id : str
        model_tag : str
        '''
        self.error = Error.from_json(error) if error else None
        self.migration_id = migration_id
        self.model_tag = model_tag


class InitiateMigrationResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~InitiateMigrationResult]<~InitiateMigrationResult>
        '''
        self.results = [InitiateMigrationResult.from_json(o) for o in results or []]


class MigrationSpec(Type):
    _toSchema = {'external_control': 'external-control', 'model_tag': 'model-tag', 'target_info': 'target-info'}
    _toPy = {'model-tag': 'model_tag', 'target-info': 'target_info', 'external-control': 'external_control'}
    def __init__(self, external_control=None, model_tag=None, target_info=None):
        '''
        external_control : bool
        model_tag : str
        target_info : MigrationTargetInfo
        '''
        self.external_control = external_control
        self.model_tag = model_tag
        self.target_info = MigrationTargetInfo.from_json(target_info) if target_info else None


class MigrationTargetInfo(Type):
    _toSchema = {'macaroons': 'macaroons', 'password': 'password', 'ca_cert': 'ca-cert', 'auth_tag': 'auth-tag', 'controller_tag': 'controller-tag', 'addrs': 'addrs'}
    _toPy = {'macaroons': 'macaroons', 'password': 'password', 'ca-cert': 'ca_cert', 'addrs': 'addrs', 'auth-tag': 'auth_tag', 'controller-tag': 'controller_tag'}
    def __init__(self, addrs=None, auth_tag=None, ca_cert=None, controller_tag=None, macaroons=None, password=None):
        '''
        addrs : typing.Sequence<+T_co>[str]
        auth_tag : str
        ca_cert : str
        controller_tag : str
        macaroons : str
        password : str
        '''
        self.addrs = addrs
        self.auth_tag = auth_tag
        self.ca_cert = ca_cert
        self.controller_tag = controller_tag
        self.macaroons = macaroons
        self.password = password


class Model(Type):
    _toSchema = {'name': 'name', 'uuid': 'uuid', 'owner_tag': 'owner-tag'}
    _toPy = {'owner-tag': 'owner_tag', 'name': 'name', 'uuid': 'uuid'}
    def __init__(self, name=None, owner_tag=None, uuid=None):
        '''
        name : str
        owner_tag : str
        uuid : str
        '''
        self.name = name
        self.owner_tag = owner_tag
        self.uuid = uuid


class ModelBlockInfo(Type):
    _toSchema = {'model_uuid': 'model-uuid', 'name': 'name', 'blocks': 'blocks', 'owner_tag': 'owner-tag'}
    _toPy = {'model-uuid': 'model_uuid', 'owner-tag': 'owner_tag', 'name': 'name', 'blocks': 'blocks'}
    def __init__(self, blocks=None, model_uuid=None, name=None, owner_tag=None):
        '''
        blocks : typing.Sequence<+T_co>[str]
        model_uuid : str
        name : str
        owner_tag : str
        '''
        self.blocks = blocks
        self.model_uuid = model_uuid
        self.name = name
        self.owner_tag = owner_tag


class ModelBlockInfoList(Type):
    _toSchema = {'models': 'models'}
    _toPy = {'models': 'models'}
    def __init__(self, models=None):
        '''
        models : typing.Sequence<+T_co>[~ModelBlockInfo]<~ModelBlockInfo>
        '''
        self.models = [ModelBlockInfo.from_json(o) for o in models or []]


class ModelStatus(Type):
    _toSchema = {'hosted_machine_count': 'hosted-machine-count', 'machines': 'machines', 'owner_tag': 'owner-tag', 'application_count': 'application-count', 'model_tag': 'model-tag', 'life': 'life'}
    _toPy = {'machines': 'machines', 'model-tag': 'model_tag', 'application-count': 'application_count', 'owner-tag': 'owner_tag', 'hosted-machine-count': 'hosted_machine_count', 'life': 'life'}
    def __init__(self, application_count=None, hosted_machine_count=None, life=None, machines=None, model_tag=None, owner_tag=None):
        '''
        application_count : int
        hosted_machine_count : int
        life : str
        machines : typing.Sequence<+T_co>[~ModelMachineInfo]<~ModelMachineInfo>
        model_tag : str
        owner_tag : str
        '''
        self.application_count = application_count
        self.hosted_machine_count = hosted_machine_count
        self.life = life
        self.machines = [ModelMachineInfo.from_json(o) for o in machines or []]
        self.model_tag = model_tag
        self.owner_tag = owner_tag


class ModelStatusResults(Type):
    _toSchema = {'models': 'models'}
    _toPy = {'models': 'models'}
    def __init__(self, models=None):
        '''
        models : typing.Sequence<+T_co>[~ModelStatus]<~ModelStatus>
        '''
        self.models = [ModelStatus.from_json(o) for o in models or []]


class ModifyControllerAccess(Type):
    _toSchema = {'user_tag': 'user-tag', 'action': 'action', 'access': 'access'}
    _toPy = {'user-tag': 'user_tag', 'action': 'action', 'access': 'access'}
    def __init__(self, access=None, action=None, user_tag=None):
        '''
        access : str
        action : str
        user_tag : str
        '''
        self.access = access
        self.action = action
        self.user_tag = user_tag


class ModifyControllerAccessRequest(Type):
    _toSchema = {'changes': 'changes'}
    _toPy = {'changes': 'changes'}
    def __init__(self, changes=None):
        '''
        changes : typing.Sequence<+T_co>[~ModifyControllerAccess]<~ModifyControllerAccess>
        '''
        self.changes = [ModifyControllerAccess.from_json(o) for o in changes or []]


class RemoveBlocksArgs(Type):
    _toSchema = {'all_': 'all'}
    _toPy = {'all': 'all_'}
    def __init__(self, all_=None):
        '''
        all_ : bool
        '''
        self.all_ = all_


class UserAccess(Type):
    _toSchema = {'user_tag': 'user-tag', 'access': 'access'}
    _toPy = {'user-tag': 'user_tag', 'access': 'access'}
    def __init__(self, access=None, user_tag=None):
        '''
        access : str
        user_tag : str
        '''
        self.access = access
        self.user_tag = user_tag


class UserAccessResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : UserAccess
        '''
        self.error = Error.from_json(error) if error else None
        self.result = UserAccess.from_json(result) if result else None


class UserAccessResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~UserAccessResult]<~UserAccessResult>
        '''
        self.results = [UserAccessResult.from_json(o) for o in results or []]


class UserModel(Type):
    _toSchema = {'model': 'model', 'last_connection': 'last-connection'}
    _toPy = {'model': 'model', 'last-connection': 'last_connection'}
    def __init__(self, last_connection=None, model=None):
        '''
        last_connection : str
        model : Model
        '''
        self.last_connection = last_connection
        self.model = Model.from_json(model) if model else None


class UserModelList(Type):
    _toSchema = {'user_models': 'user-models'}
    _toPy = {'user-models': 'user_models'}
    def __init__(self, user_models=None):
        '''
        user_models : typing.Sequence<+T_co>[~UserModel]<~UserModel>
        '''
        self.user_models = [UserModel.from_json(o) for o in user_models or []]


class BytesResult(Type):
    _toSchema = {'result': 'result'}
    _toPy = {'result': 'result'}
    def __init__(self, result=None):
        '''
        result : typing.Sequence<+T_co>[int]
        '''
        self.result = result


class DeployerConnectionValues(Type):
    _toSchema = {'api_addresses': 'api-addresses', 'state_addresses': 'state-addresses'}
    _toPy = {'api-addresses': 'api_addresses', 'state-addresses': 'state_addresses'}
    def __init__(self, api_addresses=None, state_addresses=None):
        '''
        api_addresses : typing.Sequence<+T_co>[str]
        state_addresses : typing.Sequence<+T_co>[str]
        '''
        self.api_addresses = api_addresses
        self.state_addresses = state_addresses


class LifeResult(Type):
    _toSchema = {'error': 'error', 'life': 'life'}
    _toPy = {'error': 'error', 'life': 'life'}
    def __init__(self, error=None, life=None):
        '''
        error : Error
        life : str
        '''
        self.error = Error.from_json(error) if error else None
        self.life = life


class LifeResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~LifeResult]<~LifeResult>
        '''
        self.results = [LifeResult.from_json(o) for o in results or []]


class StringsWatchResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~StringsWatchResult]<~StringsWatchResult>
        '''
        self.results = [StringsWatchResult.from_json(o) for o in results or []]


class AddSubnetParams(Type):
    _toSchema = {'zones': 'zones', 'subnet_provider_id': 'subnet-provider-id', 'subnet_tag': 'subnet-tag', 'space_tag': 'space-tag'}
    _toPy = {'space-tag': 'space_tag', 'subnet-provider-id': 'subnet_provider_id', 'zones': 'zones', 'subnet-tag': 'subnet_tag'}
    def __init__(self, space_tag=None, subnet_provider_id=None, subnet_tag=None, zones=None):
        '''
        space_tag : str
        subnet_provider_id : str
        subnet_tag : str
        zones : typing.Sequence<+T_co>[str]
        '''
        self.space_tag = space_tag
        self.subnet_provider_id = subnet_provider_id
        self.subnet_tag = subnet_tag
        self.zones = zones


class AddSubnetsParams(Type):
    _toSchema = {'subnets': 'subnets'}
    _toPy = {'subnets': 'subnets'}
    def __init__(self, subnets=None):
        '''
        subnets : typing.Sequence<+T_co>[~AddSubnetParams]<~AddSubnetParams>
        '''
        self.subnets = [AddSubnetParams.from_json(o) for o in subnets or []]


class CreateSpaceParams(Type):
    _toSchema = {'subnet_tags': 'subnet-tags', 'public': 'public', 'space_tag': 'space-tag', 'provider_id': 'provider-id'}
    _toPy = {'space-tag': 'space_tag', 'public': 'public', 'provider-id': 'provider_id', 'subnet-tags': 'subnet_tags'}
    def __init__(self, provider_id=None, public=None, space_tag=None, subnet_tags=None):
        '''
        provider_id : str
        public : bool
        space_tag : str
        subnet_tags : typing.Sequence<+T_co>[str]
        '''
        self.provider_id = provider_id
        self.public = public
        self.space_tag = space_tag
        self.subnet_tags = subnet_tags


class CreateSpacesParams(Type):
    _toSchema = {'spaces': 'spaces'}
    _toPy = {'spaces': 'spaces'}
    def __init__(self, spaces=None):
        '''
        spaces : typing.Sequence<+T_co>[~CreateSpaceParams]<~CreateSpaceParams>
        '''
        self.spaces = [CreateSpaceParams.from_json(o) for o in spaces or []]


class DiscoverSpacesResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ProviderSpace]<~ProviderSpace>
        '''
        self.results = [ProviderSpace.from_json(o) for o in results or []]


class ListSubnetsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~Subnet]<~Subnet>
        '''
        self.results = [Subnet.from_json(o) for o in results or []]


class ProviderSpace(Type):
    _toSchema = {'subnets': 'subnets', 'provider_id': 'provider-id', 'error': 'error', 'name': 'name'}
    _toPy = {'subnets': 'subnets', 'provider-id': 'provider_id', 'error': 'error', 'name': 'name'}
    def __init__(self, error=None, name=None, provider_id=None, subnets=None):
        '''
        error : Error
        name : str
        provider_id : str
        subnets : typing.Sequence<+T_co>[~Subnet]<~Subnet>
        '''
        self.error = Error.from_json(error) if error else None
        self.name = name
        self.provider_id = provider_id
        self.subnets = [Subnet.from_json(o) for o in subnets or []]


class Subnet(Type):
    _toSchema = {'vlan_tag': 'vlan-tag', 'zones': 'zones', 'cidr': 'cidr', 'life': 'life', 'status': 'status', 'space_tag': 'space-tag', 'provider_id': 'provider-id'}
    _toPy = {'zones': 'zones', 'cidr': 'cidr', 'provider-id': 'provider_id', 'status': 'status', 'space-tag': 'space_tag', 'vlan-tag': 'vlan_tag', 'life': 'life'}
    def __init__(self, cidr=None, life=None, provider_id=None, space_tag=None, status=None, vlan_tag=None, zones=None):
        '''
        cidr : str
        life : str
        provider_id : str
        space_tag : str
        status : str
        vlan_tag : int
        zones : typing.Sequence<+T_co>[str]
        '''
        self.cidr = cidr
        self.life = life
        self.provider_id = provider_id
        self.space_tag = space_tag
        self.status = status
        self.vlan_tag = vlan_tag
        self.zones = zones


class SubnetsFilters(Type):
    _toSchema = {'zone': 'zone', 'space_tag': 'space-tag'}
    _toPy = {'space-tag': 'space_tag', 'zone': 'zone'}
    def __init__(self, space_tag=None, zone=None):
        '''
        space_tag : str
        zone : str
        '''
        self.space_tag = space_tag
        self.zone = zone


class BlockDevice(Type):
    _toSchema = {'devicename': 'DeviceName', 'hardwareid': 'HardwareId', 'busaddress': 'BusAddress', 'devicelinks': 'DeviceLinks', 'inuse': 'InUse', 'size': 'Size', 'mountpoint': 'MountPoint', 'label': 'Label', 'uuid': 'UUID', 'filesystemtype': 'FilesystemType'}
    _toPy = {'HardwareId': 'hardwareid', 'UUID': 'uuid', 'Size': 'size', 'BusAddress': 'busaddress', 'MountPoint': 'mountpoint', 'DeviceLinks': 'devicelinks', 'DeviceName': 'devicename', 'InUse': 'inuse', 'FilesystemType': 'filesystemtype', 'Label': 'label'}
    def __init__(self, busaddress=None, devicelinks=None, devicename=None, filesystemtype=None, hardwareid=None, inuse=None, label=None, mountpoint=None, size=None, uuid=None):
        '''
        busaddress : str
        devicelinks : typing.Sequence<+T_co>[str]
        devicename : str
        filesystemtype : str
        hardwareid : str
        inuse : bool
        label : str
        mountpoint : str
        size : int
        uuid : str
        '''
        self.busaddress = busaddress
        self.devicelinks = devicelinks
        self.devicename = devicename
        self.filesystemtype = filesystemtype
        self.hardwareid = hardwareid
        self.inuse = inuse
        self.label = label
        self.mountpoint = mountpoint
        self.size = size
        self.uuid = uuid


class MachineBlockDevices(Type):
    _toSchema = {'machine': 'machine', 'block_devices': 'block-devices'}
    _toPy = {'machine': 'machine', 'block-devices': 'block_devices'}
    def __init__(self, block_devices=None, machine=None):
        '''
        block_devices : typing.Sequence<+T_co>[~BlockDevice]<~BlockDevice>
        machine : str
        '''
        self.block_devices = [BlockDevice.from_json(o) for o in block_devices or []]
        self.machine = machine


class SetMachineBlockDevices(Type):
    _toSchema = {'machine_block_devices': 'machine-block-devices'}
    _toPy = {'machine-block-devices': 'machine_block_devices'}
    def __init__(self, machine_block_devices=None):
        '''
        machine_block_devices : typing.Sequence<+T_co>[~MachineBlockDevices]<~MachineBlockDevices>
        '''
        self.machine_block_devices = [MachineBlockDevices.from_json(o) for o in machine_block_devices or []]


class EntitiesWatchResult(Type):
    _toSchema = {'changes': 'changes', 'watcher_id': 'watcher-id', 'error': 'error'}
    _toPy = {'changes': 'changes', 'error': 'error', 'watcher-id': 'watcher_id'}
    def __init__(self, changes=None, error=None, watcher_id=None):
        '''
        changes : typing.Sequence<+T_co>[str]
        error : Error
        watcher_id : str
        '''
        self.changes = changes
        self.error = Error.from_json(error) if error else None
        self.watcher_id = watcher_id


class MachineStorageId(Type):
    _toSchema = {'machine_tag': 'machine-tag', 'attachment_tag': 'attachment-tag'}
    _toPy = {'attachment-tag': 'attachment_tag', 'machine-tag': 'machine_tag'}
    def __init__(self, attachment_tag=None, machine_tag=None):
        '''
        attachment_tag : str
        machine_tag : str
        '''
        self.attachment_tag = attachment_tag
        self.machine_tag = machine_tag


class MachineStorageIdsWatchResult(Type):
    _toSchema = {'changes': 'changes', 'watcher_id': 'watcher-id', 'error': 'error'}
    _toPy = {'changes': 'changes', 'error': 'error', 'watcher-id': 'watcher_id'}
    def __init__(self, changes=None, error=None, watcher_id=None):
        '''
        changes : typing.Sequence<+T_co>[~MachineStorageId]<~MachineStorageId>
        error : Error
        watcher_id : str
        '''
        self.changes = [MachineStorageId.from_json(o) for o in changes or []]
        self.error = Error.from_json(error) if error else None
        self.watcher_id = watcher_id


class BoolResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : bool
        '''
        self.error = Error.from_json(error) if error else None
        self.result = result


class BoolResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~BoolResult]<~BoolResult>
        '''
        self.results = [BoolResult.from_json(o) for o in results or []]


class MachinePortRange(Type):
    _toSchema = {'port_range': 'port-range', 'unit_tag': 'unit-tag', 'relation_tag': 'relation-tag'}
    _toPy = {'relation-tag': 'relation_tag', 'unit-tag': 'unit_tag', 'port-range': 'port_range'}
    def __init__(self, port_range=None, relation_tag=None, unit_tag=None):
        '''
        port_range : PortRange
        relation_tag : str
        unit_tag : str
        '''
        self.port_range = PortRange.from_json(port_range) if port_range else None
        self.relation_tag = relation_tag
        self.unit_tag = unit_tag


class MachinePorts(Type):
    _toSchema = {'machine_tag': 'machine-tag', 'subnet_tag': 'subnet-tag'}
    _toPy = {'machine-tag': 'machine_tag', 'subnet-tag': 'subnet_tag'}
    def __init__(self, machine_tag=None, subnet_tag=None):
        '''
        machine_tag : str
        subnet_tag : str
        '''
        self.machine_tag = machine_tag
        self.subnet_tag = subnet_tag


class MachinePortsParams(Type):
    _toSchema = {'params': 'params'}
    _toPy = {'params': 'params'}
    def __init__(self, params=None):
        '''
        params : typing.Sequence<+T_co>[~MachinePorts]<~MachinePorts>
        '''
        self.params = [MachinePorts.from_json(o) for o in params or []]


class MachinePortsResult(Type):
    _toSchema = {'ports': 'ports', 'error': 'error'}
    _toPy = {'ports': 'ports', 'error': 'error'}
    def __init__(self, error=None, ports=None):
        '''
        error : Error
        ports : typing.Sequence<+T_co>[~MachinePortRange]<~MachinePortRange>
        '''
        self.error = Error.from_json(error) if error else None
        self.ports = [MachinePortRange.from_json(o) for o in ports or []]


class MachinePortsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~MachinePortsResult]<~MachinePortsResult>
        '''
        self.results = [MachinePortsResult.from_json(o) for o in results or []]


class NotifyWatchResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        self.results = [NotifyWatchResult.from_json(o) for o in results or []]


class PortRange(Type):
    _toSchema = {'from_port': 'from-port', 'protocol': 'protocol', 'to_port': 'to-port'}
    _toPy = {'from-port': 'from_port', 'protocol': 'protocol', 'to-port': 'to_port'}
    def __init__(self, from_port=None, protocol=None, to_port=None):
        '''
        from_port : int
        protocol : str
        to_port : int
        '''
        self.from_port = from_port
        self.protocol = protocol
        self.to_port = to_port


class StringResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~StringResult]<~StringResult>
        '''
        self.results = [StringResult.from_json(o) for o in results or []]


class ControllersChangeResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : ControllersChanges
        '''
        self.error = Error.from_json(error) if error else None
        self.result = ControllersChanges.from_json(result) if result else None


class ControllersChangeResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ControllersChangeResult]<~ControllersChangeResult>
        '''
        self.results = [ControllersChangeResult.from_json(o) for o in results or []]


class ControllersChanges(Type):
    _toSchema = {'removed': 'removed', 'added': 'added', 'converted': 'converted', 'demoted': 'demoted', 'maintained': 'maintained', 'promoted': 'promoted'}
    _toPy = {'removed': 'removed', 'added': 'added', 'converted': 'converted', 'demoted': 'demoted', 'maintained': 'maintained', 'promoted': 'promoted'}
    def __init__(self, added=None, converted=None, demoted=None, maintained=None, promoted=None, removed=None):
        '''
        added : typing.Sequence<+T_co>[str]
        converted : typing.Sequence<+T_co>[str]
        demoted : typing.Sequence<+T_co>[str]
        maintained : typing.Sequence<+T_co>[str]
        promoted : typing.Sequence<+T_co>[str]
        removed : typing.Sequence<+T_co>[str]
        '''
        self.added = added
        self.converted = converted
        self.demoted = demoted
        self.maintained = maintained
        self.promoted = promoted
        self.removed = removed


class ControllersSpec(Type):
    _toSchema = {'series': 'series', 'placement': 'placement', 'num_controllers': 'num-controllers', 'model_tag': 'model-tag', 'constraints': 'constraints'}
    _toPy = {'num-controllers': 'num_controllers', 'placement': 'placement', 'model-tag': 'model_tag', 'series': 'series', 'constraints': 'constraints'}
    def __init__(self, constraints=None, model_tag=None, num_controllers=None, placement=None, series=None):
        '''
        constraints : Value
        model_tag : str
        num_controllers : int
        placement : typing.Sequence<+T_co>[str]
        series : str
        '''
        self.constraints = Value.from_json(constraints) if constraints else None
        self.model_tag = model_tag
        self.num_controllers = num_controllers
        self.placement = placement
        self.series = series


class ControllersSpecs(Type):
    _toSchema = {'specs': 'specs'}
    _toPy = {'specs': 'specs'}
    def __init__(self, specs=None):
        '''
        specs : typing.Sequence<+T_co>[~ControllersSpec]<~ControllersSpec>
        '''
        self.specs = [ControllersSpec.from_json(o) for o in specs or []]


class HAMember(Type):
    _toSchema = {'series': 'series', 'tag': 'tag', 'public_address': 'public-address'}
    _toPy = {'public-address': 'public_address', 'tag': 'tag', 'series': 'series'}
    def __init__(self, public_address=None, series=None, tag=None):
        '''
        public_address : Address
        series : str
        tag : str
        '''
        self.public_address = Address.from_json(public_address) if public_address else None
        self.series = series
        self.tag = tag


class Member(Type):
    _toSchema = {'address': 'Address', 'tags': 'Tags', 'votes': 'Votes', 'buildindexes': 'BuildIndexes', 'arbiter': 'Arbiter', 'hidden': 'Hidden', 'slavedelay': 'SlaveDelay', 'id_': 'Id', 'priority': 'Priority'}
    _toPy = {'Id': 'id_', 'Votes': 'votes', 'Hidden': 'hidden', 'Priority': 'priority', 'Arbiter': 'arbiter', 'Tags': 'tags', 'Address': 'address', 'BuildIndexes': 'buildindexes', 'SlaveDelay': 'slavedelay'}
    def __init__(self, address=None, arbiter=None, buildindexes=None, hidden=None, id_=None, priority=None, slavedelay=None, tags=None, votes=None):
        '''
        address : str
        arbiter : bool
        buildindexes : bool
        hidden : bool
        id_ : int
        priority : float
        slavedelay : int
        tags : typing.Mapping<~KT, +VT_co>[str, str]
        votes : int
        '''
        self.address = address
        self.arbiter = arbiter
        self.buildindexes = buildindexes
        self.hidden = hidden
        self.id_ = id_
        self.priority = priority
        self.slavedelay = slavedelay
        self.tags = tags
        self.votes = votes


class MongoUpgradeResults(Type):
    _toSchema = {'ha_members': 'ha-members', 'master': 'master', 'rs_members': 'rs-members'}
    _toPy = {'ha-members': 'ha_members', 'master': 'master', 'rs-members': 'rs_members'}
    def __init__(self, ha_members=None, master=None, rs_members=None):
        '''
        ha_members : typing.Sequence<+T_co>[~HAMember]<~HAMember>
        master : HAMember
        rs_members : typing.Sequence<+T_co>[~Member]<~Member>
        '''
        self.ha_members = [HAMember.from_json(o) for o in ha_members or []]
        self.master = HAMember.from_json(master) if master else None
        self.rs_members = [Member.from_json(o) for o in rs_members or []]


class MongoVersion(Type):
    _toSchema = {'patch': 'patch', 'minor': 'minor', 'engine': 'engine', 'major': 'major'}
    _toPy = {'patch': 'patch', 'minor': 'minor', 'engine': 'engine', 'major': 'major'}
    def __init__(self, engine=None, major=None, minor=None, patch=None):
        '''
        engine : str
        major : int
        minor : int
        patch : str
        '''
        self.engine = engine
        self.major = major
        self.minor = minor
        self.patch = patch


class ResumeReplicationParams(Type):
    _toSchema = {'members': 'members'}
    _toPy = {'members': 'members'}
    def __init__(self, members=None):
        '''
        members : typing.Sequence<+T_co>[~Member]<~Member>
        '''
        self.members = [Member.from_json(o) for o in members or []]


class UpgradeMongoParams(Type):
    _toSchema = {'target': 'target'}
    _toPy = {'target': 'target'}
    def __init__(self, target=None):
        '''
        target : MongoVersion
        '''
        self.target = MongoVersion.from_json(target) if target else None


class SSHHostKeySet(Type):
    _toSchema = {'entity_keys': 'entity-keys'}
    _toPy = {'entity-keys': 'entity_keys'}
    def __init__(self, entity_keys=None):
        '''
        entity_keys : typing.Sequence<+T_co>[~SSHHostKeys]<~SSHHostKeys>
        '''
        self.entity_keys = [SSHHostKeys.from_json(o) for o in entity_keys or []]


class SSHHostKeys(Type):
    _toSchema = {'tag': 'tag', 'public_keys': 'public-keys'}
    _toPy = {'public-keys': 'public_keys', 'tag': 'tag'}
    def __init__(self, public_keys=None, tag=None):
        '''
        public_keys : typing.Sequence<+T_co>[str]
        tag : str
        '''
        self.public_keys = public_keys
        self.tag = tag


class ImageFilterParams(Type):
    _toSchema = {'images': 'images'}
    _toPy = {'images': 'images'}
    def __init__(self, images=None):
        '''
        images : typing.Sequence<+T_co>[~ImageSpec]<~ImageSpec>
        '''
        self.images = [ImageSpec.from_json(o) for o in images or []]


class ImageMetadata(Type):
    _toSchema = {'series': 'series', 'created': 'created', 'arch': 'arch', 'kind': 'kind', 'url': 'url'}
    _toPy = {'series': 'series', 'created': 'created', 'arch': 'arch', 'kind': 'kind', 'url': 'url'}
    def __init__(self, arch=None, created=None, kind=None, series=None, url=None):
        '''
        arch : str
        created : str
        kind : str
        series : str
        url : str
        '''
        self.arch = arch
        self.created = created
        self.kind = kind
        self.series = series
        self.url = url


class ImageSpec(Type):
    _toSchema = {'series': 'series', 'kind': 'kind', 'arch': 'arch'}
    _toPy = {'series': 'series', 'kind': 'kind', 'arch': 'arch'}
    def __init__(self, arch=None, kind=None, series=None):
        '''
        arch : str
        kind : str
        series : str
        '''
        self.arch = arch
        self.kind = kind
        self.series = series


class ListImageResult(Type):
    _toSchema = {'result': 'result'}
    _toPy = {'result': 'result'}
    def __init__(self, result=None):
        '''
        result : typing.Sequence<+T_co>[~ImageMetadata]<~ImageMetadata>
        '''
        self.result = [ImageMetadata.from_json(o) for o in result or []]


class CloudImageMetadata(Type):
    _toSchema = {'root_storage_size': 'root-storage-size', 'region': 'region', 'virt_type': 'virt-type', 'version': 'version', 'root_storage_type': 'root-storage-type', 'series': 'series', 'stream': 'stream', 'source': 'source', 'arch': 'arch', 'image_id': 'image-id', 'priority': 'priority'}
    _toPy = {'region': 'region', 'image-id': 'image_id', 'version': 'version', 'root-storage-size': 'root_storage_size', 'series': 'series', 'virt-type': 'virt_type', 'stream': 'stream', 'source': 'source', 'arch': 'arch', 'root-storage-type': 'root_storage_type', 'priority': 'priority'}
    def __init__(self, arch=None, image_id=None, priority=None, region=None, root_storage_size=None, root_storage_type=None, series=None, source=None, stream=None, version=None, virt_type=None):
        '''
        arch : str
        image_id : str
        priority : int
        region : str
        root_storage_size : int
        root_storage_type : str
        series : str
        source : str
        stream : str
        version : str
        virt_type : str
        '''
        self.arch = arch
        self.image_id = image_id
        self.priority = priority
        self.region = region
        self.root_storage_size = root_storage_size
        self.root_storage_type = root_storage_type
        self.series = series
        self.source = source
        self.stream = stream
        self.version = version
        self.virt_type = virt_type


class CloudImageMetadataList(Type):
    _toSchema = {'metadata': 'metadata'}
    _toPy = {'metadata': 'metadata'}
    def __init__(self, metadata=None):
        '''
        metadata : typing.Sequence<+T_co>[~CloudImageMetadata]<~CloudImageMetadata>
        '''
        self.metadata = [CloudImageMetadata.from_json(o) for o in metadata or []]


class ImageMetadataFilter(Type):
    _toSchema = {'region': 'region', 'arches': 'arches', 'root_storage_type': 'root-storage-type', 'series': 'series', 'stream': 'stream', 'virt_type': 'virt-type'}
    _toPy = {'region': 'region', 'root-storage-type': 'root_storage_type', 'arches': 'arches', 'series': 'series', 'virt-type': 'virt_type', 'stream': 'stream'}
    def __init__(self, arches=None, region=None, root_storage_type=None, series=None, stream=None, virt_type=None):
        '''
        arches : typing.Sequence<+T_co>[str]
        region : str
        root_storage_type : str
        series : typing.Sequence<+T_co>[str]
        stream : str
        virt_type : str
        '''
        self.arches = arches
        self.region = region
        self.root_storage_type = root_storage_type
        self.series = series
        self.stream = stream
        self.virt_type = virt_type


class ListCloudImageMetadataResult(Type):
    _toSchema = {'result': 'result'}
    _toPy = {'result': 'result'}
    def __init__(self, result=None):
        '''
        result : typing.Sequence<+T_co>[~CloudImageMetadata]<~CloudImageMetadata>
        '''
        self.result = [CloudImageMetadata.from_json(o) for o in result or []]


class MetadataImageIds(Type):
    _toSchema = {'image_ids': 'image-ids'}
    _toPy = {'image-ids': 'image_ids'}
    def __init__(self, image_ids=None):
        '''
        image_ids : typing.Sequence<+T_co>[str]
        '''
        self.image_ids = image_ids


class MetadataSaveParams(Type):
    _toSchema = {'metadata': 'metadata'}
    _toPy = {'metadata': 'metadata'}
    def __init__(self, metadata=None):
        '''
        metadata : typing.Sequence<+T_co>[~CloudImageMetadataList]<~CloudImageMetadataList>
        '''
        self.metadata = [CloudImageMetadataList.from_json(o) for o in metadata or []]


class EntityStatusArgs(Type):
    _toSchema = {'tag': 'tag', 'info': 'info', 'data': 'data', 'status': 'status'}
    _toPy = {'tag': 'tag', 'info': 'info', 'data': 'data', 'status': 'status'}
    def __init__(self, data=None, info=None, status=None, tag=None):
        '''
        data : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        info : str
        status : str
        tag : str
        '''
        self.data = data
        self.info = info
        self.status = status
        self.tag = tag


class MachineAddresses(Type):
    _toSchema = {'tag': 'tag', 'addresses': 'addresses'}
    _toPy = {'tag': 'tag', 'addresses': 'addresses'}
    def __init__(self, addresses=None, tag=None):
        '''
        addresses : typing.Sequence<+T_co>[~Address]<~Address>
        tag : str
        '''
        self.addresses = [Address.from_json(o) for o in addresses or []]
        self.tag = tag


class MachineAddressesResult(Type):
    _toSchema = {'error': 'error', 'addresses': 'addresses'}
    _toPy = {'error': 'error', 'addresses': 'addresses'}
    def __init__(self, addresses=None, error=None):
        '''
        addresses : typing.Sequence<+T_co>[~Address]<~Address>
        error : Error
        '''
        self.addresses = [Address.from_json(o) for o in addresses or []]
        self.error = Error.from_json(error) if error else None


class MachineAddressesResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~MachineAddressesResult]<~MachineAddressesResult>
        '''
        self.results = [MachineAddressesResult.from_json(o) for o in results or []]


class SetMachinesAddresses(Type):
    _toSchema = {'machine_addresses': 'machine-addresses'}
    _toPy = {'machine-addresses': 'machine_addresses'}
    def __init__(self, machine_addresses=None):
        '''
        machine_addresses : typing.Sequence<+T_co>[~MachineAddresses]<~MachineAddresses>
        '''
        self.machine_addresses = [MachineAddresses.from_json(o) for o in machine_addresses or []]


class SetStatus(Type):
    _toSchema = {'entities': 'entities'}
    _toPy = {'entities': 'entities'}
    def __init__(self, entities=None):
        '''
        entities : typing.Sequence<+T_co>[~EntityStatusArgs]<~EntityStatusArgs>
        '''
        self.entities = [EntityStatusArgs.from_json(o) for o in entities or []]


class StatusResult(Type):
    _toSchema = {'info': 'info', 'status': 'status', 'data': 'data', 'since': 'since', 'error': 'error', 'id_': 'id', 'life': 'life'}
    _toPy = {'since': 'since', 'status': 'status', 'data': 'data', 'id': 'id_', 'error': 'error', 'info': 'info', 'life': 'life'}
    def __init__(self, data=None, error=None, id_=None, info=None, life=None, since=None, status=None):
        '''
        data : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        error : Error
        id_ : str
        info : str
        life : str
        since : str
        status : str
        '''
        self.data = data
        self.error = Error.from_json(error) if error else None
        self.id_ = id_
        self.info = info
        self.life = life
        self.since = since
        self.status = status


class StatusResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~StatusResult]<~StatusResult>
        '''
        self.results = [StatusResult.from_json(o) for o in results or []]


class ListSSHKeys(Type):
    _toSchema = {'mode': 'mode', 'entities': 'entities'}
    _toPy = {'mode': 'mode', 'entities': 'entities'}
    def __init__(self, entities=None, mode=None):
        '''
        entities : Entities
        mode : bool
        '''
        self.entities = Entities.from_json(entities) if entities else None
        self.mode = mode


class ModifyUserSSHKeys(Type):
    _toSchema = {'ssh_keys': 'ssh-keys', 'user': 'user'}
    _toPy = {'ssh-keys': 'ssh_keys', 'user': 'user'}
    def __init__(self, ssh_keys=None, user=None):
        '''
        ssh_keys : typing.Sequence<+T_co>[str]
        user : str
        '''
        self.ssh_keys = ssh_keys
        self.user = user


class ApplicationTag(Type):
    _toSchema = {'name': 'Name'}
    _toPy = {'Name': 'name'}
    def __init__(self, name=None):
        '''
        name : str
        '''
        self.name = name


class ClaimLeadershipBulkParams(Type):
    _toSchema = {'params': 'params'}
    _toPy = {'params': 'params'}
    def __init__(self, params=None):
        '''
        params : typing.Sequence<+T_co>[~ClaimLeadershipParams]<~ClaimLeadershipParams>
        '''
        self.params = [ClaimLeadershipParams.from_json(o) for o in params or []]


class ClaimLeadershipBulkResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        self.results = [ErrorResult.from_json(o) for o in results or []]


class ClaimLeadershipParams(Type):
    _toSchema = {'duration': 'duration', 'application_tag': 'application-tag', 'unit_tag': 'unit-tag'}
    _toPy = {'duration': 'duration', 'unit-tag': 'unit_tag', 'application-tag': 'application_tag'}
    def __init__(self, application_tag=None, duration=None, unit_tag=None):
        '''
        application_tag : str
        duration : float
        unit_tag : str
        '''
        self.application_tag = application_tag
        self.duration = duration
        self.unit_tag = unit_tag


class LogForwardingGetLastSentParams(Type):
    _toSchema = {'ids': 'ids'}
    _toPy = {'ids': 'ids'}
    def __init__(self, ids=None):
        '''
        ids : typing.Sequence<+T_co>[~LogForwardingID]<~LogForwardingID>
        '''
        self.ids = [LogForwardingID.from_json(o) for o in ids or []]


class LogForwardingGetLastSentResult(Type):
    _toSchema = {'record_id': 'record-id', 'record_timestamp': 'record-timestamp', 'err': 'err'}
    _toPy = {'record-timestamp': 'record_timestamp', 'record-id': 'record_id', 'err': 'err'}
    def __init__(self, err=None, record_id=None, record_timestamp=None):
        '''
        err : Error
        record_id : int
        record_timestamp : int
        '''
        self.err = Error.from_json(err) if err else None
        self.record_id = record_id
        self.record_timestamp = record_timestamp


class LogForwardingGetLastSentResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~LogForwardingGetLastSentResult]<~LogForwardingGetLastSentResult>
        '''
        self.results = [LogForwardingGetLastSentResult.from_json(o) for o in results or []]


class LogForwardingID(Type):
    _toSchema = {'model': 'model', 'sink': 'sink'}
    _toPy = {'model': 'model', 'sink': 'sink'}
    def __init__(self, model=None, sink=None):
        '''
        model : str
        sink : str
        '''
        self.model = model
        self.sink = sink


class LogForwardingSetLastSentParam(Type):
    _toSchema = {'logforwardingid': 'LogForwardingID', 'record_id': 'record-id', 'record_timestamp': 'record-timestamp'}
    _toPy = {'record-timestamp': 'record_timestamp', 'record-id': 'record_id', 'LogForwardingID': 'logforwardingid'}
    def __init__(self, logforwardingid=None, record_id=None, record_timestamp=None):
        '''
        logforwardingid : LogForwardingID
        record_id : int
        record_timestamp : int
        '''
        self.logforwardingid = LogForwardingID.from_json(logforwardingid) if logforwardingid else None
        self.record_id = record_id
        self.record_timestamp = record_timestamp


class LogForwardingSetLastSentParams(Type):
    _toSchema = {'params': 'params'}
    _toPy = {'params': 'params'}
    def __init__(self, params=None):
        '''
        params : typing.Sequence<+T_co>[~LogForwardingSetLastSentParam]<~LogForwardingSetLastSentParam>
        '''
        self.params = [LogForwardingSetLastSentParam.from_json(o) for o in params or []]


class ActionExecutionResult(Type):
    _toSchema = {'results': 'results', 'action_tag': 'action-tag', 'status': 'status', 'message': 'message'}
    _toPy = {'action-tag': 'action_tag', 'status': 'status', 'results': 'results', 'message': 'message'}
    def __init__(self, action_tag=None, message=None, results=None, status=None):
        '''
        action_tag : str
        message : str
        results : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        status : str
        '''
        self.action_tag = action_tag
        self.message = message
        self.results = results
        self.status = status


class ActionExecutionResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ActionExecutionResult]<~ActionExecutionResult>
        '''
        self.results = [ActionExecutionResult.from_json(o) for o in results or []]


class EntitiesResult(Type):
    _toSchema = {'error': 'error', 'entities': 'entities'}
    _toPy = {'error': 'error', 'entities': 'entities'}
    def __init__(self, entities=None, error=None):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        error : Error
        '''
        self.entities = [Entity.from_json(o) for o in entities or []]
        self.error = Error.from_json(error) if error else None


class EntitiesResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~EntitiesResult]<~EntitiesResult>
        '''
        self.results = [EntitiesResult.from_json(o) for o in results or []]


class ProviderInterfaceInfo(Type):
    _toSchema = {'interface_name': 'interface-name', 'provider_id': 'provider-id', 'mac_address': 'mac-address'}
    _toPy = {'mac-address': 'mac_address', 'provider-id': 'provider_id', 'interface-name': 'interface_name'}
    def __init__(self, interface_name=None, mac_address=None, provider_id=None):
        '''
        interface_name : str
        mac_address : str
        provider_id : str
        '''
        self.interface_name = interface_name
        self.mac_address = mac_address
        self.provider_id = provider_id


class ProviderInterfaceInfoResult(Type):
    _toSchema = {'interfaces': 'interfaces', 'machine_tag': 'machine-tag', 'error': 'error'}
    _toPy = {'interfaces': 'interfaces', 'machine-tag': 'machine_tag', 'error': 'error'}
    def __init__(self, error=None, interfaces=None, machine_tag=None):
        '''
        error : Error
        interfaces : typing.Sequence<+T_co>[~ProviderInterfaceInfo]<~ProviderInterfaceInfo>
        machine_tag : str
        '''
        self.error = Error.from_json(error) if error else None
        self.interfaces = [ProviderInterfaceInfo.from_json(o) for o in interfaces or []]
        self.machine_tag = machine_tag


class ProviderInterfaceInfoResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ProviderInterfaceInfoResult]<~ProviderInterfaceInfoResult>
        '''
        self.results = [ProviderInterfaceInfoResult.from_json(o) for o in results or []]


class JobsResult(Type):
    _toSchema = {'jobs': 'jobs', 'error': 'error'}
    _toPy = {'jobs': 'jobs', 'error': 'error'}
    def __init__(self, error=None, jobs=None):
        '''
        error : Error
        jobs : typing.Sequence<+T_co>[str]
        '''
        self.error = Error.from_json(error) if error else None
        self.jobs = jobs


class JobsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~JobsResult]<~JobsResult>
        '''
        self.results = [JobsResult.from_json(o) for o in results or []]


class NetworkConfig(Type):
    _toSchema = {'interface_name': 'interface-name', 'cidr': 'cidr', 'mac_address': 'mac-address', 'dns_servers': 'dns-servers', 'provider_vlan_id': 'provider-vlan-id', 'provider_address_id': 'provider-address-id', 'no_auto_start': 'no-auto-start', 'interface_type': 'interface-type', 'provider_space_id': 'provider-space-id', 'address': 'address', 'dns_search_domains': 'dns-search-domains', 'mtu': 'mtu', 'disabled': 'disabled', 'provider_subnet_id': 'provider-subnet-id', 'config_type': 'config-type', 'parent_interface_name': 'parent-interface-name', 'gateway_address': 'gateway-address', 'vlan_tag': 'vlan-tag', 'device_index': 'device-index', 'provider_id': 'provider-id'}
    _toPy = {'provider-address-id': 'provider_address_id', 'mac-address': 'mac_address', 'cidr': 'cidr', 'device-index': 'device_index', 'dns-search-domains': 'dns_search_domains', 'provider-space-id': 'provider_space_id', 'parent-interface-name': 'parent_interface_name', 'vlan-tag': 'vlan_tag', 'address': 'address', 'provider-vlan-id': 'provider_vlan_id', 'mtu': 'mtu', 'dns-servers': 'dns_servers', 'disabled': 'disabled', 'interface-name': 'interface_name', 'provider-subnet-id': 'provider_subnet_id', 'no-auto-start': 'no_auto_start', 'provider-id': 'provider_id', 'config-type': 'config_type', 'interface-type': 'interface_type', 'gateway-address': 'gateway_address'}
    def __init__(self, address=None, cidr=None, config_type=None, device_index=None, disabled=None, dns_search_domains=None, dns_servers=None, gateway_address=None, interface_name=None, interface_type=None, mac_address=None, mtu=None, no_auto_start=None, parent_interface_name=None, provider_address_id=None, provider_id=None, provider_space_id=None, provider_subnet_id=None, provider_vlan_id=None, vlan_tag=None):
        '''
        address : str
        cidr : str
        config_type : str
        device_index : int
        disabled : bool
        dns_search_domains : typing.Sequence<+T_co>[str]
        dns_servers : typing.Sequence<+T_co>[str]
        gateway_address : str
        interface_name : str
        interface_type : str
        mac_address : str
        mtu : int
        no_auto_start : bool
        parent_interface_name : str
        provider_address_id : str
        provider_id : str
        provider_space_id : str
        provider_subnet_id : str
        provider_vlan_id : str
        vlan_tag : int
        '''
        self.address = address
        self.cidr = cidr
        self.config_type = config_type
        self.device_index = device_index
        self.disabled = disabled
        self.dns_search_domains = dns_search_domains
        self.dns_servers = dns_servers
        self.gateway_address = gateway_address
        self.interface_name = interface_name
        self.interface_type = interface_type
        self.mac_address = mac_address
        self.mtu = mtu
        self.no_auto_start = no_auto_start
        self.parent_interface_name = parent_interface_name
        self.provider_address_id = provider_address_id
        self.provider_id = provider_id
        self.provider_space_id = provider_space_id
        self.provider_subnet_id = provider_subnet_id
        self.provider_vlan_id = provider_vlan_id
        self.vlan_tag = vlan_tag


class SetMachineNetworkConfig(Type):
    _toSchema = {'tag': 'tag', 'config': 'config'}
    _toPy = {'tag': 'tag', 'config': 'config'}
    def __init__(self, config=None, tag=None):
        '''
        config : typing.Sequence<+T_co>[~NetworkConfig]<~NetworkConfig>
        tag : str
        '''
        self.config = [NetworkConfig.from_json(o) for o in config or []]
        self.tag = tag


class MeterStatusResult(Type):
    _toSchema = {'code': 'code', 'error': 'error', 'info': 'info'}
    _toPy = {'code': 'code', 'error': 'error', 'info': 'info'}
    def __init__(self, code=None, error=None, info=None):
        '''
        code : str
        error : Error
        info : str
        '''
        self.code = code
        self.error = Error.from_json(error) if error else None
        self.info = info


class MeterStatusResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~MeterStatusResult]<~MeterStatusResult>
        '''
        self.results = [MeterStatusResult.from_json(o) for o in results or []]


class Metric(Type):
    _toSchema = {'key': 'key', 'value': 'value', 'time': 'time'}
    _toPy = {'key': 'key', 'value': 'value', 'time': 'time'}
    def __init__(self, key=None, time=None, value=None):
        '''
        key : str
        time : str
        value : str
        '''
        self.key = key
        self.time = time
        self.value = value


class MetricBatch(Type):
    _toSchema = {'charm_url': 'charm-url', 'metrics': 'metrics', 'created': 'created', 'uuid': 'uuid'}
    _toPy = {'charm-url': 'charm_url', 'created': 'created', 'metrics': 'metrics', 'uuid': 'uuid'}
    def __init__(self, charm_url=None, created=None, metrics=None, uuid=None):
        '''
        charm_url : str
        created : str
        metrics : typing.Sequence<+T_co>[~Metric]<~Metric>
        uuid : str
        '''
        self.charm_url = charm_url
        self.created = created
        self.metrics = [Metric.from_json(o) for o in metrics or []]
        self.uuid = uuid


class MetricBatchParam(Type):
    _toSchema = {'batch': 'batch', 'tag': 'tag'}
    _toPy = {'batch': 'batch', 'tag': 'tag'}
    def __init__(self, batch=None, tag=None):
        '''
        batch : MetricBatch
        tag : str
        '''
        self.batch = MetricBatch.from_json(batch) if batch else None
        self.tag = tag


class MetricBatchParams(Type):
    _toSchema = {'batches': 'batches'}
    _toPy = {'batches': 'batches'}
    def __init__(self, batches=None):
        '''
        batches : typing.Sequence<+T_co>[~MetricBatchParam]<~MetricBatchParam>
        '''
        self.batches = [MetricBatchParam.from_json(o) for o in batches or []]


class EntityMetrics(Type):
    _toSchema = {'metrics': 'metrics', 'error': 'error'}
    _toPy = {'metrics': 'metrics', 'error': 'error'}
    def __init__(self, error=None, metrics=None):
        '''
        error : Error
        metrics : typing.Sequence<+T_co>[~MetricResult]<~MetricResult>
        '''
        self.error = Error.from_json(error) if error else None
        self.metrics = [MetricResult.from_json(o) for o in metrics or []]


class MeterStatusParam(Type):
    _toSchema = {'code': 'code', 'tag': 'tag', 'info': 'info'}
    _toPy = {'code': 'code', 'tag': 'tag', 'info': 'info'}
    def __init__(self, code=None, info=None, tag=None):
        '''
        code : str
        info : str
        tag : str
        '''
        self.code = code
        self.info = info
        self.tag = tag


class MeterStatusParams(Type):
    _toSchema = {'statues': 'statues'}
    _toPy = {'statues': 'statues'}
    def __init__(self, statues=None):
        '''
        statues : typing.Sequence<+T_co>[~MeterStatusParam]<~MeterStatusParam>
        '''
        self.statues = [MeterStatusParam.from_json(o) for o in statues or []]


class MetricResult(Type):
    _toSchema = {'key': 'key', 'value': 'value', 'time': 'time', 'unit': 'unit'}
    _toPy = {'key': 'key', 'value': 'value', 'time': 'time', 'unit': 'unit'}
    def __init__(self, key=None, time=None, unit=None, value=None):
        '''
        key : str
        time : str
        unit : str
        value : str
        '''
        self.key = key
        self.time = time
        self.unit = unit
        self.value = value


class MetricResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~EntityMetrics]<~EntityMetrics>
        '''
        self.results = [EntityMetrics.from_json(o) for o in results or []]


class PhaseResult(Type):
    _toSchema = {'error': 'error', 'phase': 'phase'}
    _toPy = {'error': 'error', 'phase': 'phase'}
    def __init__(self, error=None, phase=None):
        '''
        error : Error
        phase : str
        '''
        self.error = Error.from_json(error) if error else None
        self.phase = phase


class PhaseResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~PhaseResult]<~PhaseResult>
        '''
        self.results = [PhaseResult.from_json(o) for o in results or []]


class MasterMigrationStatus(Type):
    _toSchema = {'spec': 'spec', 'migration_id': 'migration-id', 'phase_changed_time': 'phase-changed-time', 'phase': 'phase'}
    _toPy = {'spec': 'spec', 'phase-changed-time': 'phase_changed_time', 'migration-id': 'migration_id', 'phase': 'phase'}
    def __init__(self, migration_id=None, phase=None, phase_changed_time=None, spec=None):
        '''
        migration_id : str
        phase : str
        phase_changed_time : str
        spec : MigrationSpec
        '''
        self.migration_id = migration_id
        self.phase = phase
        self.phase_changed_time = phase_changed_time
        self.spec = MigrationSpec.from_json(spec) if spec else None


class MigrationModelInfo(Type):
    _toSchema = {'owner_tag': 'owner-tag', 'name': 'name', 'uuid': 'uuid', 'agent_version': 'agent-version'}
    _toPy = {'owner-tag': 'owner_tag', 'agent-version': 'agent_version', 'name': 'name', 'uuid': 'uuid'}
    def __init__(self, agent_version=None, name=None, owner_tag=None, uuid=None):
        '''
        agent_version : Number
        name : str
        owner_tag : str
        uuid : str
        '''
        self.agent_version = Number.from_json(agent_version) if agent_version else None
        self.name = name
        self.owner_tag = owner_tag
        self.uuid = uuid


class MinionReports(Type):
    _toSchema = {'migration_id': 'migration-id', 'unknown_sample': 'unknown-sample', 'failed': 'failed', 'success_count': 'success-count', 'unknown_count': 'unknown-count', 'phase': 'phase'}
    _toPy = {'success-count': 'success_count', 'unknown-sample': 'unknown_sample', 'migration-id': 'migration_id', 'failed': 'failed', 'unknown-count': 'unknown_count', 'phase': 'phase'}
    def __init__(self, failed=None, migration_id=None, phase=None, success_count=None, unknown_count=None, unknown_sample=None):
        '''
        failed : typing.Sequence<+T_co>[str]
        migration_id : str
        phase : str
        success_count : int
        unknown_count : int
        unknown_sample : typing.Sequence<+T_co>[str]
        '''
        self.failed = failed
        self.migration_id = migration_id
        self.phase = phase
        self.success_count = success_count
        self.unknown_count = unknown_count
        self.unknown_sample = unknown_sample


class SerializedModel(Type):
    _toSchema = {'charms': 'charms', 'bytes_': 'bytes', 'tools': 'tools'}
    _toPy = {'charms': 'charms', 'bytes': 'bytes_', 'tools': 'tools'}
    def __init__(self, bytes_=None, charms=None, tools=None):
        '''
        bytes_ : typing.Sequence<+T_co>[int]
        charms : typing.Sequence<+T_co>[str]
        tools : typing.Sequence<+T_co>[~SerializedModelTools]<~SerializedModelTools>
        '''
        self.bytes_ = bytes_
        self.charms = charms
        self.tools = [SerializedModelTools.from_json(o) for o in tools or []]


class SerializedModelTools(Type):
    _toSchema = {'uri': 'uri', 'version': 'version'}
    _toPy = {'uri': 'uri', 'version': 'version'}
    def __init__(self, uri=None, version=None):
        '''
        uri : str
        version : str
        '''
        self.uri = uri
        self.version = version


class SetMigrationPhaseArgs(Type):
    _toSchema = {'phase': 'phase'}
    _toPy = {'phase': 'phase'}
    def __init__(self, phase=None):
        '''
        phase : str
        '''
        self.phase = phase


class SetMigrationStatusMessageArgs(Type):
    _toSchema = {'message': 'message'}
    _toPy = {'message': 'message'}
    def __init__(self, message=None):
        '''
        message : str
        '''
        self.message = message


class MinionReport(Type):
    _toSchema = {'migration_id': 'migration-id', 'success': 'success', 'phase': 'phase'}
    _toPy = {'success': 'success', 'migration-id': 'migration_id', 'phase': 'phase'}
    def __init__(self, migration_id=None, phase=None, success=None):
        '''
        migration_id : str
        phase : str
        success : bool
        '''
        self.migration_id = migration_id
        self.phase = phase
        self.success = success


class MigrationStatus(Type):
    _toSchema = {'migration_id': 'migration-id', 'target_ca_cert': 'target-ca-cert', 'source_api_addrs': 'source-api-addrs', 'attempt': 'attempt', 'source_ca_cert': 'source-ca-cert', 'target_api_addrs': 'target-api-addrs', 'phase': 'phase'}
    _toPy = {'source-ca-cert': 'source_ca_cert', 'target-ca-cert': 'target_ca_cert', 'migration-id': 'migration_id', 'attempt': 'attempt', 'target-api-addrs': 'target_api_addrs', 'source-api-addrs': 'source_api_addrs', 'phase': 'phase'}
    def __init__(self, attempt=None, migration_id=None, phase=None, source_api_addrs=None, source_ca_cert=None, target_api_addrs=None, target_ca_cert=None):
        '''
        attempt : int
        migration_id : str
        phase : str
        source_api_addrs : typing.Sequence<+T_co>[str]
        source_ca_cert : str
        target_api_addrs : typing.Sequence<+T_co>[str]
        target_ca_cert : str
        '''
        self.attempt = attempt
        self.migration_id = migration_id
        self.phase = phase
        self.source_api_addrs = source_api_addrs
        self.source_ca_cert = source_ca_cert
        self.target_api_addrs = target_api_addrs
        self.target_ca_cert = target_ca_cert


class ModelArgs(Type):
    _toSchema = {'model_tag': 'model-tag'}
    _toPy = {'model-tag': 'model_tag'}
    def __init__(self, model_tag=None):
        '''
        model_tag : str
        '''
        self.model_tag = model_tag


class MapResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.error = Error.from_json(error) if error else None
        self.result = result


class MapResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~MapResult]<~MapResult>
        '''
        self.results = [MapResult.from_json(o) for o in results or []]


class ModelCreateArgs(Type):
    _toSchema = {'cloud_tag': 'cloud-tag', 'owner_tag': 'owner-tag', 'config': 'config', 'region': 'region', 'name': 'name', 'credential': 'credential'}
    _toPy = {'region': 'region', 'cloud-tag': 'cloud_tag', 'config': 'config', 'owner-tag': 'owner_tag', 'name': 'name', 'credential': 'credential'}
    def __init__(self, cloud_tag=None, config=None, credential=None, name=None, owner_tag=None, region=None):
        '''
        cloud_tag : str
        config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        credential : str
        name : str
        owner_tag : str
        region : str
        '''
        self.cloud_tag = cloud_tag
        self.config = config
        self.credential = credential
        self.name = name
        self.owner_tag = owner_tag
        self.region = region


class ModelInfoResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : ModelInfo
        '''
        self.error = Error.from_json(error) if error else None
        self.result = ModelInfo.from_json(result) if result else None


class ModelInfoResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ModelInfoResult]<~ModelInfoResult>
        '''
        self.results = [ModelInfoResult.from_json(o) for o in results or []]


class ModifyModelAccess(Type):
    _toSchema = {'user_tag': 'user-tag', 'action': 'action', 'access': 'access', 'model_tag': 'model-tag'}
    _toPy = {'user-tag': 'user_tag', 'action': 'action', 'access': 'access', 'model-tag': 'model_tag'}
    def __init__(self, access=None, action=None, model_tag=None, user_tag=None):
        '''
        access : str
        action : str
        model_tag : str
        user_tag : str
        '''
        self.access = access
        self.action = action
        self.model_tag = model_tag
        self.user_tag = user_tag


class ModifyModelAccessRequest(Type):
    _toSchema = {'changes': 'changes'}
    _toPy = {'changes': 'changes'}
    def __init__(self, changes=None):
        '''
        changes : typing.Sequence<+T_co>[~ModifyModelAccess]<~ModifyModelAccess>
        '''
        self.changes = [ModifyModelAccess.from_json(o) for o in changes or []]


class ConstraintsResult(Type):
    _toSchema = {'error': 'error', 'constraints': 'constraints'}
    _toPy = {'error': 'error', 'constraints': 'constraints'}
    def __init__(self, constraints=None, error=None):
        '''
        constraints : Value
        error : Error
        '''
        self.constraints = Value.from_json(constraints) if constraints else None
        self.error = Error.from_json(error) if error else None


class ConstraintsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ConstraintsResult]<~ConstraintsResult>
        '''
        self.results = [ConstraintsResult.from_json(o) for o in results or []]


class ContainerConfig(Type):
    _toSchema = {'updatebehavior': 'UpdateBehavior', 'authorized_keys': 'authorized-keys', 'apt_mirror': 'apt-mirror', 'provider_type': 'provider-type', 'apt_proxy': 'apt-proxy', 'proxy': 'proxy', 'ssl_hostname_verification': 'ssl-hostname-verification'}
    _toPy = {'ssl-hostname-verification': 'ssl_hostname_verification', 'authorized-keys': 'authorized_keys', 'UpdateBehavior': 'updatebehavior', 'proxy': 'proxy', 'apt-mirror': 'apt_mirror', 'apt-proxy': 'apt_proxy', 'provider-type': 'provider_type'}
    def __init__(self, updatebehavior=None, apt_mirror=None, apt_proxy=None, authorized_keys=None, provider_type=None, proxy=None, ssl_hostname_verification=None):
        '''
        updatebehavior : UpdateBehavior
        apt_mirror : str
        apt_proxy : Settings
        authorized_keys : str
        provider_type : str
        proxy : Settings
        ssl_hostname_verification : bool
        '''
        self.updatebehavior = UpdateBehavior.from_json(updatebehavior) if updatebehavior else None
        self.apt_mirror = apt_mirror
        self.apt_proxy = Settings.from_json(apt_proxy) if apt_proxy else None
        self.authorized_keys = authorized_keys
        self.provider_type = provider_type
        self.proxy = Settings.from_json(proxy) if proxy else None
        self.ssl_hostname_verification = ssl_hostname_verification


class ContainerManagerConfig(Type):
    _toSchema = {'config': 'config'}
    _toPy = {'config': 'config'}
    def __init__(self, config=None):
        '''
        config : typing.Mapping<~KT, +VT_co>[str, str]
        '''
        self.config = config


class ContainerManagerConfigParams(Type):
    _toSchema = {'type_': 'type'}
    _toPy = {'type': 'type_'}
    def __init__(self, type_=None):
        '''
        type_ : str
        '''
        self.type_ = type_


class DistributionGroupResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : typing.Sequence<+T_co>[str]
        '''
        self.error = Error.from_json(error) if error else None
        self.result = result


class DistributionGroupResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~DistributionGroupResult]<~DistributionGroupResult>
        '''
        self.results = [DistributionGroupResult.from_json(o) for o in results or []]


class InstanceInfo(Type):
    _toSchema = {'network_config': 'network-config', 'tag': 'tag', 'volumes': 'volumes', 'instance_id': 'instance-id', 'volume_attachments': 'volume-attachments', 'nonce': 'nonce', 'characteristics': 'characteristics'}
    _toPy = {'tag': 'tag', 'network-config': 'network_config', 'volumes': 'volumes', 'instance-id': 'instance_id', 'nonce': 'nonce', 'volume-attachments': 'volume_attachments', 'characteristics': 'characteristics'}
    def __init__(self, characteristics=None, instance_id=None, network_config=None, nonce=None, tag=None, volume_attachments=None, volumes=None):
        '''
        characteristics : HardwareCharacteristics
        instance_id : str
        network_config : typing.Sequence<+T_co>[~NetworkConfig]<~NetworkConfig>
        nonce : str
        tag : str
        volume_attachments : typing.Mapping<~KT, +VT_co>[str, ~VolumeAttachmentInfo]<~VolumeAttachmentInfo>
        volumes : typing.Sequence<+T_co>[~Volume]<~Volume>
        '''
        self.characteristics = HardwareCharacteristics.from_json(characteristics) if characteristics else None
        self.instance_id = instance_id
        self.network_config = [NetworkConfig.from_json(o) for o in network_config or []]
        self.nonce = nonce
        self.tag = tag
        self.volume_attachments = volume_attachments
        self.volumes = [Volume.from_json(o) for o in volumes or []]


class InstancesInfo(Type):
    _toSchema = {'machines': 'machines'}
    _toPy = {'machines': 'machines'}
    def __init__(self, machines=None):
        '''
        machines : typing.Sequence<+T_co>[~InstanceInfo]<~InstanceInfo>
        '''
        self.machines = [InstanceInfo.from_json(o) for o in machines or []]


class MachineContainers(Type):
    _toSchema = {'container_types': 'container-types', 'machine_tag': 'machine-tag'}
    _toPy = {'container-types': 'container_types', 'machine-tag': 'machine_tag'}
    def __init__(self, container_types=None, machine_tag=None):
        '''
        container_types : typing.Sequence<+T_co>[str]
        machine_tag : str
        '''
        self.container_types = container_types
        self.machine_tag = machine_tag


class MachineContainersParams(Type):
    _toSchema = {'params': 'params'}
    _toPy = {'params': 'params'}
    def __init__(self, params=None):
        '''
        params : typing.Sequence<+T_co>[~MachineContainers]<~MachineContainers>
        '''
        self.params = [MachineContainers.from_json(o) for o in params or []]


class MachineNetworkConfigResult(Type):
    _toSchema = {'error': 'error', 'info': 'info'}
    _toPy = {'error': 'error', 'info': 'info'}
    def __init__(self, error=None, info=None):
        '''
        error : Error
        info : typing.Sequence<+T_co>[~NetworkConfig]<~NetworkConfig>
        '''
        self.error = Error.from_json(error) if error else None
        self.info = [NetworkConfig.from_json(o) for o in info or []]


class MachineNetworkConfigResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~MachineNetworkConfigResult]<~MachineNetworkConfigResult>
        '''
        self.results = [MachineNetworkConfigResult.from_json(o) for o in results or []]


class ProvisioningInfo(Type):
    _toSchema = {'series': 'series', 'controller_config': 'controller-config', 'subnets_to_zones': 'subnets-to-zones', 'image_metadata': 'image-metadata', 'tags': 'tags', 'endpoint_bindings': 'endpoint-bindings', 'volumes': 'volumes', 'constraints': 'constraints', 'jobs': 'jobs', 'placement': 'placement'}
    _toPy = {'series': 'series', 'placement': 'placement', 'jobs': 'jobs', 'tags': 'tags', 'constraints': 'constraints', 'subnets-to-zones': 'subnets_to_zones', 'endpoint-bindings': 'endpoint_bindings', 'image-metadata': 'image_metadata', 'volumes': 'volumes', 'controller-config': 'controller_config'}
    def __init__(self, constraints=None, controller_config=None, endpoint_bindings=None, image_metadata=None, jobs=None, placement=None, series=None, subnets_to_zones=None, tags=None, volumes=None):
        '''
        constraints : Value
        controller_config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        endpoint_bindings : typing.Mapping<~KT, +VT_co>[str, str]
        image_metadata : typing.Sequence<+T_co>[~CloudImageMetadata]<~CloudImageMetadata>
        jobs : typing.Sequence<+T_co>[str]
        placement : str
        series : str
        subnets_to_zones : typing.Sequence<+T_co>[str]
        tags : typing.Mapping<~KT, +VT_co>[str, str]
        volumes : typing.Sequence<+T_co>[~VolumeParams]<~VolumeParams>
        '''
        self.constraints = Value.from_json(constraints) if constraints else None
        self.controller_config = controller_config
        self.endpoint_bindings = endpoint_bindings
        self.image_metadata = [CloudImageMetadata.from_json(o) for o in image_metadata or []]
        self.jobs = jobs
        self.placement = placement
        self.series = series
        self.subnets_to_zones = subnets_to_zones
        self.tags = tags
        self.volumes = [VolumeParams.from_json(o) for o in volumes or []]


class ProvisioningInfoResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : ProvisioningInfo
        '''
        self.error = Error.from_json(error) if error else None
        self.result = ProvisioningInfo.from_json(result) if result else None


class ProvisioningInfoResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ProvisioningInfoResult]<~ProvisioningInfoResult>
        '''
        self.results = [ProvisioningInfoResult.from_json(o) for o in results or []]


class Settings(Type):
    _toSchema = {'noproxy': 'NoProxy', 'https': 'Https', 'http': 'Http', 'ftp': 'Ftp'}
    _toPy = {'NoProxy': 'noproxy', 'Http': 'http', 'Ftp': 'ftp', 'Https': 'https'}
    def __init__(self, ftp=None, http=None, https=None, noproxy=None):
        '''
        ftp : str
        http : str
        https : str
        noproxy : str
        '''
        self.ftp = ftp
        self.http = http
        self.https = https
        self.noproxy = noproxy


class ToolsResult(Type):
    _toSchema = {'tools': 'tools', 'disable_ssl_hostname_verification': 'disable-ssl-hostname-verification', 'error': 'error'}
    _toPy = {'disable-ssl-hostname-verification': 'disable_ssl_hostname_verification', 'tools': 'tools', 'error': 'error'}
    def __init__(self, disable_ssl_hostname_verification=None, error=None, tools=None):
        '''
        disable_ssl_hostname_verification : bool
        error : Error
        tools : typing.Sequence<+T_co>[~Tools]<~Tools>
        '''
        self.disable_ssl_hostname_verification = disable_ssl_hostname_verification
        self.error = Error.from_json(error) if error else None
        self.tools = [Tools.from_json(o) for o in tools or []]


class ToolsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ToolsResult]<~ToolsResult>
        '''
        self.results = [ToolsResult.from_json(o) for o in results or []]


class UpdateBehavior(Type):
    _toSchema = {'enable_os_refresh_update': 'enable-os-refresh-update', 'enable_os_upgrade': 'enable-os-upgrade'}
    _toPy = {'enable-os-upgrade': 'enable_os_upgrade', 'enable-os-refresh-update': 'enable_os_refresh_update'}
    def __init__(self, enable_os_refresh_update=None, enable_os_upgrade=None):
        '''
        enable_os_refresh_update : bool
        enable_os_upgrade : bool
        '''
        self.enable_os_refresh_update = enable_os_refresh_update
        self.enable_os_upgrade = enable_os_upgrade


class Volume(Type):
    _toSchema = {'volume_tag': 'volume-tag', 'info': 'info'}
    _toPy = {'volume-tag': 'volume_tag', 'info': 'info'}
    def __init__(self, info=None, volume_tag=None):
        '''
        info : VolumeInfo
        volume_tag : str
        '''
        self.info = VolumeInfo.from_json(info) if info else None
        self.volume_tag = volume_tag


class VolumeAttachmentInfo(Type):
    _toSchema = {'device_link': 'device-link', 'bus_address': 'bus-address', 'read_only': 'read-only', 'device_name': 'device-name'}
    _toPy = {'device-name': 'device_name', 'device-link': 'device_link', 'bus-address': 'bus_address', 'read-only': 'read_only'}
    def __init__(self, bus_address=None, device_link=None, device_name=None, read_only=None):
        '''
        bus_address : str
        device_link : str
        device_name : str
        read_only : bool
        '''
        self.bus_address = bus_address
        self.device_link = device_link
        self.device_name = device_name
        self.read_only = read_only


class VolumeAttachmentParams(Type):
    _toSchema = {'machine_tag': 'machine-tag', 'provider': 'provider', 'read_only': 'read-only', 'volume_id': 'volume-id', 'instance_id': 'instance-id', 'volume_tag': 'volume-tag'}
    _toPy = {'volume-tag': 'volume_tag', 'read-only': 'read_only', 'volume-id': 'volume_id', 'provider': 'provider', 'instance-id': 'instance_id', 'machine-tag': 'machine_tag'}
    def __init__(self, instance_id=None, machine_tag=None, provider=None, read_only=None, volume_id=None, volume_tag=None):
        '''
        instance_id : str
        machine_tag : str
        provider : str
        read_only : bool
        volume_id : str
        volume_tag : str
        '''
        self.instance_id = instance_id
        self.machine_tag = machine_tag
        self.provider = provider
        self.read_only = read_only
        self.volume_id = volume_id
        self.volume_tag = volume_tag


class VolumeInfo(Type):
    _toSchema = {'persistent': 'persistent', 'size': 'size', 'volume_id': 'volume-id', 'hardware_id': 'hardware-id'}
    _toPy = {'persistent': 'persistent', 'size': 'size', 'volume-id': 'volume_id', 'hardware-id': 'hardware_id'}
    def __init__(self, hardware_id=None, persistent=None, size=None, volume_id=None):
        '''
        hardware_id : str
        persistent : bool
        size : int
        volume_id : str
        '''
        self.hardware_id = hardware_id
        self.persistent = persistent
        self.size = size
        self.volume_id = volume_id


class VolumeParams(Type):
    _toSchema = {'tags': 'tags', 'volume_tag': 'volume-tag', 'attachment': 'attachment', 'provider': 'provider', 'attributes': 'attributes', 'size': 'size'}
    _toPy = {'tags': 'tags', 'volume-tag': 'volume_tag', 'attachment': 'attachment', 'provider': 'provider', 'attributes': 'attributes', 'size': 'size'}
    def __init__(self, attachment=None, attributes=None, provider=None, size=None, tags=None, volume_tag=None):
        '''
        attachment : VolumeAttachmentParams
        attributes : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        provider : str
        size : int
        tags : typing.Mapping<~KT, +VT_co>[str, str]
        volume_tag : str
        '''
        self.attachment = VolumeAttachmentParams.from_json(attachment) if attachment else None
        self.attributes = attributes
        self.provider = provider
        self.size = size
        self.tags = tags
        self.volume_tag = volume_tag


class WatchContainer(Type):
    _toSchema = {'machine_tag': 'machine-tag', 'container_type': 'container-type'}
    _toPy = {'container-type': 'container_type', 'machine-tag': 'machine_tag'}
    def __init__(self, container_type=None, machine_tag=None):
        '''
        container_type : str
        machine_tag : str
        '''
        self.container_type = container_type
        self.machine_tag = machine_tag


class WatchContainers(Type):
    _toSchema = {'params': 'params'}
    _toPy = {'params': 'params'}
    def __init__(self, params=None):
        '''
        params : typing.Sequence<+T_co>[~WatchContainer]<~WatchContainer>
        '''
        self.params = [WatchContainer.from_json(o) for o in params or []]


class ProxyConfig(Type):
    _toSchema = {'no_proxy': 'no-proxy', 'https': 'https', 'http': 'http', 'ftp': 'ftp'}
    _toPy = {'no-proxy': 'no_proxy', 'https': 'https', 'http': 'http', 'ftp': 'ftp'}
    def __init__(self, ftp=None, http=None, https=None, no_proxy=None):
        '''
        ftp : str
        http : str
        https : str
        no_proxy : str
        '''
        self.ftp = ftp
        self.http = http
        self.https = https
        self.no_proxy = no_proxy


class ProxyConfigResult(Type):
    _toSchema = {'proxy_settings': 'proxy-settings', 'error': 'error', 'apt_proxy_settings': 'apt-proxy-settings'}
    _toPy = {'proxy-settings': 'proxy_settings', 'apt-proxy-settings': 'apt_proxy_settings', 'error': 'error'}
    def __init__(self, apt_proxy_settings=None, error=None, proxy_settings=None):
        '''
        apt_proxy_settings : ProxyConfig
        error : Error
        proxy_settings : ProxyConfig
        '''
        self.apt_proxy_settings = ProxyConfig.from_json(apt_proxy_settings) if apt_proxy_settings else None
        self.error = Error.from_json(error) if error else None
        self.proxy_settings = ProxyConfig.from_json(proxy_settings) if proxy_settings else None


class ProxyConfigResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ProxyConfigResult]<~ProxyConfigResult>
        '''
        self.results = [ProxyConfigResult.from_json(o) for o in results or []]


class RebootActionResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : str
        '''
        self.error = Error.from_json(error) if error else None
        self.result = result


class RebootActionResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~RebootActionResult]<~RebootActionResult>
        '''
        self.results = [RebootActionResult.from_json(o) for o in results or []]


class RelationUnitsChange(Type):
    _toSchema = {'departed': 'departed', 'changed': 'changed'}
    _toPy = {'departed': 'departed', 'changed': 'changed'}
    def __init__(self, changed=None, departed=None):
        '''
        changed : typing.Mapping<~KT, +VT_co>[str, ~UnitSettings]<~UnitSettings>
        departed : typing.Sequence<+T_co>[str]
        '''
        self.changed = changed
        self.departed = departed


class RelationUnitsWatchResult(Type):
    _toSchema = {'changes': 'changes', 'watcher_id': 'watcher-id', 'error': 'error'}
    _toPy = {'changes': 'changes', 'error': 'error', 'watcher-id': 'watcher_id'}
    def __init__(self, changes=None, error=None, watcher_id=None):
        '''
        changes : RelationUnitsChange
        error : Error
        watcher_id : str
        '''
        self.changes = RelationUnitsChange.from_json(changes) if changes else None
        self.error = Error.from_json(error) if error else None
        self.watcher_id = watcher_id


class UnitSettings(Type):
    _toSchema = {'version': 'version'}
    _toPy = {'version': 'version'}
    def __init__(self, version=None):
        '''
        version : int
        '''
        self.version = version


class RetryStrategy(Type):
    _toSchema = {'should_retry': 'should-retry', 'jitter_retry_time': 'jitter-retry-time', 'min_retry_time': 'min-retry-time', 'max_retry_time': 'max-retry-time', 'retry_time_factor': 'retry-time-factor'}
    _toPy = {'jitter-retry-time': 'jitter_retry_time', 'max-retry-time': 'max_retry_time', 'should-retry': 'should_retry', 'min-retry-time': 'min_retry_time', 'retry-time-factor': 'retry_time_factor'}
    def __init__(self, jitter_retry_time=None, max_retry_time=None, min_retry_time=None, retry_time_factor=None, should_retry=None):
        '''
        jitter_retry_time : bool
        max_retry_time : int
        min_retry_time : int
        retry_time_factor : int
        should_retry : bool
        '''
        self.jitter_retry_time = jitter_retry_time
        self.max_retry_time = max_retry_time
        self.min_retry_time = min_retry_time
        self.retry_time_factor = retry_time_factor
        self.should_retry = should_retry


class RetryStrategyResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : RetryStrategy
        '''
        self.error = Error.from_json(error) if error else None
        self.result = RetryStrategy.from_json(result) if result else None


class RetryStrategyResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~RetryStrategyResult]<~RetryStrategyResult>
        '''
        self.results = [RetryStrategyResult.from_json(o) for o in results or []]


class SSHAddressResult(Type):
    _toSchema = {'address': 'address', 'error': 'error'}
    _toPy = {'address': 'address', 'error': 'error'}
    def __init__(self, address=None, error=None):
        '''
        address : str
        error : Error
        '''
        self.address = address
        self.error = Error.from_json(error) if error else None


class SSHAddressResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~SSHAddressResult]<~SSHAddressResult>
        '''
        self.results = [SSHAddressResult.from_json(o) for o in results or []]


class SSHProxyResult(Type):
    _toSchema = {'use_proxy': 'use-proxy'}
    _toPy = {'use-proxy': 'use_proxy'}
    def __init__(self, use_proxy=None):
        '''
        use_proxy : bool
        '''
        self.use_proxy = use_proxy


class SSHPublicKeysResult(Type):
    _toSchema = {'public_keys': 'public-keys', 'error': 'error'}
    _toPy = {'public-keys': 'public_keys', 'error': 'error'}
    def __init__(self, error=None, public_keys=None):
        '''
        error : Error
        public_keys : typing.Sequence<+T_co>[str]
        '''
        self.error = Error.from_json(error) if error else None
        self.public_keys = public_keys


class SSHPublicKeysResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~SSHPublicKeysResult]<~SSHPublicKeysResult>
        '''
        self.results = [SSHPublicKeysResult.from_json(o) for o in results or []]


class SingularClaim(Type):
    _toSchema = {'duration': 'duration', 'model_tag': 'model-tag', 'controller_tag': 'controller-tag'}
    _toPy = {'duration': 'duration', 'controller-tag': 'controller_tag', 'model-tag': 'model_tag'}
    def __init__(self, controller_tag=None, duration=None, model_tag=None):
        '''
        controller_tag : str
        duration : int
        model_tag : str
        '''
        self.controller_tag = controller_tag
        self.duration = duration
        self.model_tag = model_tag


class SingularClaims(Type):
    _toSchema = {'claims': 'claims'}
    _toPy = {'claims': 'claims'}
    def __init__(self, claims=None):
        '''
        claims : typing.Sequence<+T_co>[~SingularClaim]<~SingularClaim>
        '''
        self.claims = [SingularClaim.from_json(o) for o in claims or []]


class ListSpacesResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~Space]<~Space>
        '''
        self.results = [Space.from_json(o) for o in results or []]


class Space(Type):
    _toSchema = {'subnets': 'subnets', 'error': 'error', 'name': 'name'}
    _toPy = {'subnets': 'subnets', 'error': 'error', 'name': 'name'}
    def __init__(self, error=None, name=None, subnets=None):
        '''
        error : Error
        name : str
        subnets : typing.Sequence<+T_co>[~Subnet]<~Subnet>
        '''
        self.error = Error.from_json(error) if error else None
        self.name = name
        self.subnets = [Subnet.from_json(o) for o in subnets or []]


class StatusHistoryPruneArgs(Type):
    _toSchema = {'max_history_mb': 'max-history-mb', 'max_history_time': 'max-history-time'}
    _toPy = {'max-history-mb': 'max_history_mb', 'max-history-time': 'max_history_time'}
    def __init__(self, max_history_mb=None, max_history_time=None):
        '''
        max_history_mb : int
        max_history_time : int
        '''
        self.max_history_mb = max_history_mb
        self.max_history_time = max_history_time


class FilesystemAttachmentInfo(Type):
    _toSchema = {'mount_point': 'mount-point', 'read_only': 'read-only'}
    _toPy = {'read-only': 'read_only', 'mount-point': 'mount_point'}
    def __init__(self, mount_point=None, read_only=None):
        '''
        mount_point : str
        read_only : bool
        '''
        self.mount_point = mount_point
        self.read_only = read_only


class FilesystemDetails(Type):
    _toSchema = {'storage': 'storage', 'status': 'status', 'machine_attachments': 'machine-attachments', 'volume_tag': 'volume-tag', 'filesystem_tag': 'filesystem-tag', 'info': 'info'}
    _toPy = {'machine-attachments': 'machine_attachments', 'storage': 'storage', 'volume-tag': 'volume_tag', 'status': 'status', 'filesystem-tag': 'filesystem_tag', 'info': 'info'}
    def __init__(self, filesystem_tag=None, info=None, machine_attachments=None, status=None, storage=None, volume_tag=None):
        '''
        filesystem_tag : str
        info : FilesystemInfo
        machine_attachments : typing.Mapping<~KT, +VT_co>[str, ~FilesystemAttachmentInfo]<~FilesystemAttachmentInfo>
        status : EntityStatus
        storage : StorageDetails
        volume_tag : str
        '''
        self.filesystem_tag = filesystem_tag
        self.info = FilesystemInfo.from_json(info) if info else None
        self.machine_attachments = machine_attachments
        self.status = EntityStatus.from_json(status) if status else None
        self.storage = StorageDetails.from_json(storage) if storage else None
        self.volume_tag = volume_tag


class FilesystemDetailsListResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : typing.Sequence<+T_co>[~FilesystemDetails]<~FilesystemDetails>
        '''
        self.error = Error.from_json(error) if error else None
        self.result = [FilesystemDetails.from_json(o) for o in result or []]


class FilesystemDetailsListResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~FilesystemDetailsListResult]<~FilesystemDetailsListResult>
        '''
        self.results = [FilesystemDetailsListResult.from_json(o) for o in results or []]


class FilesystemFilter(Type):
    _toSchema = {'machines': 'machines'}
    _toPy = {'machines': 'machines'}
    def __init__(self, machines=None):
        '''
        machines : typing.Sequence<+T_co>[str]
        '''
        self.machines = machines


class FilesystemFilters(Type):
    _toSchema = {'filters': 'filters'}
    _toPy = {'filters': 'filters'}
    def __init__(self, filters=None):
        '''
        filters : typing.Sequence<+T_co>[~FilesystemFilter]<~FilesystemFilter>
        '''
        self.filters = [FilesystemFilter.from_json(o) for o in filters or []]


class FilesystemInfo(Type):
    _toSchema = {'size': 'size', 'filesystem_id': 'filesystem-id'}
    _toPy = {'size': 'size', 'filesystem-id': 'filesystem_id'}
    def __init__(self, filesystem_id=None, size=None):
        '''
        filesystem_id : str
        size : int
        '''
        self.filesystem_id = filesystem_id
        self.size = size


class StorageAddParams(Type):
    _toSchema = {'storage': 'storage', 'name': 'name', 'unit': 'unit'}
    _toPy = {'storage': 'storage', 'name': 'name', 'unit': 'unit'}
    def __init__(self, name=None, storage=None, unit=None):
        '''
        name : str
        storage : StorageConstraints
        unit : str
        '''
        self.name = name
        self.storage = StorageConstraints.from_json(storage) if storage else None
        self.unit = unit


class StorageAttachmentDetails(Type):
    _toSchema = {'machine_tag': 'machine-tag', 'storage_tag': 'storage-tag', 'location': 'location', 'unit_tag': 'unit-tag'}
    _toPy = {'unit-tag': 'unit_tag', 'storage-tag': 'storage_tag', 'machine-tag': 'machine_tag', 'location': 'location'}
    def __init__(self, location=None, machine_tag=None, storage_tag=None, unit_tag=None):
        '''
        location : str
        machine_tag : str
        storage_tag : str
        unit_tag : str
        '''
        self.location = location
        self.machine_tag = machine_tag
        self.storage_tag = storage_tag
        self.unit_tag = unit_tag


class StorageConstraints(Type):
    _toSchema = {'size': 'size', 'pool': 'pool', 'count': 'count'}
    _toPy = {'size': 'size', 'pool': 'pool', 'count': 'count'}
    def __init__(self, count=None, pool=None, size=None):
        '''
        count : int
        pool : str
        size : int
        '''
        self.count = count
        self.pool = pool
        self.size = size


class StorageDetails(Type):
    _toSchema = {'persistent': 'persistent', 'kind': 'kind', 'attachments': 'attachments', 'owner_tag': 'owner-tag', 'storage_tag': 'storage-tag', 'status': 'status'}
    _toPy = {'persistent': 'persistent', 'kind': 'kind', 'attachments': 'attachments', 'status': 'status', 'storage-tag': 'storage_tag', 'owner-tag': 'owner_tag'}
    def __init__(self, attachments=None, kind=None, owner_tag=None, persistent=None, status=None, storage_tag=None):
        '''
        attachments : typing.Mapping<~KT, +VT_co>[str, ~StorageAttachmentDetails]<~StorageAttachmentDetails>
        kind : int
        owner_tag : str
        persistent : bool
        status : EntityStatus
        storage_tag : str
        '''
        self.attachments = attachments
        self.kind = kind
        self.owner_tag = owner_tag
        self.persistent = persistent
        self.status = EntityStatus.from_json(status) if status else None
        self.storage_tag = storage_tag


class StorageDetailsListResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : typing.Sequence<+T_co>[~StorageDetails]<~StorageDetails>
        '''
        self.error = Error.from_json(error) if error else None
        self.result = [StorageDetails.from_json(o) for o in result or []]


class StorageDetailsListResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~StorageDetailsListResult]<~StorageDetailsListResult>
        '''
        self.results = [StorageDetailsListResult.from_json(o) for o in results or []]


class StorageDetailsResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : StorageDetails
        '''
        self.error = Error.from_json(error) if error else None
        self.result = StorageDetails.from_json(result) if result else None


class StorageDetailsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~StorageDetailsResult]<~StorageDetailsResult>
        '''
        self.results = [StorageDetailsResult.from_json(o) for o in results or []]


class StorageFilter(Type):
    _toSchema = {}
    _toPy = {}
    def __init__(self):
        '''

        '''
        pass


class StorageFilters(Type):
    _toSchema = {'filters': 'filters'}
    _toPy = {'filters': 'filters'}
    def __init__(self, filters=None):
        '''
        filters : typing.Sequence<+T_co>[~StorageFilter]<~StorageFilter>
        '''
        self.filters = [StorageFilter.from_json(o) for o in filters or []]


class StoragePool(Type):
    _toSchema = {'provider': 'provider', 'attrs': 'attrs', 'name': 'name'}
    _toPy = {'provider': 'provider', 'attrs': 'attrs', 'name': 'name'}
    def __init__(self, attrs=None, name=None, provider=None):
        '''
        attrs : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        name : str
        provider : str
        '''
        self.attrs = attrs
        self.name = name
        self.provider = provider


class StoragePoolFilter(Type):
    _toSchema = {'providers': 'providers', 'names': 'names'}
    _toPy = {'providers': 'providers', 'names': 'names'}
    def __init__(self, names=None, providers=None):
        '''
        names : typing.Sequence<+T_co>[str]
        providers : typing.Sequence<+T_co>[str]
        '''
        self.names = names
        self.providers = providers


class StoragePoolFilters(Type):
    _toSchema = {'filters': 'filters'}
    _toPy = {'filters': 'filters'}
    def __init__(self, filters=None):
        '''
        filters : typing.Sequence<+T_co>[~StoragePoolFilter]<~StoragePoolFilter>
        '''
        self.filters = [StoragePoolFilter.from_json(o) for o in filters or []]


class StoragePoolsResult(Type):
    _toSchema = {'error': 'error', 'storage_pools': 'storage-pools'}
    _toPy = {'storage-pools': 'storage_pools', 'error': 'error'}
    def __init__(self, error=None, storage_pools=None):
        '''
        error : Error
        storage_pools : typing.Sequence<+T_co>[~StoragePool]<~StoragePool>
        '''
        self.error = Error.from_json(error) if error else None
        self.storage_pools = [StoragePool.from_json(o) for o in storage_pools or []]


class StoragePoolsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~StoragePoolsResult]<~StoragePoolsResult>
        '''
        self.results = [StoragePoolsResult.from_json(o) for o in results or []]


class StoragesAddParams(Type):
    _toSchema = {'storages': 'storages'}
    _toPy = {'storages': 'storages'}
    def __init__(self, storages=None):
        '''
        storages : typing.Sequence<+T_co>[~StorageAddParams]<~StorageAddParams>
        '''
        self.storages = [StorageAddParams.from_json(o) for o in storages or []]


class VolumeDetails(Type):
    _toSchema = {'machine_attachments': 'machine-attachments', 'volume_tag': 'volume-tag', 'storage': 'storage', 'info': 'info', 'status': 'status'}
    _toPy = {'machine-attachments': 'machine_attachments', 'storage': 'storage', 'volume-tag': 'volume_tag', 'info': 'info', 'status': 'status'}
    def __init__(self, info=None, machine_attachments=None, status=None, storage=None, volume_tag=None):
        '''
        info : VolumeInfo
        machine_attachments : typing.Mapping<~KT, +VT_co>[str, ~VolumeAttachmentInfo]<~VolumeAttachmentInfo>
        status : EntityStatus
        storage : StorageDetails
        volume_tag : str
        '''
        self.info = VolumeInfo.from_json(info) if info else None
        self.machine_attachments = machine_attachments
        self.status = EntityStatus.from_json(status) if status else None
        self.storage = StorageDetails.from_json(storage) if storage else None
        self.volume_tag = volume_tag


class VolumeDetailsListResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : typing.Sequence<+T_co>[~VolumeDetails]<~VolumeDetails>
        '''
        self.error = Error.from_json(error) if error else None
        self.result = [VolumeDetails.from_json(o) for o in result or []]


class VolumeDetailsListResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~VolumeDetailsListResult]<~VolumeDetailsListResult>
        '''
        self.results = [VolumeDetailsListResult.from_json(o) for o in results or []]


class VolumeFilter(Type):
    _toSchema = {'machines': 'machines'}
    _toPy = {'machines': 'machines'}
    def __init__(self, machines=None):
        '''
        machines : typing.Sequence<+T_co>[str]
        '''
        self.machines = machines


class VolumeFilters(Type):
    _toSchema = {'filters': 'filters'}
    _toPy = {'filters': 'filters'}
    def __init__(self, filters=None):
        '''
        filters : typing.Sequence<+T_co>[~VolumeFilter]<~VolumeFilter>
        '''
        self.filters = [VolumeFilter.from_json(o) for o in filters or []]


class BlockDeviceResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : BlockDevice
        '''
        self.error = Error.from_json(error) if error else None
        self.result = BlockDevice.from_json(result) if result else None


class BlockDeviceResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~BlockDeviceResult]<~BlockDeviceResult>
        '''
        self.results = [BlockDeviceResult.from_json(o) for o in results or []]


class Filesystem(Type):
    _toSchema = {'volume_tag': 'volume-tag', 'filesystem_tag': 'filesystem-tag', 'info': 'info'}
    _toPy = {'volume-tag': 'volume_tag', 'info': 'info', 'filesystem-tag': 'filesystem_tag'}
    def __init__(self, filesystem_tag=None, info=None, volume_tag=None):
        '''
        filesystem_tag : str
        info : FilesystemInfo
        volume_tag : str
        '''
        self.filesystem_tag = filesystem_tag
        self.info = FilesystemInfo.from_json(info) if info else None
        self.volume_tag = volume_tag


class FilesystemAttachment(Type):
    _toSchema = {'machine_tag': 'machine-tag', 'filesystem_tag': 'filesystem-tag', 'info': 'info'}
    _toPy = {'machine-tag': 'machine_tag', 'info': 'info', 'filesystem-tag': 'filesystem_tag'}
    def __init__(self, filesystem_tag=None, info=None, machine_tag=None):
        '''
        filesystem_tag : str
        info : FilesystemAttachmentInfo
        machine_tag : str
        '''
        self.filesystem_tag = filesystem_tag
        self.info = FilesystemAttachmentInfo.from_json(info) if info else None
        self.machine_tag = machine_tag


class FilesystemAttachmentParams(Type):
    _toSchema = {'machine_tag': 'machine-tag', 'mount_point': 'mount-point', 'read_only': 'read-only', 'provider': 'provider', 'filesystem_id': 'filesystem-id', 'instance_id': 'instance-id', 'filesystem_tag': 'filesystem-tag'}
    _toPy = {'read-only': 'read_only', 'filesystem-id': 'filesystem_id', 'filesystem-tag': 'filesystem_tag', 'provider': 'provider', 'instance-id': 'instance_id', 'machine-tag': 'machine_tag', 'mount-point': 'mount_point'}
    def __init__(self, filesystem_id=None, filesystem_tag=None, instance_id=None, machine_tag=None, mount_point=None, provider=None, read_only=None):
        '''
        filesystem_id : str
        filesystem_tag : str
        instance_id : str
        machine_tag : str
        mount_point : str
        provider : str
        read_only : bool
        '''
        self.filesystem_id = filesystem_id
        self.filesystem_tag = filesystem_tag
        self.instance_id = instance_id
        self.machine_tag = machine_tag
        self.mount_point = mount_point
        self.provider = provider
        self.read_only = read_only


class FilesystemAttachmentParamsResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : FilesystemAttachmentParams
        '''
        self.error = Error.from_json(error) if error else None
        self.result = FilesystemAttachmentParams.from_json(result) if result else None


class FilesystemAttachmentParamsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~FilesystemAttachmentParamsResult]<~FilesystemAttachmentParamsResult>
        '''
        self.results = [FilesystemAttachmentParamsResult.from_json(o) for o in results or []]


class FilesystemAttachmentResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : FilesystemAttachment
        '''
        self.error = Error.from_json(error) if error else None
        self.result = FilesystemAttachment.from_json(result) if result else None


class FilesystemAttachmentResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~FilesystemAttachmentResult]<~FilesystemAttachmentResult>
        '''
        self.results = [FilesystemAttachmentResult.from_json(o) for o in results or []]


class FilesystemAttachments(Type):
    _toSchema = {'filesystem_attachments': 'filesystem-attachments'}
    _toPy = {'filesystem-attachments': 'filesystem_attachments'}
    def __init__(self, filesystem_attachments=None):
        '''
        filesystem_attachments : typing.Sequence<+T_co>[~FilesystemAttachment]<~FilesystemAttachment>
        '''
        self.filesystem_attachments = [FilesystemAttachment.from_json(o) for o in filesystem_attachments or []]


class FilesystemParams(Type):
    _toSchema = {'tags': 'tags', 'size': 'size', 'attachment': 'attachment', 'provider': 'provider', 'attributes': 'attributes', 'filesystem_tag': 'filesystem-tag', 'volume_tag': 'volume-tag'}
    _toPy = {'tags': 'tags', 'volume-tag': 'volume_tag', 'attachment': 'attachment', 'filesystem-tag': 'filesystem_tag', 'provider': 'provider', 'attributes': 'attributes', 'size': 'size'}
    def __init__(self, attachment=None, attributes=None, filesystem_tag=None, provider=None, size=None, tags=None, volume_tag=None):
        '''
        attachment : FilesystemAttachmentParams
        attributes : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        filesystem_tag : str
        provider : str
        size : int
        tags : typing.Mapping<~KT, +VT_co>[str, str]
        volume_tag : str
        '''
        self.attachment = FilesystemAttachmentParams.from_json(attachment) if attachment else None
        self.attributes = attributes
        self.filesystem_tag = filesystem_tag
        self.provider = provider
        self.size = size
        self.tags = tags
        self.volume_tag = volume_tag


class FilesystemParamsResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : FilesystemParams
        '''
        self.error = Error.from_json(error) if error else None
        self.result = FilesystemParams.from_json(result) if result else None


class FilesystemParamsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~FilesystemParamsResult]<~FilesystemParamsResult>
        '''
        self.results = [FilesystemParamsResult.from_json(o) for o in results or []]


class FilesystemResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : Filesystem
        '''
        self.error = Error.from_json(error) if error else None
        self.result = Filesystem.from_json(result) if result else None


class FilesystemResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~FilesystemResult]<~FilesystemResult>
        '''
        self.results = [FilesystemResult.from_json(o) for o in results or []]


class Filesystems(Type):
    _toSchema = {'filesystems': 'filesystems'}
    _toPy = {'filesystems': 'filesystems'}
    def __init__(self, filesystems=None):
        '''
        filesystems : typing.Sequence<+T_co>[~Filesystem]<~Filesystem>
        '''
        self.filesystems = [Filesystem.from_json(o) for o in filesystems or []]


class MachineStorageIds(Type):
    _toSchema = {'ids': 'ids'}
    _toPy = {'ids': 'ids'}
    def __init__(self, ids=None):
        '''
        ids : typing.Sequence<+T_co>[~MachineStorageId]<~MachineStorageId>
        '''
        self.ids = [MachineStorageId.from_json(o) for o in ids or []]


class MachineStorageIdsWatchResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~MachineStorageIdsWatchResult]<~MachineStorageIdsWatchResult>
        '''
        self.results = [MachineStorageIdsWatchResult.from_json(o) for o in results or []]


class VolumeAttachment(Type):
    _toSchema = {'machine_tag': 'machine-tag', 'volume_tag': 'volume-tag', 'info': 'info'}
    _toPy = {'volume-tag': 'volume_tag', 'machine-tag': 'machine_tag', 'info': 'info'}
    def __init__(self, info=None, machine_tag=None, volume_tag=None):
        '''
        info : VolumeAttachmentInfo
        machine_tag : str
        volume_tag : str
        '''
        self.info = VolumeAttachmentInfo.from_json(info) if info else None
        self.machine_tag = machine_tag
        self.volume_tag = volume_tag


class VolumeAttachmentParamsResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : VolumeAttachmentParams
        '''
        self.error = Error.from_json(error) if error else None
        self.result = VolumeAttachmentParams.from_json(result) if result else None


class VolumeAttachmentParamsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~VolumeAttachmentParamsResult]<~VolumeAttachmentParamsResult>
        '''
        self.results = [VolumeAttachmentParamsResult.from_json(o) for o in results or []]


class VolumeAttachmentResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : VolumeAttachment
        '''
        self.error = Error.from_json(error) if error else None
        self.result = VolumeAttachment.from_json(result) if result else None


class VolumeAttachmentResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~VolumeAttachmentResult]<~VolumeAttachmentResult>
        '''
        self.results = [VolumeAttachmentResult.from_json(o) for o in results or []]


class VolumeAttachments(Type):
    _toSchema = {'volume_attachments': 'volume-attachments'}
    _toPy = {'volume-attachments': 'volume_attachments'}
    def __init__(self, volume_attachments=None):
        '''
        volume_attachments : typing.Sequence<+T_co>[~VolumeAttachment]<~VolumeAttachment>
        '''
        self.volume_attachments = [VolumeAttachment.from_json(o) for o in volume_attachments or []]


class VolumeParamsResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : VolumeParams
        '''
        self.error = Error.from_json(error) if error else None
        self.result = VolumeParams.from_json(result) if result else None


class VolumeParamsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~VolumeParamsResult]<~VolumeParamsResult>
        '''
        self.results = [VolumeParamsResult.from_json(o) for o in results or []]


class VolumeResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : Volume
        '''
        self.error = Error.from_json(error) if error else None
        self.result = Volume.from_json(result) if result else None


class VolumeResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~VolumeResult]<~VolumeResult>
        '''
        self.results = [VolumeResult.from_json(o) for o in results or []]


class Volumes(Type):
    _toSchema = {'volumes': 'volumes'}
    _toPy = {'volumes': 'volumes'}
    def __init__(self, volumes=None):
        '''
        volumes : typing.Sequence<+T_co>[~Volume]<~Volume>
        '''
        self.volumes = [Volume.from_json(o) for o in volumes or []]


class SpaceResult(Type):
    _toSchema = {'tag': 'tag', 'error': 'error'}
    _toPy = {'tag': 'tag', 'error': 'error'}
    def __init__(self, error=None, tag=None):
        '''
        error : Error
        tag : str
        '''
        self.error = Error.from_json(error) if error else None
        self.tag = tag


class SpaceResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~SpaceResult]<~SpaceResult>
        '''
        self.results = [SpaceResult.from_json(o) for o in results or []]


class ZoneResult(Type):
    _toSchema = {'error': 'error', 'available': 'available', 'name': 'name'}
    _toPy = {'error': 'error', 'available': 'available', 'name': 'name'}
    def __init__(self, available=None, error=None, name=None):
        '''
        available : bool
        error : Error
        name : str
        '''
        self.available = available
        self.error = Error.from_json(error) if error else None
        self.name = name


class ZoneResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ZoneResult]<~ZoneResult>
        '''
        self.results = [ZoneResult.from_json(o) for o in results or []]


class UndertakerModelInfo(Type):
    _toSchema = {'is_system': 'is-system', 'global_name': 'global-name', 'name': 'name', 'uuid': 'uuid', 'life': 'life'}
    _toPy = {'life': 'life', 'is-system': 'is_system', 'name': 'name', 'uuid': 'uuid', 'global-name': 'global_name'}
    def __init__(self, global_name=None, is_system=None, life=None, name=None, uuid=None):
        '''
        global_name : str
        is_system : bool
        life : str
        name : str
        uuid : str
        '''
        self.global_name = global_name
        self.is_system = is_system
        self.life = life
        self.name = name
        self.uuid = uuid


class UndertakerModelInfoResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : UndertakerModelInfo
        '''
        self.error = Error.from_json(error) if error else None
        self.result = UndertakerModelInfo.from_json(result) if result else None


class ApplicationStatusResult(Type):
    _toSchema = {'application': 'application', 'error': 'error', 'units': 'units'}
    _toPy = {'application': 'application', 'error': 'error', 'units': 'units'}
    def __init__(self, application=None, error=None, units=None):
        '''
        application : StatusResult
        error : Error
        units : typing.Mapping<~KT, +VT_co>[str, ~StatusResult]<~StatusResult>
        '''
        self.application = StatusResult.from_json(application) if application else None
        self.error = Error.from_json(error) if error else None
        self.units = units


class ApplicationStatusResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ApplicationStatusResult]<~ApplicationStatusResult>
        '''
        self.results = [ApplicationStatusResult.from_json(o) for o in results or []]


class CharmURLs(Type):
    _toSchema = {'urls': 'urls'}
    _toPy = {'urls': 'urls'}
    def __init__(self, urls=None):
        '''
        urls : typing.Sequence<+T_co>[~CharmURL]<~CharmURL>
        '''
        self.urls = [CharmURL.from_json(o) for o in urls or []]


class ConfigSettingsResult(Type):
    _toSchema = {'error': 'error', 'settings': 'settings'}
    _toPy = {'error': 'error', 'settings': 'settings'}
    def __init__(self, error=None, settings=None):
        '''
        error : Error
        settings : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.error = Error.from_json(error) if error else None
        self.settings = settings


class ConfigSettingsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ConfigSettingsResult]<~ConfigSettingsResult>
        '''
        self.results = [ConfigSettingsResult.from_json(o) for o in results or []]


class Endpoint(Type):
    _toSchema = {'application_name': 'application-name', 'relation': 'relation'}
    _toPy = {'relation': 'relation', 'application-name': 'application_name'}
    def __init__(self, application_name=None, relation=None):
        '''
        application_name : str
        relation : CharmRelation
        '''
        self.application_name = application_name
        self.relation = CharmRelation.from_json(relation) if relation else None


class EntitiesCharmURL(Type):
    _toSchema = {'entities': 'entities'}
    _toPy = {'entities': 'entities'}
    def __init__(self, entities=None):
        '''
        entities : typing.Sequence<+T_co>[~EntityCharmURL]<~EntityCharmURL>
        '''
        self.entities = [EntityCharmURL.from_json(o) for o in entities or []]


class EntitiesPortRanges(Type):
    _toSchema = {'entities': 'entities'}
    _toPy = {'entities': 'entities'}
    def __init__(self, entities=None):
        '''
        entities : typing.Sequence<+T_co>[~EntityPortRange]<~EntityPortRange>
        '''
        self.entities = [EntityPortRange.from_json(o) for o in entities or []]


class EntityCharmURL(Type):
    _toSchema = {'charm_url': 'charm-url', 'tag': 'tag'}
    _toPy = {'charm-url': 'charm_url', 'tag': 'tag'}
    def __init__(self, charm_url=None, tag=None):
        '''
        charm_url : str
        tag : str
        '''
        self.charm_url = charm_url
        self.tag = tag


class EntityPortRange(Type):
    _toSchema = {'from_port': 'from-port', 'tag': 'tag', 'protocol': 'protocol', 'to_port': 'to-port'}
    _toPy = {'tag': 'tag', 'from-port': 'from_port', 'protocol': 'protocol', 'to-port': 'to_port'}
    def __init__(self, from_port=None, protocol=None, tag=None, to_port=None):
        '''
        from_port : int
        protocol : str
        tag : str
        to_port : int
        '''
        self.from_port = from_port
        self.protocol = protocol
        self.tag = tag
        self.to_port = to_port


class EntityWorkloadVersion(Type):
    _toSchema = {'tag': 'tag', 'workload_version': 'workload-version'}
    _toPy = {'tag': 'tag', 'workload-version': 'workload_version'}
    def __init__(self, tag=None, workload_version=None):
        '''
        tag : str
        workload_version : str
        '''
        self.tag = tag
        self.workload_version = workload_version


class EntityWorkloadVersions(Type):
    _toSchema = {'entities': 'entities'}
    _toPy = {'entities': 'entities'}
    def __init__(self, entities=None):
        '''
        entities : typing.Sequence<+T_co>[~EntityWorkloadVersion]<~EntityWorkloadVersion>
        '''
        self.entities = [EntityWorkloadVersion.from_json(o) for o in entities or []]


class GetLeadershipSettingsBulkResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~GetLeadershipSettingsResult]<~GetLeadershipSettingsResult>
        '''
        self.results = [GetLeadershipSettingsResult.from_json(o) for o in results or []]


class GetLeadershipSettingsResult(Type):
    _toSchema = {'error': 'error', 'settings': 'settings'}
    _toPy = {'error': 'error', 'settings': 'settings'}
    def __init__(self, error=None, settings=None):
        '''
        error : Error
        settings : typing.Mapping<~KT, +VT_co>[str, str]
        '''
        self.error = Error.from_json(error) if error else None
        self.settings = settings


class IntResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : int
        '''
        self.error = Error.from_json(error) if error else None
        self.result = result


class IntResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~IntResult]<~IntResult>
        '''
        self.results = [IntResult.from_json(o) for o in results or []]


class MergeLeadershipSettingsBulkParams(Type):
    _toSchema = {'params': 'params'}
    _toPy = {'params': 'params'}
    def __init__(self, params=None):
        '''
        params : typing.Sequence<+T_co>[~MergeLeadershipSettingsParam]<~MergeLeadershipSettingsParam>
        '''
        self.params = [MergeLeadershipSettingsParam.from_json(o) for o in params or []]


class MergeLeadershipSettingsParam(Type):
    _toSchema = {'application_tag': 'application-tag', 'settings': 'settings'}
    _toPy = {'settings': 'settings', 'application-tag': 'application_tag'}
    def __init__(self, application_tag=None, settings=None):
        '''
        application_tag : str
        settings : typing.Mapping<~KT, +VT_co>[str, str]
        '''
        self.application_tag = application_tag
        self.settings = settings


class ModelResult(Type):
    _toSchema = {'error': 'error', 'uuid': 'uuid', 'name': 'name'}
    _toPy = {'error': 'error', 'uuid': 'uuid', 'name': 'name'}
    def __init__(self, error=None, name=None, uuid=None):
        '''
        error : Error
        name : str
        uuid : str
        '''
        self.error = Error.from_json(error) if error else None
        self.name = name
        self.uuid = uuid


class RelationIds(Type):
    _toSchema = {'relation_ids': 'relation-ids'}
    _toPy = {'relation-ids': 'relation_ids'}
    def __init__(self, relation_ids=None):
        '''
        relation_ids : typing.Sequence<+T_co>[int]
        '''
        self.relation_ids = relation_ids


class RelationResult(Type):
    _toSchema = {'key': 'key', 'life': 'life', 'error': 'error', 'id_': 'id', 'endpoint': 'endpoint'}
    _toPy = {'key': 'key', 'id': 'id_', 'life': 'life', 'error': 'error', 'endpoint': 'endpoint'}
    def __init__(self, endpoint=None, error=None, id_=None, key=None, life=None):
        '''
        endpoint : Endpoint
        error : Error
        id_ : int
        key : str
        life : str
        '''
        self.endpoint = Endpoint.from_json(endpoint) if endpoint else None
        self.error = Error.from_json(error) if error else None
        self.id_ = id_
        self.key = key
        self.life = life


class RelationResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~RelationResult]<~RelationResult>
        '''
        self.results = [RelationResult.from_json(o) for o in results or []]


class RelationUnit(Type):
    _toSchema = {'relation': 'relation', 'unit': 'unit'}
    _toPy = {'relation': 'relation', 'unit': 'unit'}
    def __init__(self, relation=None, unit=None):
        '''
        relation : str
        unit : str
        '''
        self.relation = relation
        self.unit = unit


class RelationUnitPair(Type):
    _toSchema = {'remote_unit': 'remote-unit', 'relation': 'relation', 'local_unit': 'local-unit'}
    _toPy = {'relation': 'relation', 'remote-unit': 'remote_unit', 'local-unit': 'local_unit'}
    def __init__(self, local_unit=None, relation=None, remote_unit=None):
        '''
        local_unit : str
        relation : str
        remote_unit : str
        '''
        self.local_unit = local_unit
        self.relation = relation
        self.remote_unit = remote_unit


class RelationUnitPairs(Type):
    _toSchema = {'relation_unit_pairs': 'relation-unit-pairs'}
    _toPy = {'relation-unit-pairs': 'relation_unit_pairs'}
    def __init__(self, relation_unit_pairs=None):
        '''
        relation_unit_pairs : typing.Sequence<+T_co>[~RelationUnitPair]<~RelationUnitPair>
        '''
        self.relation_unit_pairs = [RelationUnitPair.from_json(o) for o in relation_unit_pairs or []]


class RelationUnitSettings(Type):
    _toSchema = {'relation': 'relation', 'unit': 'unit', 'settings': 'settings'}
    _toPy = {'relation': 'relation', 'unit': 'unit', 'settings': 'settings'}
    def __init__(self, relation=None, settings=None, unit=None):
        '''
        relation : str
        settings : typing.Mapping<~KT, +VT_co>[str, str]
        unit : str
        '''
        self.relation = relation
        self.settings = settings
        self.unit = unit


class RelationUnits(Type):
    _toSchema = {'relation_units': 'relation-units'}
    _toPy = {'relation-units': 'relation_units'}
    def __init__(self, relation_units=None):
        '''
        relation_units : typing.Sequence<+T_co>[~RelationUnit]<~RelationUnit>
        '''
        self.relation_units = [RelationUnit.from_json(o) for o in relation_units or []]


class RelationUnitsSettings(Type):
    _toSchema = {'relation_units': 'relation-units'}
    _toPy = {'relation-units': 'relation_units'}
    def __init__(self, relation_units=None):
        '''
        relation_units : typing.Sequence<+T_co>[~RelationUnitSettings]<~RelationUnitSettings>
        '''
        self.relation_units = [RelationUnitSettings.from_json(o) for o in relation_units or []]


class RelationUnitsWatchResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~RelationUnitsWatchResult]<~RelationUnitsWatchResult>
        '''
        self.results = [RelationUnitsWatchResult.from_json(o) for o in results or []]


class ResolvedModeResult(Type):
    _toSchema = {'mode': 'mode', 'error': 'error'}
    _toPy = {'mode': 'mode', 'error': 'error'}
    def __init__(self, error=None, mode=None):
        '''
        error : Error
        mode : str
        '''
        self.error = Error.from_json(error) if error else None
        self.mode = mode


class ResolvedModeResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~ResolvedModeResult]<~ResolvedModeResult>
        '''
        self.results = [ResolvedModeResult.from_json(o) for o in results or []]


class SettingsResult(Type):
    _toSchema = {'error': 'error', 'settings': 'settings'}
    _toPy = {'error': 'error', 'settings': 'settings'}
    def __init__(self, error=None, settings=None):
        '''
        error : Error
        settings : typing.Mapping<~KT, +VT_co>[str, str]
        '''
        self.error = Error.from_json(error) if error else None
        self.settings = settings


class SettingsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~SettingsResult]<~SettingsResult>
        '''
        self.results = [SettingsResult.from_json(o) for o in results or []]


class StorageAttachment(Type):
    _toSchema = {'storage_tag': 'storage-tag', 'owner_tag': 'owner-tag', 'unit_tag': 'unit-tag', 'life': 'life', 'kind': 'kind', 'location': 'location'}
    _toPy = {'unit-tag': 'unit_tag', 'kind': 'kind', 'storage-tag': 'storage_tag', 'owner-tag': 'owner_tag', 'location': 'location', 'life': 'life'}
    def __init__(self, kind=None, life=None, location=None, owner_tag=None, storage_tag=None, unit_tag=None):
        '''
        kind : int
        life : str
        location : str
        owner_tag : str
        storage_tag : str
        unit_tag : str
        '''
        self.kind = kind
        self.life = life
        self.location = location
        self.owner_tag = owner_tag
        self.storage_tag = storage_tag
        self.unit_tag = unit_tag


class StorageAttachmentId(Type):
    _toSchema = {'storage_tag': 'storage-tag', 'unit_tag': 'unit-tag'}
    _toPy = {'unit-tag': 'unit_tag', 'storage-tag': 'storage_tag'}
    def __init__(self, storage_tag=None, unit_tag=None):
        '''
        storage_tag : str
        unit_tag : str
        '''
        self.storage_tag = storage_tag
        self.unit_tag = unit_tag


class StorageAttachmentIds(Type):
    _toSchema = {'ids': 'ids'}
    _toPy = {'ids': 'ids'}
    def __init__(self, ids=None):
        '''
        ids : typing.Sequence<+T_co>[~StorageAttachmentId]<~StorageAttachmentId>
        '''
        self.ids = [StorageAttachmentId.from_json(o) for o in ids or []]


class StorageAttachmentIdsResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : StorageAttachmentIds
        '''
        self.error = Error.from_json(error) if error else None
        self.result = StorageAttachmentIds.from_json(result) if result else None


class StorageAttachmentIdsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~StorageAttachmentIdsResult]<~StorageAttachmentIdsResult>
        '''
        self.results = [StorageAttachmentIdsResult.from_json(o) for o in results or []]


class StorageAttachmentResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : StorageAttachment
        '''
        self.error = Error.from_json(error) if error else None
        self.result = StorageAttachment.from_json(result) if result else None


class StorageAttachmentResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~StorageAttachmentResult]<~StorageAttachmentResult>
        '''
        self.results = [StorageAttachmentResult.from_json(o) for o in results or []]


class StringBoolResult(Type):
    _toSchema = {'result': 'result', 'ok': 'ok', 'error': 'error'}
    _toPy = {'result': 'result', 'ok': 'ok', 'error': 'error'}
    def __init__(self, error=None, ok=None, result=None):
        '''
        error : Error
        ok : bool
        result : str
        '''
        self.error = Error.from_json(error) if error else None
        self.ok = ok
        self.result = result


class StringBoolResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~StringBoolResult]<~StringBoolResult>
        '''
        self.results = [StringBoolResult.from_json(o) for o in results or []]


class UnitNetworkConfig(Type):
    _toSchema = {'unit_tag': 'unit-tag', 'binding_name': 'binding-name'}
    _toPy = {'unit-tag': 'unit_tag', 'binding-name': 'binding_name'}
    def __init__(self, binding_name=None, unit_tag=None):
        '''
        binding_name : str
        unit_tag : str
        '''
        self.binding_name = binding_name
        self.unit_tag = unit_tag


class UnitNetworkConfigResult(Type):
    _toSchema = {'error': 'error', 'info': 'info'}
    _toPy = {'error': 'error', 'info': 'info'}
    def __init__(self, error=None, info=None):
        '''
        error : Error
        info : typing.Sequence<+T_co>[~NetworkConfig]<~NetworkConfig>
        '''
        self.error = Error.from_json(error) if error else None
        self.info = [NetworkConfig.from_json(o) for o in info or []]


class UnitNetworkConfigResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~UnitNetworkConfigResult]<~UnitNetworkConfigResult>
        '''
        self.results = [UnitNetworkConfigResult.from_json(o) for o in results or []]


class UnitsNetworkConfig(Type):
    _toSchema = {'args': 'args'}
    _toPy = {'args': 'args'}
    def __init__(self, args=None):
        '''
        args : typing.Sequence<+T_co>[~UnitNetworkConfig]<~UnitNetworkConfig>
        '''
        self.args = [UnitNetworkConfig.from_json(o) for o in args or []]


class EntitiesVersion(Type):
    _toSchema = {'agent_tools': 'agent-tools'}
    _toPy = {'agent-tools': 'agent_tools'}
    def __init__(self, agent_tools=None):
        '''
        agent_tools : typing.Sequence<+T_co>[~EntityVersion]<~EntityVersion>
        '''
        self.agent_tools = [EntityVersion.from_json(o) for o in agent_tools or []]


class EntityVersion(Type):
    _toSchema = {'tag': 'tag', 'tools': 'tools'}
    _toPy = {'tag': 'tag', 'tools': 'tools'}
    def __init__(self, tag=None, tools=None):
        '''
        tag : str
        tools : Version
        '''
        self.tag = tag
        self.tools = Version.from_json(tools) if tools else None


class Version(Type):
    _toSchema = {'version': 'version'}
    _toPy = {'version': 'version'}
    def __init__(self, version=None):
        '''
        version : Binary
        '''
        self.version = Binary.from_json(version) if version else None


class VersionResult(Type):
    _toSchema = {'version': 'version', 'error': 'error'}
    _toPy = {'version': 'version', 'error': 'error'}
    def __init__(self, error=None, version=None):
        '''
        error : Error
        version : Number
        '''
        self.error = Error.from_json(error) if error else None
        self.version = Number.from_json(version) if version else None


class VersionResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~VersionResult]<~VersionResult>
        '''
        self.results = [VersionResult.from_json(o) for o in results or []]


class AddUser(Type):
    _toSchema = {'display_name': 'display-name', 'password': 'password', 'username': 'username'}
    _toPy = {'password': 'password', 'username': 'username', 'display-name': 'display_name'}
    def __init__(self, display_name=None, password=None, username=None):
        '''
        display_name : str
        password : str
        username : str
        '''
        self.display_name = display_name
        self.password = password
        self.username = username


class AddUserResult(Type):
    _toSchema = {'tag': 'tag', 'error': 'error', 'secret_key': 'secret-key'}
    _toPy = {'tag': 'tag', 'error': 'error', 'secret-key': 'secret_key'}
    def __init__(self, error=None, secret_key=None, tag=None):
        '''
        error : Error
        secret_key : typing.Sequence<+T_co>[int]
        tag : str
        '''
        self.error = Error.from_json(error) if error else None
        self.secret_key = secret_key
        self.tag = tag


class AddUserResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~AddUserResult]<~AddUserResult>
        '''
        self.results = [AddUserResult.from_json(o) for o in results or []]


class AddUsers(Type):
    _toSchema = {'users': 'users'}
    _toPy = {'users': 'users'}
    def __init__(self, users=None):
        '''
        users : typing.Sequence<+T_co>[~AddUser]<~AddUser>
        '''
        self.users = [AddUser.from_json(o) for o in users or []]


class MacaroonResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : Macaroon
        '''
        self.error = Error.from_json(error) if error else None
        self.result = Macaroon.from_json(result) if result else None


class MacaroonResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~MacaroonResult]<~MacaroonResult>
        '''
        self.results = [MacaroonResult.from_json(o) for o in results or []]


class UserInfo(Type):
    _toSchema = {'display_name': 'display-name', 'last_connection': 'last-connection', 'disabled': 'disabled', 'date_created': 'date-created', 'username': 'username', 'access': 'access', 'created_by': 'created-by'}
    _toPy = {'disabled': 'disabled', 'last-connection': 'last_connection', 'display-name': 'display_name', 'created-by': 'created_by', 'access': 'access', 'date-created': 'date_created', 'username': 'username'}
    def __init__(self, access=None, created_by=None, date_created=None, disabled=None, display_name=None, last_connection=None, username=None):
        '''
        access : str
        created_by : str
        date_created : str
        disabled : bool
        display_name : str
        last_connection : str
        username : str
        '''
        self.access = access
        self.created_by = created_by
        self.date_created = date_created
        self.disabled = disabled
        self.display_name = display_name
        self.last_connection = last_connection
        self.username = username


class UserInfoRequest(Type):
    _toSchema = {'include_disabled': 'include-disabled', 'entities': 'entities'}
    _toPy = {'entities': 'entities', 'include-disabled': 'include_disabled'}
    def __init__(self, entities=None, include_disabled=None):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        include_disabled : bool
        '''
        self.entities = [Entity.from_json(o) for o in entities or []]
        self.include_disabled = include_disabled


class UserInfoResult(Type):
    _toSchema = {'result': 'result', 'error': 'error'}
    _toPy = {'result': 'result', 'error': 'error'}
    def __init__(self, error=None, result=None):
        '''
        error : Error
        result : UserInfo
        '''
        self.error = Error.from_json(error) if error else None
        self.result = UserInfo.from_json(result) if result else None


class UserInfoResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None):
        '''
        results : typing.Sequence<+T_co>[~UserInfoResult]<~UserInfoResult>
        '''
        self.results = [UserInfoResult.from_json(o) for o in results or []]


class ActionFacade(Type):
    name = 'Action'
    version = 2
    schema =     {'definitions': {'Action': {'additionalProperties': False,
                                'properties': {'name': {'type': 'string'},
                                               'parameters': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                           'type': 'object'}},
                                                              'type': 'object'},
                                               'receiver': {'type': 'string'},
                                               'tag': {'type': 'string'}},
                                'required': ['tag', 'receiver', 'name'],
                                'type': 'object'},
                     'ActionResult': {'additionalProperties': False,
                                      'properties': {'action': {'$ref': '#/definitions/Action'},
                                                     'completed': {'format': 'date-time',
                                                                   'type': 'string'},
                                                     'enqueued': {'format': 'date-time',
                                                                  'type': 'string'},
                                                     'error': {'$ref': '#/definitions/Error'},
                                                     'message': {'type': 'string'},
                                                     'output': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                             'type': 'object'}},
                                                                'type': 'object'},
                                                     'started': {'format': 'date-time',
                                                                 'type': 'string'},
                                                     'status': {'type': 'string'}},
                                      'type': 'object'},
                     'ActionResults': {'additionalProperties': False,
                                       'properties': {'results': {'items': {'$ref': '#/definitions/ActionResult'},
                                                                  'type': 'array'}},
                                       'type': 'object'},
                     'ActionSpec': {'additionalProperties': False,
                                    'properties': {'description': {'type': 'string'},
                                                   'params': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                           'type': 'object'}},
                                                              'type': 'object'}},
                                    'required': ['description', 'params'],
                                    'type': 'object'},
                     'Actions': {'additionalProperties': False,
                                 'properties': {'actions': {'items': {'$ref': '#/definitions/Action'},
                                                            'type': 'array'}},
                                 'type': 'object'},
                     'ActionsByName': {'additionalProperties': False,
                                       'properties': {'actions': {'items': {'$ref': '#/definitions/ActionResult'},
                                                                  'type': 'array'},
                                                      'error': {'$ref': '#/definitions/Error'},
                                                      'name': {'type': 'string'}},
                                       'type': 'object'},
                     'ActionsByNames': {'additionalProperties': False,
                                        'properties': {'actions': {'items': {'$ref': '#/definitions/ActionsByName'},
                                                                   'type': 'array'}},
                                        'type': 'object'},
                     'ActionsByReceiver': {'additionalProperties': False,
                                           'properties': {'actions': {'items': {'$ref': '#/definitions/ActionResult'},
                                                                      'type': 'array'},
                                                          'error': {'$ref': '#/definitions/Error'},
                                                          'receiver': {'type': 'string'}},
                                           'type': 'object'},
                     'ActionsByReceivers': {'additionalProperties': False,
                                            'properties': {'actions': {'items': {'$ref': '#/definitions/ActionsByReceiver'},
                                                                       'type': 'array'}},
                                            'type': 'object'},
                     'ApplicationCharmActionsResult': {'additionalProperties': False,
                                                       'properties': {'actions': {'patternProperties': {'.*': {'$ref': '#/definitions/ActionSpec'}},
                                                                                  'type': 'object'},
                                                                      'application-tag': {'type': 'string'},
                                                                      'error': {'$ref': '#/definitions/Error'}},
                                                       'type': 'object'},
                     'ApplicationsCharmActionsResults': {'additionalProperties': False,
                                                         'properties': {'results': {'items': {'$ref': '#/definitions/ApplicationCharmActionsResult'},
                                                                                    'type': 'array'}},
                                                         'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'FindActionsByNames': {'additionalProperties': False,
                                            'properties': {'names': {'items': {'type': 'string'},
                                                                     'type': 'array'}},
                                            'type': 'object'},
                     'FindTags': {'additionalProperties': False,
                                  'properties': {'prefixes': {'items': {'type': 'string'},
                                                              'type': 'array'}},
                                  'required': ['prefixes'],
                                  'type': 'object'},
                     'FindTagsResults': {'additionalProperties': False,
                                         'properties': {'matches': {'patternProperties': {'.*': {'items': {'$ref': '#/definitions/Entity'},
                                                                                                 'type': 'array'}},
                                                                    'type': 'object'}},
                                         'required': ['matches'],
                                         'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'RunParams': {'additionalProperties': False,
                                   'properties': {'applications': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'commands': {'type': 'string'},
                                                  'machines': {'items': {'type': 'string'},
                                                               'type': 'array'},
                                                  'timeout': {'type': 'integer'},
                                                  'units': {'items': {'type': 'string'},
                                                            'type': 'array'}},
                                   'required': ['commands', 'timeout'],
                                   'type': 'object'}},
     'properties': {'Actions': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                               'Result': {'$ref': '#/definitions/ActionResults'}},
                                'type': 'object'},
                    'ApplicationsCharmsActions': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                 'Result': {'$ref': '#/definitions/ApplicationsCharmActionsResults'}},
                                                  'type': 'object'},
                    'Cancel': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                              'Result': {'$ref': '#/definitions/ActionResults'}},
                               'type': 'object'},
                    'Enqueue': {'properties': {'Params': {'$ref': '#/definitions/Actions'},
                                               'Result': {'$ref': '#/definitions/ActionResults'}},
                                'type': 'object'},
                    'FindActionTagsByPrefix': {'properties': {'Params': {'$ref': '#/definitions/FindTags'},
                                                              'Result': {'$ref': '#/definitions/FindTagsResults'}},
                                               'type': 'object'},
                    'FindActionsByNames': {'properties': {'Params': {'$ref': '#/definitions/FindActionsByNames'},
                                                          'Result': {'$ref': '#/definitions/ActionsByNames'}},
                                           'type': 'object'},
                    'ListAll': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                               'Result': {'$ref': '#/definitions/ActionsByReceivers'}},
                                'type': 'object'},
                    'ListCompleted': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                     'Result': {'$ref': '#/definitions/ActionsByReceivers'}},
                                      'type': 'object'},
                    'ListPending': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                   'Result': {'$ref': '#/definitions/ActionsByReceivers'}},
                                    'type': 'object'},
                    'ListRunning': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                   'Result': {'$ref': '#/definitions/ActionsByReceivers'}},
                                    'type': 'object'},
                    'Run': {'properties': {'Params': {'$ref': '#/definitions/RunParams'},
                                           'Result': {'$ref': '#/definitions/ActionResults'}},
                            'type': 'object'},
                    'RunOnAllMachines': {'properties': {'Params': {'$ref': '#/definitions/RunParams'},
                                                        'Result': {'$ref': '#/definitions/ActionResults'}},
                                         'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ActionResults)
    async def Actions(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ActionResult]<~ActionResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Action', request='Actions', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ApplicationsCharmActionsResults)
    async def ApplicationsCharmsActions(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ApplicationCharmActionsResult]<~ApplicationCharmActionsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Action', request='ApplicationsCharmsActions', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ActionResults)
    async def Cancel(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ActionResult]<~ActionResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Action', request='Cancel', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ActionResults)
    async def Enqueue(self, actions):
        '''
        actions : typing.Sequence<+T_co>[~Action]<~Action>
        Returns -> typing.Sequence<+T_co>[~ActionResult]<~ActionResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Action', request='Enqueue', version=2, params=params)
        params['actions'] = actions
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(FindTagsResults)
    async def FindActionTagsByPrefix(self, prefixes):
        '''
        prefixes : typing.Sequence<+T_co>[str]
        Returns -> typing.Sequence<+T_co>[~Entity]<~Entity>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Action', request='FindActionTagsByPrefix', version=2, params=params)
        params['prefixes'] = prefixes
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ActionsByNames)
    async def FindActionsByNames(self, names):
        '''
        names : typing.Sequence<+T_co>[str]
        Returns -> typing.Sequence<+T_co>[~ActionsByName]<~ActionsByName>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Action', request='FindActionsByNames', version=2, params=params)
        params['names'] = names
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ActionsByReceivers)
    async def ListAll(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ActionsByReceiver]<~ActionsByReceiver>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Action', request='ListAll', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ActionsByReceivers)
    async def ListCompleted(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ActionsByReceiver]<~ActionsByReceiver>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Action', request='ListCompleted', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ActionsByReceivers)
    async def ListPending(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ActionsByReceiver]<~ActionsByReceiver>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Action', request='ListPending', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ActionsByReceivers)
    async def ListRunning(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ActionsByReceiver]<~ActionsByReceiver>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Action', request='ListRunning', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ActionResults)
    async def Run(self, applications, commands, machines, timeout, units):
        '''
        applications : typing.Sequence<+T_co>[str]
        commands : str
        machines : typing.Sequence<+T_co>[str]
        timeout : int
        units : typing.Sequence<+T_co>[str]
        Returns -> typing.Sequence<+T_co>[~ActionResult]<~ActionResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Action', request='Run', version=2, params=params)
        params['applications'] = applications
        params['commands'] = commands
        params['machines'] = machines
        params['timeout'] = timeout
        params['units'] = units
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ActionResults)
    async def RunOnAllMachines(self, applications, commands, machines, timeout, units):
        '''
        applications : typing.Sequence<+T_co>[str]
        commands : str
        machines : typing.Sequence<+T_co>[str]
        timeout : int
        units : typing.Sequence<+T_co>[str]
        Returns -> typing.Sequence<+T_co>[~ActionResult]<~ActionResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Action', request='RunOnAllMachines', version=2, params=params)
        params['applications'] = applications
        params['commands'] = commands
        params['machines'] = machines
        params['timeout'] = timeout
        params['units'] = units
        reply = await self.rpc(msg)
        return reply


class AgentFacade(Type):
    name = 'Agent'
    version = 2
    schema =     {'definitions': {'AgentGetEntitiesResult': {'additionalProperties': False,
                                                'properties': {'container-type': {'type': 'string'},
                                                               'error': {'$ref': '#/definitions/Error'},
                                                               'jobs': {'items': {'type': 'string'},
                                                                        'type': 'array'},
                                                               'life': {'type': 'string'}},
                                                'required': ['life',
                                                             'jobs',
                                                             'container-type'],
                                                'type': 'object'},
                     'AgentGetEntitiesResults': {'additionalProperties': False,
                                                 'properties': {'entities': {'items': {'$ref': '#/definitions/AgentGetEntitiesResult'},
                                                                             'type': 'array'}},
                                                 'required': ['entities'],
                                                 'type': 'object'},
                     'CloudCredential': {'additionalProperties': False,
                                         'properties': {'attrs': {'patternProperties': {'.*': {'type': 'string'}},
                                                                  'type': 'object'},
                                                        'auth-type': {'type': 'string'},
                                                        'redacted': {'items': {'type': 'string'},
                                                                     'type': 'array'}},
                                         'required': ['auth-type'],
                                         'type': 'object'},
                     'CloudSpec': {'additionalProperties': False,
                                   'properties': {'credential': {'$ref': '#/definitions/CloudCredential'},
                                                  'endpoint': {'type': 'string'},
                                                  'identity-endpoint': {'type': 'string'},
                                                  'name': {'type': 'string'},
                                                  'region': {'type': 'string'},
                                                  'storage-endpoint': {'type': 'string'},
                                                  'type': {'type': 'string'}},
                                   'required': ['type', 'name'],
                                   'type': 'object'},
                     'CloudSpecResult': {'additionalProperties': False,
                                         'properties': {'error': {'$ref': '#/definitions/Error'},
                                                        'result': {'$ref': '#/definitions/CloudSpec'}},
                                         'type': 'object'},
                     'CloudSpecResults': {'additionalProperties': False,
                                          'properties': {'results': {'items': {'$ref': '#/definitions/CloudSpecResult'},
                                                                     'type': 'array'}},
                                          'type': 'object'},
                     'ControllerConfigResult': {'additionalProperties': False,
                                                'properties': {'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                       'type': 'object'}},
                                                                          'type': 'object'}},
                                                'required': ['config'],
                                                'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'EntityPassword': {'additionalProperties': False,
                                        'properties': {'password': {'type': 'string'},
                                                       'tag': {'type': 'string'}},
                                        'required': ['tag', 'password'],
                                        'type': 'object'},
                     'EntityPasswords': {'additionalProperties': False,
                                         'properties': {'changes': {'items': {'$ref': '#/definitions/EntityPassword'},
                                                                    'type': 'array'}},
                                         'required': ['changes'],
                                         'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'IsMasterResult': {'additionalProperties': False,
                                        'properties': {'master': {'type': 'boolean'}},
                                        'required': ['master'],
                                        'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'ModelConfigResult': {'additionalProperties': False,
                                           'properties': {'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                  'type': 'object'}},
                                                                     'type': 'object'}},
                                           'required': ['config'],
                                           'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'StateServingInfo': {'additionalProperties': False,
                                          'properties': {'api-port': {'type': 'integer'},
                                                         'ca-private-key': {'type': 'string'},
                                                         'cert': {'type': 'string'},
                                                         'private-key': {'type': 'string'},
                                                         'shared-secret': {'type': 'string'},
                                                         'state-port': {'type': 'integer'},
                                                         'system-identity': {'type': 'string'}},
                                          'required': ['api-port',
                                                       'state-port',
                                                       'cert',
                                                       'private-key',
                                                       'ca-private-key',
                                                       'shared-secret',
                                                       'system-identity'],
                                          'type': 'object'}},
     'properties': {'ClearReboot': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                   'Result': {'$ref': '#/definitions/ErrorResults'}},
                                    'type': 'object'},
                    'CloudSpec': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                 'Result': {'$ref': '#/definitions/CloudSpecResults'}},
                                  'type': 'object'},
                    'ControllerConfig': {'properties': {'Result': {'$ref': '#/definitions/ControllerConfigResult'}},
                                         'type': 'object'},
                    'GetEntities': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                   'Result': {'$ref': '#/definitions/AgentGetEntitiesResults'}},
                                    'type': 'object'},
                    'IsMaster': {'properties': {'Result': {'$ref': '#/definitions/IsMasterResult'}},
                                 'type': 'object'},
                    'ModelConfig': {'properties': {'Result': {'$ref': '#/definitions/ModelConfigResult'}},
                                    'type': 'object'},
                    'SetPasswords': {'properties': {'Params': {'$ref': '#/definitions/EntityPasswords'},
                                                    'Result': {'$ref': '#/definitions/ErrorResults'}},
                                     'type': 'object'},
                    'StateServingInfo': {'properties': {'Result': {'$ref': '#/definitions/StateServingInfo'}},
                                         'type': 'object'},
                    'WatchForModelConfigChanges': {'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResult'}},
                                                   'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResults)
    async def ClearReboot(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Agent', request='ClearReboot', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(CloudSpecResults)
    async def CloudSpec(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~CloudSpecResult]<~CloudSpecResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Agent', request='CloudSpec', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ControllerConfigResult)
    async def ControllerConfig(self):
        '''

        Returns -> typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Agent', request='ControllerConfig', version=2, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(AgentGetEntitiesResults)
    async def GetEntities(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~AgentGetEntitiesResult]<~AgentGetEntitiesResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Agent', request='GetEntities', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(IsMasterResult)
    async def IsMaster(self):
        '''

        Returns -> bool
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Agent', request='IsMaster', version=2, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelConfigResult)
    async def ModelConfig(self):
        '''

        Returns -> typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Agent', request='ModelConfig', version=2, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetPasswords(self, changes):
        '''
        changes : typing.Sequence<+T_co>[~EntityPassword]<~EntityPassword>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Agent', request='SetPasswords', version=2, params=params)
        params['changes'] = changes
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StateServingInfo)
    async def StateServingInfo(self):
        '''

        Returns -> typing.Union[int, str]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Agent', request='StateServingInfo', version=2, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResult)
    async def WatchForModelConfigChanges(self):
        '''

        Returns -> typing.Union[str, _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Agent', request='WatchForModelConfigChanges', version=2, params=params)

        reply = await self.rpc(msg)
        return reply


class AgentToolsFacade(Type):
    name = 'AgentTools'
    version = 1
    schema =     {'properties': {'UpdateToolsAvailable': {'type': 'object'}}, 'type': 'object'}
    

    @ReturnMapping(None)
    async def UpdateToolsAvailable(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='AgentTools', request='UpdateToolsAvailable', version=1, params=params)

        reply = await self.rpc(msg)
        return reply


class AllModelWatcherFacade(Type):
    name = 'AllModelWatcher'
    version = 2
    schema =     {'definitions': {'AllWatcherNextResults': {'additionalProperties': False,
                                               'properties': {'deltas': {'items': {'$ref': '#/definitions/Delta'},
                                                                         'type': 'array'}},
                                               'required': ['deltas'],
                                               'type': 'object'},
                     'Delta': {'additionalProperties': False,
                               'properties': {'entity': {'additionalProperties': True,
                                                         'type': 'object'},
                                              'removed': {'type': 'boolean'}},
                               'required': ['removed', 'entity'],
                               'type': 'object'}},
     'properties': {'Next': {'properties': {'Result': {'$ref': '#/definitions/AllWatcherNextResults'}},
                             'type': 'object'},
                    'Stop': {'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(AllWatcherNextResults)
    async def Next(self):
        '''

        Returns -> typing.Sequence<+T_co>[~Delta]<~Delta>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='AllModelWatcher', request='Next', version=2, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Stop(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='AllModelWatcher', request='Stop', version=2, params=params)

        reply = await self.rpc(msg)
        return reply


class AllWatcherFacade(Type):
    name = 'AllWatcher'
    version = 1
    schema =     {'definitions': {'AllWatcherNextResults': {'additionalProperties': False,
                                               'properties': {'deltas': {'items': {'$ref': '#/definitions/Delta'},
                                                                         'type': 'array'}},
                                               'required': ['deltas'],
                                               'type': 'object'},
                     'Delta': {'additionalProperties': False,
                               'properties': {'entity': {'additionalProperties': True,
                                                         'type': 'object'},
                                              'removed': {'type': 'boolean'}},
                               'required': ['removed', 'entity'],
                               'type': 'object'}},
     'properties': {'Next': {'properties': {'Result': {'$ref': '#/definitions/AllWatcherNextResults'}},
                             'type': 'object'},
                    'Stop': {'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(AllWatcherNextResults)
    async def Next(self):
        '''

        Returns -> typing.Sequence<+T_co>[~Delta]<~Delta>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='AllWatcher', request='Next', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Stop(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='AllWatcher', request='Stop', version=1, params=params)

        reply = await self.rpc(msg)
        return reply


class AnnotationsFacade(Type):
    name = 'Annotations'
    version = 2
    schema =     {'definitions': {'AnnotationsGetResult': {'additionalProperties': False,
                                              'properties': {'annotations': {'patternProperties': {'.*': {'type': 'string'}},
                                                                             'type': 'object'},
                                                             'entity': {'type': 'string'},
                                                             'error': {'$ref': '#/definitions/ErrorResult'}},
                                              'required': ['entity', 'annotations'],
                                              'type': 'object'},
                     'AnnotationsGetResults': {'additionalProperties': False,
                                               'properties': {'results': {'items': {'$ref': '#/definitions/AnnotationsGetResult'},
                                                                          'type': 'array'}},
                                               'required': ['results'],
                                               'type': 'object'},
                     'AnnotationsSet': {'additionalProperties': False,
                                        'properties': {'annotations': {'items': {'$ref': '#/definitions/EntityAnnotations'},
                                                                       'type': 'array'}},
                                        'required': ['annotations'],
                                        'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'EntityAnnotations': {'additionalProperties': False,
                                           'properties': {'annotations': {'patternProperties': {'.*': {'type': 'string'}},
                                                                          'type': 'object'},
                                                          'entity': {'type': 'string'}},
                                           'required': ['entity', 'annotations'],
                                           'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'}},
     'properties': {'Get': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                           'Result': {'$ref': '#/definitions/AnnotationsGetResults'}},
                            'type': 'object'},
                    'Set': {'properties': {'Params': {'$ref': '#/definitions/AnnotationsSet'},
                                           'Result': {'$ref': '#/definitions/ErrorResults'}},
                            'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(AnnotationsGetResults)
    async def Get(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~AnnotationsGetResult]<~AnnotationsGetResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Annotations', request='Get', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def Set(self, annotations):
        '''
        annotations : typing.Sequence<+T_co>[~EntityAnnotations]<~EntityAnnotations>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Annotations', request='Set', version=2, params=params)
        params['annotations'] = annotations
        reply = await self.rpc(msg)
        return reply


class ApplicationFacade(Type):
    name = 'Application'
    version = 1
    schema =     {'definitions': {'AddApplicationUnits': {'additionalProperties': False,
                                             'properties': {'application': {'type': 'string'},
                                                            'num-units': {'type': 'integer'},
                                                            'placement': {'items': {'$ref': '#/definitions/Placement'},
                                                                          'type': 'array'}},
                                             'required': ['application',
                                                          'num-units',
                                                          'placement'],
                                             'type': 'object'},
                     'AddApplicationUnitsResults': {'additionalProperties': False,
                                                    'properties': {'units': {'items': {'type': 'string'},
                                                                             'type': 'array'}},
                                                    'required': ['units'],
                                                    'type': 'object'},
                     'AddRelation': {'additionalProperties': False,
                                     'properties': {'endpoints': {'items': {'type': 'string'},
                                                                  'type': 'array'}},
                                     'required': ['endpoints'],
                                     'type': 'object'},
                     'AddRelationResults': {'additionalProperties': False,
                                            'properties': {'endpoints': {'patternProperties': {'.*': {'$ref': '#/definitions/CharmRelation'}},
                                                                         'type': 'object'}},
                                            'required': ['endpoints'],
                                            'type': 'object'},
                     'ApplicationCharmRelations': {'additionalProperties': False,
                                                   'properties': {'application': {'type': 'string'}},
                                                   'required': ['application'],
                                                   'type': 'object'},
                     'ApplicationCharmRelationsResults': {'additionalProperties': False,
                                                          'properties': {'charm-relations': {'items': {'type': 'string'},
                                                                                             'type': 'array'}},
                                                          'required': ['charm-relations'],
                                                          'type': 'object'},
                     'ApplicationDeploy': {'additionalProperties': False,
                                           'properties': {'application': {'type': 'string'},
                                                          'channel': {'type': 'string'},
                                                          'charm-url': {'type': 'string'},
                                                          'config': {'patternProperties': {'.*': {'type': 'string'}},
                                                                     'type': 'object'},
                                                          'config-yaml': {'type': 'string'},
                                                          'constraints': {'$ref': '#/definitions/Value'},
                                                          'endpoint-bindings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                                'type': 'object'},
                                                          'num-units': {'type': 'integer'},
                                                          'placement': {'items': {'$ref': '#/definitions/Placement'},
                                                                        'type': 'array'},
                                                          'resources': {'patternProperties': {'.*': {'type': 'string'}},
                                                                        'type': 'object'},
                                                          'series': {'type': 'string'},
                                                          'storage': {'patternProperties': {'.*': {'$ref': '#/definitions/Constraints'}},
                                                                      'type': 'object'}},
                                           'required': ['application',
                                                        'series',
                                                        'charm-url',
                                                        'channel',
                                                        'num-units',
                                                        'config-yaml',
                                                        'constraints'],
                                           'type': 'object'},
                     'ApplicationDestroy': {'additionalProperties': False,
                                            'properties': {'application': {'type': 'string'}},
                                            'required': ['application'],
                                            'type': 'object'},
                     'ApplicationExpose': {'additionalProperties': False,
                                           'properties': {'application': {'type': 'string'}},
                                           'required': ['application'],
                                           'type': 'object'},
                     'ApplicationGet': {'additionalProperties': False,
                                        'properties': {'application': {'type': 'string'}},
                                        'required': ['application'],
                                        'type': 'object'},
                     'ApplicationGetResults': {'additionalProperties': False,
                                               'properties': {'application': {'type': 'string'},
                                                              'charm': {'type': 'string'},
                                                              'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                      'type': 'object'}},
                                                                         'type': 'object'},
                                                              'constraints': {'$ref': '#/definitions/Value'},
                                                              'series': {'type': 'string'}},
                                               'required': ['application',
                                                            'charm',
                                                            'config',
                                                            'constraints',
                                                            'series'],
                                               'type': 'object'},
                     'ApplicationMetricCredential': {'additionalProperties': False,
                                                     'properties': {'application': {'type': 'string'},
                                                                    'metrics-credentials': {'items': {'type': 'integer'},
                                                                                            'type': 'array'}},
                                                     'required': ['application',
                                                                  'metrics-credentials'],
                                                     'type': 'object'},
                     'ApplicationMetricCredentials': {'additionalProperties': False,
                                                      'properties': {'creds': {'items': {'$ref': '#/definitions/ApplicationMetricCredential'},
                                                                               'type': 'array'}},
                                                      'required': ['creds'],
                                                      'type': 'object'},
                     'ApplicationSet': {'additionalProperties': False,
                                        'properties': {'application': {'type': 'string'},
                                                       'options': {'patternProperties': {'.*': {'type': 'string'}},
                                                                   'type': 'object'}},
                                        'required': ['application', 'options'],
                                        'type': 'object'},
                     'ApplicationSetCharm': {'additionalProperties': False,
                                             'properties': {'application': {'type': 'string'},
                                                            'channel': {'type': 'string'},
                                                            'charm-url': {'type': 'string'},
                                                            'force-series': {'type': 'boolean'},
                                                            'force-units': {'type': 'boolean'},
                                                            'resource-ids': {'patternProperties': {'.*': {'type': 'string'}},
                                                                             'type': 'object'}},
                                             'required': ['application',
                                                          'charm-url',
                                                          'channel',
                                                          'force-units',
                                                          'force-series'],
                                             'type': 'object'},
                     'ApplicationUnexpose': {'additionalProperties': False,
                                             'properties': {'application': {'type': 'string'}},
                                             'required': ['application'],
                                             'type': 'object'},
                     'ApplicationUnset': {'additionalProperties': False,
                                          'properties': {'application': {'type': 'string'},
                                                         'options': {'items': {'type': 'string'},
                                                                     'type': 'array'}},
                                          'required': ['application', 'options'],
                                          'type': 'object'},
                     'ApplicationUpdate': {'additionalProperties': False,
                                           'properties': {'application': {'type': 'string'},
                                                          'charm-url': {'type': 'string'},
                                                          'constraints': {'$ref': '#/definitions/Value'},
                                                          'force-charm-url': {'type': 'boolean'},
                                                          'force-series': {'type': 'boolean'},
                                                          'min-units': {'type': 'integer'},
                                                          'settings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                       'type': 'object'},
                                                          'settings-yaml': {'type': 'string'}},
                                           'required': ['application',
                                                        'charm-url',
                                                        'force-charm-url',
                                                        'force-series',
                                                        'settings-yaml'],
                                           'type': 'object'},
                     'ApplicationsDeploy': {'additionalProperties': False,
                                            'properties': {'applications': {'items': {'$ref': '#/definitions/ApplicationDeploy'},
                                                                            'type': 'array'}},
                                            'required': ['applications'],
                                            'type': 'object'},
                     'CharmRelation': {'additionalProperties': False,
                                       'properties': {'interface': {'type': 'string'},
                                                      'limit': {'type': 'integer'},
                                                      'name': {'type': 'string'},
                                                      'optional': {'type': 'boolean'},
                                                      'role': {'type': 'string'},
                                                      'scope': {'type': 'string'}},
                                       'required': ['name',
                                                    'role',
                                                    'interface',
                                                    'optional',
                                                    'limit',
                                                    'scope'],
                                       'type': 'object'},
                     'Constraints': {'additionalProperties': False,
                                     'properties': {'Count': {'type': 'integer'},
                                                    'Pool': {'type': 'string'},
                                                    'Size': {'type': 'integer'}},
                                     'required': ['Pool', 'Size', 'Count'],
                                     'type': 'object'},
                     'DestroyApplicationUnits': {'additionalProperties': False,
                                                 'properties': {'unit-names': {'items': {'type': 'string'},
                                                                               'type': 'array'}},
                                                 'required': ['unit-names'],
                                                 'type': 'object'},
                     'DestroyRelation': {'additionalProperties': False,
                                         'properties': {'endpoints': {'items': {'type': 'string'},
                                                                      'type': 'array'}},
                                         'required': ['endpoints'],
                                         'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'GetApplicationConstraints': {'additionalProperties': False,
                                                   'properties': {'application': {'type': 'string'}},
                                                   'required': ['application'],
                                                   'type': 'object'},
                     'GetConstraintsResults': {'additionalProperties': False,
                                               'properties': {'constraints': {'$ref': '#/definitions/Value'}},
                                               'required': ['constraints'],
                                               'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'Placement': {'additionalProperties': False,
                                   'properties': {'directive': {'type': 'string'},
                                                  'scope': {'type': 'string'}},
                                   'required': ['scope', 'directive'],
                                   'type': 'object'},
                     'SetConstraints': {'additionalProperties': False,
                                        'properties': {'application': {'type': 'string'},
                                                       'constraints': {'$ref': '#/definitions/Value'}},
                                        'required': ['application', 'constraints'],
                                        'type': 'object'},
                     'StringResult': {'additionalProperties': False,
                                      'properties': {'error': {'$ref': '#/definitions/Error'},
                                                     'result': {'type': 'string'}},
                                      'required': ['result'],
                                      'type': 'object'},
                     'Value': {'additionalProperties': False,
                               'properties': {'arch': {'type': 'string'},
                                              'container': {'type': 'string'},
                                              'cpu-cores': {'type': 'integer'},
                                              'cpu-power': {'type': 'integer'},
                                              'instance-type': {'type': 'string'},
                                              'mem': {'type': 'integer'},
                                              'root-disk': {'type': 'integer'},
                                              'spaces': {'items': {'type': 'string'},
                                                         'type': 'array'},
                                              'tags': {'items': {'type': 'string'},
                                                       'type': 'array'},
                                              'virt-type': {'type': 'string'}},
                               'type': 'object'}},
     'properties': {'AddRelation': {'properties': {'Params': {'$ref': '#/definitions/AddRelation'},
                                                   'Result': {'$ref': '#/definitions/AddRelationResults'}},
                                    'type': 'object'},
                    'AddUnits': {'properties': {'Params': {'$ref': '#/definitions/AddApplicationUnits'},
                                                'Result': {'$ref': '#/definitions/AddApplicationUnitsResults'}},
                                 'type': 'object'},
                    'CharmRelations': {'properties': {'Params': {'$ref': '#/definitions/ApplicationCharmRelations'},
                                                      'Result': {'$ref': '#/definitions/ApplicationCharmRelationsResults'}},
                                       'type': 'object'},
                    'Deploy': {'properties': {'Params': {'$ref': '#/definitions/ApplicationsDeploy'},
                                              'Result': {'$ref': '#/definitions/ErrorResults'}},
                               'type': 'object'},
                    'Destroy': {'properties': {'Params': {'$ref': '#/definitions/ApplicationDestroy'}},
                                'type': 'object'},
                    'DestroyRelation': {'properties': {'Params': {'$ref': '#/definitions/DestroyRelation'}},
                                        'type': 'object'},
                    'DestroyUnits': {'properties': {'Params': {'$ref': '#/definitions/DestroyApplicationUnits'}},
                                     'type': 'object'},
                    'Expose': {'properties': {'Params': {'$ref': '#/definitions/ApplicationExpose'}},
                               'type': 'object'},
                    'Get': {'properties': {'Params': {'$ref': '#/definitions/ApplicationGet'},
                                           'Result': {'$ref': '#/definitions/ApplicationGetResults'}},
                            'type': 'object'},
                    'GetCharmURL': {'properties': {'Params': {'$ref': '#/definitions/ApplicationGet'},
                                                   'Result': {'$ref': '#/definitions/StringResult'}},
                                    'type': 'object'},
                    'GetConstraints': {'properties': {'Params': {'$ref': '#/definitions/GetApplicationConstraints'},
                                                      'Result': {'$ref': '#/definitions/GetConstraintsResults'}},
                                       'type': 'object'},
                    'Set': {'properties': {'Params': {'$ref': '#/definitions/ApplicationSet'}},
                            'type': 'object'},
                    'SetCharm': {'properties': {'Params': {'$ref': '#/definitions/ApplicationSetCharm'}},
                                 'type': 'object'},
                    'SetConstraints': {'properties': {'Params': {'$ref': '#/definitions/SetConstraints'}},
                                       'type': 'object'},
                    'SetMetricCredentials': {'properties': {'Params': {'$ref': '#/definitions/ApplicationMetricCredentials'},
                                                            'Result': {'$ref': '#/definitions/ErrorResults'}},
                                             'type': 'object'},
                    'Unexpose': {'properties': {'Params': {'$ref': '#/definitions/ApplicationUnexpose'}},
                                 'type': 'object'},
                    'Unset': {'properties': {'Params': {'$ref': '#/definitions/ApplicationUnset'}},
                              'type': 'object'},
                    'Update': {'properties': {'Params': {'$ref': '#/definitions/ApplicationUpdate'}},
                               'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(AddRelationResults)
    async def AddRelation(self, endpoints):
        '''
        endpoints : typing.Sequence<+T_co>[str]
        Returns -> typing.Mapping<~KT, +VT_co>[str, ~CharmRelation]<~CharmRelation>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='AddRelation', version=1, params=params)
        params['endpoints'] = endpoints
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(AddApplicationUnitsResults)
    async def AddUnits(self, application, num_units, placement):
        '''
        application : str
        num_units : int
        placement : typing.Sequence<+T_co>[~Placement]<~Placement>
        Returns -> typing.Sequence<+T_co>[str]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='AddUnits', version=1, params=params)
        params['application'] = application
        params['num-units'] = num_units
        params['placement'] = placement
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ApplicationCharmRelationsResults)
    async def CharmRelations(self, application):
        '''
        application : str
        Returns -> typing.Sequence<+T_co>[str]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='CharmRelations', version=1, params=params)
        params['application'] = application
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def Deploy(self, applications):
        '''
        applications : typing.Sequence<+T_co>[~ApplicationDeploy]<~ApplicationDeploy>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='Deploy', version=1, params=params)
        params['applications'] = applications
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Destroy(self, application):
        '''
        application : str
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='Destroy', version=1, params=params)
        params['application'] = application
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def DestroyRelation(self, endpoints):
        '''
        endpoints : typing.Sequence<+T_co>[str]
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='DestroyRelation', version=1, params=params)
        params['endpoints'] = endpoints
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def DestroyUnits(self, unit_names):
        '''
        unit_names : typing.Sequence<+T_co>[str]
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='DestroyUnits', version=1, params=params)
        params['unit-names'] = unit_names
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Expose(self, application):
        '''
        application : str
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='Expose', version=1, params=params)
        params['application'] = application
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ApplicationGetResults)
    async def Get(self, application):
        '''
        application : str
        Returns -> typing.Union[str, typing.Mapping<~KT, +VT_co>[str, typing.Any], _ForwardRef('Value')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='Get', version=1, params=params)
        params['application'] = application
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResult)
    async def GetCharmURL(self, application):
        '''
        application : str
        Returns -> typing.Union[_ForwardRef('Error'), str]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='GetCharmURL', version=1, params=params)
        params['application'] = application
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(GetConstraintsResults)
    async def GetConstraints(self, application):
        '''
        application : str
        Returns -> Value
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='GetConstraints', version=1, params=params)
        params['application'] = application
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Set(self, application, options):
        '''
        application : str
        options : typing.Mapping<~KT, +VT_co>[str, str]
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='Set', version=1, params=params)
        params['application'] = application
        params['options'] = options
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def SetCharm(self, application, channel, charm_url, force_series, force_units, resource_ids):
        '''
        application : str
        channel : str
        charm_url : str
        force_series : bool
        force_units : bool
        resource_ids : typing.Mapping<~KT, +VT_co>[str, str]
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='SetCharm', version=1, params=params)
        params['application'] = application
        params['channel'] = channel
        params['charm-url'] = charm_url
        params['force-series'] = force_series
        params['force-units'] = force_units
        params['resource-ids'] = resource_ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def SetConstraints(self, application, constraints):
        '''
        application : str
        constraints : Value
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='SetConstraints', version=1, params=params)
        params['application'] = application
        params['constraints'] = constraints
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetMetricCredentials(self, creds):
        '''
        creds : typing.Sequence<+T_co>[~ApplicationMetricCredential]<~ApplicationMetricCredential>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='SetMetricCredentials', version=1, params=params)
        params['creds'] = creds
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Unexpose(self, application):
        '''
        application : str
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='Unexpose', version=1, params=params)
        params['application'] = application
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Unset(self, application, options):
        '''
        application : str
        options : typing.Sequence<+T_co>[str]
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='Unset', version=1, params=params)
        params['application'] = application
        params['options'] = options
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Update(self, application, charm_url, constraints, force_charm_url, force_series, min_units, settings, settings_yaml):
        '''
        application : str
        charm_url : str
        constraints : Value
        force_charm_url : bool
        force_series : bool
        min_units : int
        settings : typing.Mapping<~KT, +VT_co>[str, str]
        settings_yaml : str
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Application', request='Update', version=1, params=params)
        params['application'] = application
        params['charm-url'] = charm_url
        params['constraints'] = constraints
        params['force-charm-url'] = force_charm_url
        params['force-series'] = force_series
        params['min-units'] = min_units
        params['settings'] = settings
        params['settings-yaml'] = settings_yaml
        reply = await self.rpc(msg)
        return reply


class ApplicationScalerFacade(Type):
    name = 'ApplicationScaler'
    version = 1
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'StringsWatchResult': {'additionalProperties': False,
                                            'properties': {'changes': {'items': {'type': 'string'},
                                                                       'type': 'array'},
                                                           'error': {'$ref': '#/definitions/Error'},
                                                           'watcher-id': {'type': 'string'}},
                                            'required': ['watcher-id'],
                                            'type': 'object'}},
     'properties': {'Rescale': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                               'Result': {'$ref': '#/definitions/ErrorResults'}},
                                'type': 'object'},
                    'Watch': {'properties': {'Result': {'$ref': '#/definitions/StringsWatchResult'}},
                              'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResults)
    async def Rescale(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ApplicationScaler', request='Rescale', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResult)
    async def Watch(self):
        '''

        Returns -> typing.Union[typing.Sequence<+T_co>[str], _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ApplicationScaler', request='Watch', version=1, params=params)

        reply = await self.rpc(msg)
        return reply


class BackupsFacade(Type):
    name = 'Backups'
    version = 1
    schema =     {'definitions': {'BackupsCreateArgs': {'additionalProperties': False,
                                           'properties': {'notes': {'type': 'string'}},
                                           'required': ['notes'],
                                           'type': 'object'},
                     'BackupsInfoArgs': {'additionalProperties': False,
                                         'properties': {'id': {'type': 'string'}},
                                         'required': ['id'],
                                         'type': 'object'},
                     'BackupsListArgs': {'additionalProperties': False,
                                         'type': 'object'},
                     'BackupsListResult': {'additionalProperties': False,
                                           'properties': {'list': {'items': {'$ref': '#/definitions/BackupsMetadataResult'},
                                                                   'type': 'array'}},
                                           'required': ['list'],
                                           'type': 'object'},
                     'BackupsMetadataResult': {'additionalProperties': False,
                                               'properties': {'ca-cert': {'type': 'string'},
                                                              'ca-private-key': {'type': 'string'},
                                                              'checksum': {'type': 'string'},
                                                              'checksum-format': {'type': 'string'},
                                                              'finished': {'format': 'date-time',
                                                                           'type': 'string'},
                                                              'hostname': {'type': 'string'},
                                                              'id': {'type': 'string'},
                                                              'machine': {'type': 'string'},
                                                              'model': {'type': 'string'},
                                                              'notes': {'type': 'string'},
                                                              'series': {'type': 'string'},
                                                              'size': {'type': 'integer'},
                                                              'started': {'format': 'date-time',
                                                                          'type': 'string'},
                                                              'stored': {'format': 'date-time',
                                                                         'type': 'string'},
                                                              'version': {'$ref': '#/definitions/Number'}},
                                               'required': ['id',
                                                            'checksum',
                                                            'checksum-format',
                                                            'size',
                                                            'stored',
                                                            'started',
                                                            'finished',
                                                            'notes',
                                                            'model',
                                                            'machine',
                                                            'hostname',
                                                            'version',
                                                            'series',
                                                            'ca-cert',
                                                            'ca-private-key'],
                                               'type': 'object'},
                     'BackupsRemoveArgs': {'additionalProperties': False,
                                           'properties': {'id': {'type': 'string'}},
                                           'required': ['id'],
                                           'type': 'object'},
                     'Number': {'additionalProperties': False,
                                'properties': {'Build': {'type': 'integer'},
                                               'Major': {'type': 'integer'},
                                               'Minor': {'type': 'integer'},
                                               'Patch': {'type': 'integer'},
                                               'Tag': {'type': 'string'}},
                                'required': ['Major',
                                             'Minor',
                                             'Tag',
                                             'Patch',
                                             'Build'],
                                'type': 'object'},
                     'RestoreArgs': {'additionalProperties': False,
                                     'properties': {'backup-id': {'type': 'string'}},
                                     'required': ['backup-id'],
                                     'type': 'object'}},
     'properties': {'Create': {'properties': {'Params': {'$ref': '#/definitions/BackupsCreateArgs'},
                                              'Result': {'$ref': '#/definitions/BackupsMetadataResult'}},
                               'type': 'object'},
                    'FinishRestore': {'type': 'object'},
                    'Info': {'properties': {'Params': {'$ref': '#/definitions/BackupsInfoArgs'},
                                            'Result': {'$ref': '#/definitions/BackupsMetadataResult'}},
                             'type': 'object'},
                    'List': {'properties': {'Params': {'$ref': '#/definitions/BackupsListArgs'},
                                            'Result': {'$ref': '#/definitions/BackupsListResult'}},
                             'type': 'object'},
                    'PrepareRestore': {'type': 'object'},
                    'Remove': {'properties': {'Params': {'$ref': '#/definitions/BackupsRemoveArgs'}},
                               'type': 'object'},
                    'Restore': {'properties': {'Params': {'$ref': '#/definitions/RestoreArgs'}},
                                'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(BackupsMetadataResult)
    async def Create(self, notes):
        '''
        notes : str
        Returns -> typing.Union[str, int, _ForwardRef('Number')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Backups', request='Create', version=1, params=params)
        params['notes'] = notes
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def FinishRestore(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Backups', request='FinishRestore', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(BackupsMetadataResult)
    async def Info(self, id_):
        '''
        id_ : str
        Returns -> typing.Union[str, int, _ForwardRef('Number')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Backups', request='Info', version=1, params=params)
        params['id'] = id_
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(BackupsListResult)
    async def List(self):
        '''

        Returns -> typing.Sequence<+T_co>[~BackupsMetadataResult]<~BackupsMetadataResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Backups', request='List', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def PrepareRestore(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Backups', request='PrepareRestore', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Remove(self, id_):
        '''
        id_ : str
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Backups', request='Remove', version=1, params=params)
        params['id'] = id_
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Restore(self, backup_id):
        '''
        backup_id : str
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Backups', request='Restore', version=1, params=params)
        params['backup-id'] = backup_id
        reply = await self.rpc(msg)
        return reply


class BlockFacade(Type):
    name = 'Block'
    version = 2
    schema =     {'definitions': {'Block': {'additionalProperties': False,
                               'properties': {'id': {'type': 'string'},
                                              'message': {'type': 'string'},
                                              'tag': {'type': 'string'},
                                              'type': {'type': 'string'}},
                               'required': ['id', 'tag', 'type'],
                               'type': 'object'},
                     'BlockResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'},
                                                    'result': {'$ref': '#/definitions/Block'}},
                                     'required': ['result'],
                                     'type': 'object'},
                     'BlockResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/BlockResult'},
                                                                 'type': 'array'}},
                                      'type': 'object'},
                     'BlockSwitchParams': {'additionalProperties': False,
                                           'properties': {'message': {'type': 'string'},
                                                          'type': {'type': 'string'}},
                                           'required': ['type'],
                                           'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'}},
     'properties': {'List': {'properties': {'Result': {'$ref': '#/definitions/BlockResults'}},
                             'type': 'object'},
                    'SwitchBlockOff': {'properties': {'Params': {'$ref': '#/definitions/BlockSwitchParams'},
                                                      'Result': {'$ref': '#/definitions/ErrorResult'}},
                                       'type': 'object'},
                    'SwitchBlockOn': {'properties': {'Params': {'$ref': '#/definitions/BlockSwitchParams'},
                                                     'Result': {'$ref': '#/definitions/ErrorResult'}},
                                      'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(BlockResults)
    async def List(self):
        '''

        Returns -> typing.Sequence<+T_co>[~BlockResult]<~BlockResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Block', request='List', version=2, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResult)
    async def SwitchBlockOff(self, message, type_):
        '''
        message : str
        type_ : str
        Returns -> Error
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Block', request='SwitchBlockOff', version=2, params=params)
        params['message'] = message
        params['type'] = type_
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResult)
    async def SwitchBlockOn(self, message, type_):
        '''
        message : str
        type_ : str
        Returns -> Error
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Block', request='SwitchBlockOn', version=2, params=params)
        params['message'] = message
        params['type'] = type_
        reply = await self.rpc(msg)
        return reply


class CharmRevisionUpdaterFacade(Type):
    name = 'CharmRevisionUpdater'
    version = 2
    schema =     {'definitions': {'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'}},
     'properties': {'UpdateLatestRevisions': {'properties': {'Result': {'$ref': '#/definitions/ErrorResult'}},
                                              'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResult)
    async def UpdateLatestRevisions(self):
        '''

        Returns -> Error
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='CharmRevisionUpdater', request='UpdateLatestRevisions', version=2, params=params)

        reply = await self.rpc(msg)
        return reply


class CharmsFacade(Type):
    name = 'Charms'
    version = 2
    schema =     {'definitions': {'CharmActionSpec': {'additionalProperties': False,
                                         'properties': {'description': {'type': 'string'},
                                                        'params': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                'type': 'object'}},
                                                                   'type': 'object'}},
                                         'required': ['description', 'params'],
                                         'type': 'object'},
                     'CharmActions': {'additionalProperties': False,
                                      'properties': {'specs': {'patternProperties': {'.*': {'$ref': '#/definitions/CharmActionSpec'}},
                                                               'type': 'object'}},
                                      'type': 'object'},
                     'CharmInfo': {'additionalProperties': False,
                                   'properties': {'actions': {'$ref': '#/definitions/CharmActions'},
                                                  'config': {'patternProperties': {'.*': {'$ref': '#/definitions/CharmOption'}},
                                                             'type': 'object'},
                                                  'meta': {'$ref': '#/definitions/CharmMeta'},
                                                  'metrics': {'$ref': '#/definitions/CharmMetrics'},
                                                  'revision': {'type': 'integer'},
                                                  'url': {'type': 'string'}},
                                   'required': ['revision', 'url', 'config'],
                                   'type': 'object'},
                     'CharmMeta': {'additionalProperties': False,
                                   'properties': {'categories': {'items': {'type': 'string'},
                                                                 'type': 'array'},
                                                  'description': {'type': 'string'},
                                                  'extra-bindings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                     'type': 'object'},
                                                  'min-juju-version': {'type': 'string'},
                                                  'name': {'type': 'string'},
                                                  'payload-classes': {'patternProperties': {'.*': {'$ref': '#/definitions/CharmPayloadClass'}},
                                                                      'type': 'object'},
                                                  'peers': {'patternProperties': {'.*': {'$ref': '#/definitions/CharmRelation'}},
                                                            'type': 'object'},
                                                  'provides': {'patternProperties': {'.*': {'$ref': '#/definitions/CharmRelation'}},
                                                               'type': 'object'},
                                                  'requires': {'patternProperties': {'.*': {'$ref': '#/definitions/CharmRelation'}},
                                                               'type': 'object'},
                                                  'resources': {'patternProperties': {'.*': {'$ref': '#/definitions/CharmResourceMeta'}},
                                                                'type': 'object'},
                                                  'series': {'items': {'type': 'string'},
                                                             'type': 'array'},
                                                  'storage': {'patternProperties': {'.*': {'$ref': '#/definitions/CharmStorage'}},
                                                              'type': 'object'},
                                                  'subordinate': {'type': 'boolean'},
                                                  'summary': {'type': 'string'},
                                                  'tags': {'items': {'type': 'string'},
                                                           'type': 'array'},
                                                  'terms': {'items': {'type': 'string'},
                                                            'type': 'array'}},
                                   'required': ['name',
                                                'summary',
                                                'description',
                                                'subordinate'],
                                   'type': 'object'},
                     'CharmMetric': {'additionalProperties': False,
                                     'properties': {'description': {'type': 'string'},
                                                    'type': {'type': 'string'}},
                                     'required': ['type', 'description'],
                                     'type': 'object'},
                     'CharmMetrics': {'additionalProperties': False,
                                      'properties': {'metrics': {'patternProperties': {'.*': {'$ref': '#/definitions/CharmMetric'}},
                                                                 'type': 'object'},
                                                     'plan': {'$ref': '#/definitions/CharmPlan'}},
                                      'required': ['metrics', 'plan'],
                                      'type': 'object'},
                     'CharmOption': {'additionalProperties': False,
                                     'properties': {'default': {'additionalProperties': True,
                                                                'type': 'object'},
                                                    'description': {'type': 'string'},
                                                    'type': {'type': 'string'}},
                                     'required': ['type'],
                                     'type': 'object'},
                     'CharmPayloadClass': {'additionalProperties': False,
                                           'properties': {'name': {'type': 'string'},
                                                          'type': {'type': 'string'}},
                                           'required': ['name', 'type'],
                                           'type': 'object'},
                     'CharmPlan': {'additionalProperties': False,
                                   'properties': {'required': {'type': 'boolean'}},
                                   'required': ['required'],
                                   'type': 'object'},
                     'CharmRelation': {'additionalProperties': False,
                                       'properties': {'interface': {'type': 'string'},
                                                      'limit': {'type': 'integer'},
                                                      'name': {'type': 'string'},
                                                      'optional': {'type': 'boolean'},
                                                      'role': {'type': 'string'},
                                                      'scope': {'type': 'string'}},
                                       'required': ['name',
                                                    'role',
                                                    'interface',
                                                    'optional',
                                                    'limit',
                                                    'scope'],
                                       'type': 'object'},
                     'CharmResourceMeta': {'additionalProperties': False,
                                           'properties': {'description': {'type': 'string'},
                                                          'name': {'type': 'string'},
                                                          'path': {'type': 'string'},
                                                          'type': {'type': 'string'}},
                                           'required': ['name',
                                                        'type',
                                                        'path',
                                                        'description'],
                                           'type': 'object'},
                     'CharmStorage': {'additionalProperties': False,
                                      'properties': {'count-max': {'type': 'integer'},
                                                     'count-min': {'type': 'integer'},
                                                     'description': {'type': 'string'},
                                                     'location': {'type': 'string'},
                                                     'minimum-size': {'type': 'integer'},
                                                     'name': {'type': 'string'},
                                                     'properties': {'items': {'type': 'string'},
                                                                    'type': 'array'},
                                                     'read-only': {'type': 'boolean'},
                                                     'shared': {'type': 'boolean'},
                                                     'type': {'type': 'string'}},
                                      'required': ['name',
                                                   'description',
                                                   'type',
                                                   'shared',
                                                   'read-only',
                                                   'count-min',
                                                   'count-max',
                                                   'minimum-size'],
                                      'type': 'object'},
                     'CharmURL': {'additionalProperties': False,
                                  'properties': {'url': {'type': 'string'}},
                                  'required': ['url'],
                                  'type': 'object'},
                     'CharmsList': {'additionalProperties': False,
                                    'properties': {'names': {'items': {'type': 'string'},
                                                             'type': 'array'}},
                                    'required': ['names'],
                                    'type': 'object'},
                     'CharmsListResult': {'additionalProperties': False,
                                          'properties': {'charm-urls': {'items': {'type': 'string'},
                                                                        'type': 'array'}},
                                          'required': ['charm-urls'],
                                          'type': 'object'},
                     'IsMeteredResult': {'additionalProperties': False,
                                         'properties': {'metered': {'type': 'boolean'}},
                                         'required': ['metered'],
                                         'type': 'object'}},
     'properties': {'CharmInfo': {'properties': {'Params': {'$ref': '#/definitions/CharmURL'},
                                                 'Result': {'$ref': '#/definitions/CharmInfo'}},
                                  'type': 'object'},
                    'IsMetered': {'properties': {'Params': {'$ref': '#/definitions/CharmURL'},
                                                 'Result': {'$ref': '#/definitions/IsMeteredResult'}},
                                  'type': 'object'},
                    'List': {'properties': {'Params': {'$ref': '#/definitions/CharmsList'},
                                            'Result': {'$ref': '#/definitions/CharmsListResult'}},
                             'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(CharmInfo)
    async def CharmInfo(self, url):
        '''
        url : str
        Returns -> typing.Union[_ForwardRef('CharmActions'), typing.Mapping<~KT, +VT_co>[str, ~CharmOption]<~CharmOption>, _ForwardRef('CharmMeta'), _ForwardRef('CharmMetrics'), int, str]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Charms', request='CharmInfo', version=2, params=params)
        params['url'] = url
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(IsMeteredResult)
    async def IsMetered(self, url):
        '''
        url : str
        Returns -> bool
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Charms', request='IsMetered', version=2, params=params)
        params['url'] = url
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(CharmsListResult)
    async def List(self, names):
        '''
        names : typing.Sequence<+T_co>[str]
        Returns -> typing.Sequence<+T_co>[str]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Charms', request='List', version=2, params=params)
        params['names'] = names
        reply = await self.rpc(msg)
        return reply


class CleanerFacade(Type):
    name = 'Cleaner'
    version = 2
    schema =     {'definitions': {'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'}},
     'properties': {'Cleanup': {'type': 'object'},
                    'WatchCleanups': {'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResult'}},
                                      'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(None)
    async def Cleanup(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Cleaner', request='Cleanup', version=2, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResult)
    async def WatchCleanups(self):
        '''

        Returns -> typing.Union[str, _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Cleaner', request='WatchCleanups', version=2, params=params)

        reply = await self.rpc(msg)
        return reply


class ClientFacade(Type):
    name = 'Client'
    version = 1
    schema =     {'definitions': {'APIHostPortsResult': {'additionalProperties': False,
                                            'properties': {'servers': {'items': {'items': {'$ref': '#/definitions/HostPort'},
                                                                                 'type': 'array'},
                                                                       'type': 'array'}},
                                            'required': ['servers'],
                                            'type': 'object'},
                     'AddCharm': {'additionalProperties': False,
                                  'properties': {'channel': {'type': 'string'},
                                                 'url': {'type': 'string'}},
                                  'required': ['url', 'channel'],
                                  'type': 'object'},
                     'AddCharmWithAuthorization': {'additionalProperties': False,
                                                   'properties': {'channel': {'type': 'string'},
                                                                  'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                                  'url': {'type': 'string'}},
                                                   'required': ['url',
                                                                'channel',
                                                                'macaroon'],
                                                   'type': 'object'},
                     'AddMachineParams': {'additionalProperties': False,
                                          'properties': {'addresses': {'items': {'$ref': '#/definitions/Address'},
                                                                       'type': 'array'},
                                                         'constraints': {'$ref': '#/definitions/Value'},
                                                         'container-type': {'type': 'string'},
                                                         'disks': {'items': {'$ref': '#/definitions/Constraints'},
                                                                   'type': 'array'},
                                                         'hardware-characteristics': {'$ref': '#/definitions/HardwareCharacteristics'},
                                                         'instance-id': {'type': 'string'},
                                                         'jobs': {'items': {'type': 'string'},
                                                                  'type': 'array'},
                                                         'nonce': {'type': 'string'},
                                                         'parent-id': {'type': 'string'},
                                                         'placement': {'$ref': '#/definitions/Placement'},
                                                         'series': {'type': 'string'}},
                                          'required': ['series',
                                                       'constraints',
                                                       'jobs',
                                                       'parent-id',
                                                       'container-type',
                                                       'instance-id',
                                                       'nonce',
                                                       'hardware-characteristics',
                                                       'addresses'],
                                          'type': 'object'},
                     'AddMachines': {'additionalProperties': False,
                                     'properties': {'params': {'items': {'$ref': '#/definitions/AddMachineParams'},
                                                               'type': 'array'}},
                                     'required': ['params'],
                                     'type': 'object'},
                     'AddMachinesResult': {'additionalProperties': False,
                                           'properties': {'error': {'$ref': '#/definitions/Error'},
                                                          'machine': {'type': 'string'}},
                                           'required': ['machine'],
                                           'type': 'object'},
                     'AddMachinesResults': {'additionalProperties': False,
                                            'properties': {'machines': {'items': {'$ref': '#/definitions/AddMachinesResult'},
                                                                        'type': 'array'}},
                                            'required': ['machines'],
                                            'type': 'object'},
                     'Address': {'additionalProperties': False,
                                 'properties': {'scope': {'type': 'string'},
                                                'space-name': {'type': 'string'},
                                                'type': {'type': 'string'},
                                                'value': {'type': 'string'}},
                                 'required': ['value', 'type', 'scope'],
                                 'type': 'object'},
                     'AgentVersionResult': {'additionalProperties': False,
                                            'properties': {'version': {'$ref': '#/definitions/Number'}},
                                            'required': ['version'],
                                            'type': 'object'},
                     'AllWatcherId': {'additionalProperties': False,
                                      'properties': {'watcher-id': {'type': 'string'}},
                                      'required': ['watcher-id'],
                                      'type': 'object'},
                     'ApplicationStatus': {'additionalProperties': False,
                                           'properties': {'can-upgrade-to': {'type': 'string'},
                                                          'charm': {'type': 'string'},
                                                          'err': {'additionalProperties': True,
                                                                  'type': 'object'},
                                                          'exposed': {'type': 'boolean'},
                                                          'life': {'type': 'string'},
                                                          'meter-statuses': {'patternProperties': {'.*': {'$ref': '#/definitions/MeterStatus'}},
                                                                             'type': 'object'},
                                                          'relations': {'patternProperties': {'.*': {'items': {'type': 'string'},
                                                                                                     'type': 'array'}},
                                                                        'type': 'object'},
                                                          'series': {'type': 'string'},
                                                          'status': {'$ref': '#/definitions/DetailedStatus'},
                                                          'subordinate-to': {'items': {'type': 'string'},
                                                                             'type': 'array'},
                                                          'units': {'patternProperties': {'.*': {'$ref': '#/definitions/UnitStatus'}},
                                                                    'type': 'object'},
                                                          'workload-version': {'type': 'string'}},
                                           'required': ['charm',
                                                        'series',
                                                        'exposed',
                                                        'life',
                                                        'relations',
                                                        'can-upgrade-to',
                                                        'subordinate-to',
                                                        'units',
                                                        'meter-statuses',
                                                        'status',
                                                        'workload-version'],
                                           'type': 'object'},
                     'Binary': {'additionalProperties': False,
                                'properties': {'Arch': {'type': 'string'},
                                               'Number': {'$ref': '#/definitions/Number'},
                                               'Series': {'type': 'string'}},
                                'required': ['Number', 'Series', 'Arch'],
                                'type': 'object'},
                     'BundleChangesChange': {'additionalProperties': False,
                                             'properties': {'args': {'items': {'additionalProperties': True,
                                                                               'type': 'object'},
                                                                     'type': 'array'},
                                                            'id': {'type': 'string'},
                                                            'method': {'type': 'string'},
                                                            'requires': {'items': {'type': 'string'},
                                                                         'type': 'array'}},
                                             'required': ['id',
                                                          'method',
                                                          'args',
                                                          'requires'],
                                             'type': 'object'},
                     'ConfigValue': {'additionalProperties': False,
                                     'properties': {'source': {'type': 'string'},
                                                    'value': {'additionalProperties': True,
                                                              'type': 'object'}},
                                     'required': ['value', 'source'],
                                     'type': 'object'},
                     'Constraints': {'additionalProperties': False,
                                     'properties': {'Count': {'type': 'integer'},
                                                    'Pool': {'type': 'string'},
                                                    'Size': {'type': 'integer'}},
                                     'required': ['Pool', 'Size', 'Count'],
                                     'type': 'object'},
                     'DestroyMachines': {'additionalProperties': False,
                                         'properties': {'force': {'type': 'boolean'},
                                                        'machine-names': {'items': {'type': 'string'},
                                                                          'type': 'array'}},
                                         'required': ['machine-names', 'force'],
                                         'type': 'object'},
                     'DetailedStatus': {'additionalProperties': False,
                                        'properties': {'data': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                             'type': 'object'}},
                                                                'type': 'object'},
                                                       'err': {'additionalProperties': True,
                                                               'type': 'object'},
                                                       'info': {'type': 'string'},
                                                       'kind': {'type': 'string'},
                                                       'life': {'type': 'string'},
                                                       'since': {'format': 'date-time',
                                                                 'type': 'string'},
                                                       'status': {'type': 'string'},
                                                       'version': {'type': 'string'}},
                                        'required': ['status',
                                                     'info',
                                                     'data',
                                                     'since',
                                                     'kind',
                                                     'version',
                                                     'life'],
                                        'type': 'object'},
                     'EndpointStatus': {'additionalProperties': False,
                                        'properties': {'application': {'type': 'string'},
                                                       'name': {'type': 'string'},
                                                       'role': {'type': 'string'},
                                                       'subordinate': {'type': 'boolean'}},
                                        'required': ['application',
                                                     'name',
                                                     'role',
                                                     'subordinate'],
                                        'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'EntityStatus': {'additionalProperties': False,
                                      'properties': {'data': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                           'type': 'object'}},
                                                              'type': 'object'},
                                                     'info': {'type': 'string'},
                                                     'since': {'format': 'date-time',
                                                               'type': 'string'},
                                                     'status': {'type': 'string'}},
                                      'required': ['status', 'info', 'since'],
                                      'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'FindToolsParams': {'additionalProperties': False,
                                         'properties': {'arch': {'type': 'string'},
                                                        'major': {'type': 'integer'},
                                                        'minor': {'type': 'integer'},
                                                        'number': {'$ref': '#/definitions/Number'},
                                                        'series': {'type': 'string'}},
                                         'required': ['number',
                                                      'major',
                                                      'minor',
                                                      'arch',
                                                      'series'],
                                         'type': 'object'},
                     'FindToolsResult': {'additionalProperties': False,
                                         'properties': {'error': {'$ref': '#/definitions/Error'},
                                                        'list': {'items': {'$ref': '#/definitions/Tools'},
                                                                 'type': 'array'}},
                                         'required': ['list'],
                                         'type': 'object'},
                     'FullStatus': {'additionalProperties': False,
                                    'properties': {'applications': {'patternProperties': {'.*': {'$ref': '#/definitions/ApplicationStatus'}},
                                                                    'type': 'object'},
                                                   'machines': {'patternProperties': {'.*': {'$ref': '#/definitions/MachineStatus'}},
                                                                'type': 'object'},
                                                   'model': {'$ref': '#/definitions/ModelStatusInfo'},
                                                   'relations': {'items': {'$ref': '#/definitions/RelationStatus'},
                                                                 'type': 'array'}},
                                    'required': ['model',
                                                 'machines',
                                                 'applications',
                                                 'relations'],
                                    'type': 'object'},
                     'GetBundleChangesParams': {'additionalProperties': False,
                                                'properties': {'yaml': {'type': 'string'}},
                                                'required': ['yaml'],
                                                'type': 'object'},
                     'GetBundleChangesResults': {'additionalProperties': False,
                                                 'properties': {'changes': {'items': {'$ref': '#/definitions/BundleChangesChange'},
                                                                            'type': 'array'},
                                                                'errors': {'items': {'type': 'string'},
                                                                           'type': 'array'}},
                                                 'type': 'object'},
                     'GetConstraintsResults': {'additionalProperties': False,
                                               'properties': {'constraints': {'$ref': '#/definitions/Value'}},
                                               'required': ['constraints'],
                                               'type': 'object'},
                     'HardwareCharacteristics': {'additionalProperties': False,
                                                 'properties': {'arch': {'type': 'string'},
                                                                'availability-zone': {'type': 'string'},
                                                                'cpu-cores': {'type': 'integer'},
                                                                'cpu-power': {'type': 'integer'},
                                                                'mem': {'type': 'integer'},
                                                                'root-disk': {'type': 'integer'},
                                                                'tags': {'items': {'type': 'string'},
                                                                         'type': 'array'}},
                                                 'type': 'object'},
                     'History': {'additionalProperties': False,
                                 'properties': {'error': {'$ref': '#/definitions/Error'},
                                                'statuses': {'items': {'$ref': '#/definitions/DetailedStatus'},
                                                             'type': 'array'}},
                                 'required': ['statuses'],
                                 'type': 'object'},
                     'HostPort': {'additionalProperties': False,
                                  'properties': {'Address': {'$ref': '#/definitions/Address'},
                                                 'port': {'type': 'integer'}},
                                  'required': ['Address', 'port'],
                                  'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MachineHardware': {'additionalProperties': False,
                                         'properties': {'arch': {'type': 'string'},
                                                        'availability-zone': {'type': 'string'},
                                                        'cores': {'type': 'integer'},
                                                        'cpu-power': {'type': 'integer'},
                                                        'mem': {'type': 'integer'},
                                                        'root-disk': {'type': 'integer'},
                                                        'tags': {'items': {'type': 'string'},
                                                                 'type': 'array'}},
                                         'type': 'object'},
                     'MachineStatus': {'additionalProperties': False,
                                       'properties': {'agent-status': {'$ref': '#/definitions/DetailedStatus'},
                                                      'containers': {'patternProperties': {'.*': {'$ref': '#/definitions/MachineStatus'}},
                                                                     'type': 'object'},
                                                      'dns-name': {'type': 'string'},
                                                      'hardware': {'type': 'string'},
                                                      'has-vote': {'type': 'boolean'},
                                                      'id': {'type': 'string'},
                                                      'instance-id': {'type': 'string'},
                                                      'instance-status': {'$ref': '#/definitions/DetailedStatus'},
                                                      'jobs': {'items': {'type': 'string'},
                                                               'type': 'array'},
                                                      'series': {'type': 'string'},
                                                      'wants-vote': {'type': 'boolean'}},
                                       'required': ['agent-status',
                                                    'instance-status',
                                                    'dns-name',
                                                    'instance-id',
                                                    'series',
                                                    'id',
                                                    'containers',
                                                    'hardware',
                                                    'jobs',
                                                    'has-vote',
                                                    'wants-vote'],
                                       'type': 'object'},
                     'MeterStatus': {'additionalProperties': False,
                                     'properties': {'color': {'type': 'string'},
                                                    'message': {'type': 'string'}},
                                     'required': ['color', 'message'],
                                     'type': 'object'},
                     'ModelConfigResults': {'additionalProperties': False,
                                            'properties': {'config': {'patternProperties': {'.*': {'$ref': '#/definitions/ConfigValue'}},
                                                                      'type': 'object'}},
                                            'required': ['config'],
                                            'type': 'object'},
                     'ModelDefaultValues': {'additionalProperties': False,
                                            'properties': {'cloud-region': {'type': 'string'},
                                                           'cloud-tag': {'type': 'string'},
                                                           'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                   'type': 'object'}},
                                                                      'type': 'object'}},
                                            'required': ['config'],
                                            'type': 'object'},
                     'ModelDefaults': {'additionalProperties': False,
                                       'properties': {'controller': {'additionalProperties': True,
                                                                     'type': 'object'},
                                                      'default': {'additionalProperties': True,
                                                                  'type': 'object'},
                                                      'regions': {'items': {'$ref': '#/definitions/RegionDefaults'},
                                                                  'type': 'array'}},
                                       'type': 'object'},
                     'ModelDefaultsResult': {'additionalProperties': False,
                                             'properties': {'config': {'patternProperties': {'.*': {'$ref': '#/definitions/ModelDefaults'}},
                                                                       'type': 'object'}},
                                             'required': ['config'],
                                             'type': 'object'},
                     'ModelInfo': {'additionalProperties': False,
                                   'properties': {'cloud': {'type': 'string'},
                                                  'cloud-credential-tag': {'type': 'string'},
                                                  'cloud-region': {'type': 'string'},
                                                  'controller-uuid': {'type': 'string'},
                                                  'default-series': {'type': 'string'},
                                                  'life': {'type': 'string'},
                                                  'machines': {'items': {'$ref': '#/definitions/ModelMachineInfo'},
                                                               'type': 'array'},
                                                  'name': {'type': 'string'},
                                                  'owner-tag': {'type': 'string'},
                                                  'provider-type': {'type': 'string'},
                                                  'status': {'$ref': '#/definitions/EntityStatus'},
                                                  'users': {'items': {'$ref': '#/definitions/ModelUserInfo'},
                                                            'type': 'array'},
                                                  'uuid': {'type': 'string'}},
                                   'required': ['name',
                                                'uuid',
                                                'controller-uuid',
                                                'provider-type',
                                                'default-series',
                                                'cloud',
                                                'owner-tag',
                                                'life',
                                                'status',
                                                'users',
                                                'machines'],
                                   'type': 'object'},
                     'ModelMachineInfo': {'additionalProperties': False,
                                          'properties': {'hardware': {'$ref': '#/definitions/MachineHardware'},
                                                         'id': {'type': 'string'}},
                                          'required': ['id'],
                                          'type': 'object'},
                     'ModelSet': {'additionalProperties': False,
                                  'properties': {'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                         'type': 'object'}},
                                                            'type': 'object'}},
                                  'required': ['config'],
                                  'type': 'object'},
                     'ModelStatusInfo': {'additionalProperties': False,
                                         'properties': {'available-version': {'type': 'string'},
                                                        'cloud': {'type': 'string'},
                                                        'migration': {'type': 'string'},
                                                        'name': {'type': 'string'},
                                                        'region': {'type': 'string'},
                                                        'version': {'type': 'string'}},
                                         'required': ['name',
                                                      'cloud',
                                                      'version',
                                                      'available-version'],
                                         'type': 'object'},
                     'ModelUnset': {'additionalProperties': False,
                                    'properties': {'keys': {'items': {'type': 'string'},
                                                            'type': 'array'}},
                                    'required': ['keys'],
                                    'type': 'object'},
                     'ModelUnsetKeys': {'additionalProperties': False,
                                        'properties': {'cloud-region': {'type': 'string'},
                                                       'cloud-tag': {'type': 'string'},
                                                       'keys': {'items': {'type': 'string'},
                                                                'type': 'array'}},
                                        'required': ['keys'],
                                        'type': 'object'},
                     'ModelUserInfo': {'additionalProperties': False,
                                       'properties': {'access': {'type': 'string'},
                                                      'display-name': {'type': 'string'},
                                                      'last-connection': {'format': 'date-time',
                                                                          'type': 'string'},
                                                      'user': {'type': 'string'}},
                                       'required': ['user',
                                                    'display-name',
                                                    'last-connection',
                                                    'access'],
                                       'type': 'object'},
                     'ModelUserInfoResult': {'additionalProperties': False,
                                             'properties': {'error': {'$ref': '#/definitions/Error'},
                                                            'result': {'$ref': '#/definitions/ModelUserInfo'}},
                                             'type': 'object'},
                     'ModelUserInfoResults': {'additionalProperties': False,
                                              'properties': {'results': {'items': {'$ref': '#/definitions/ModelUserInfoResult'},
                                                                         'type': 'array'}},
                                              'required': ['results'],
                                              'type': 'object'},
                     'Number': {'additionalProperties': False,
                                'properties': {'Build': {'type': 'integer'},
                                               'Major': {'type': 'integer'},
                                               'Minor': {'type': 'integer'},
                                               'Patch': {'type': 'integer'},
                                               'Tag': {'type': 'string'}},
                                'required': ['Major',
                                             'Minor',
                                             'Tag',
                                             'Patch',
                                             'Build'],
                                'type': 'object'},
                     'Placement': {'additionalProperties': False,
                                   'properties': {'directive': {'type': 'string'},
                                                  'scope': {'type': 'string'}},
                                   'required': ['scope', 'directive'],
                                   'type': 'object'},
                     'PrivateAddress': {'additionalProperties': False,
                                        'properties': {'target': {'type': 'string'}},
                                        'required': ['target'],
                                        'type': 'object'},
                     'PrivateAddressResults': {'additionalProperties': False,
                                               'properties': {'private-address': {'type': 'string'}},
                                               'required': ['private-address'],
                                               'type': 'object'},
                     'ProvisioningScriptParams': {'additionalProperties': False,
                                                  'properties': {'data-dir': {'type': 'string'},
                                                                 'disable-package-commands': {'type': 'boolean'},
                                                                 'machine-id': {'type': 'string'},
                                                                 'nonce': {'type': 'string'}},
                                                  'required': ['machine-id',
                                                               'nonce',
                                                               'data-dir',
                                                               'disable-package-commands'],
                                                  'type': 'object'},
                     'ProvisioningScriptResult': {'additionalProperties': False,
                                                  'properties': {'script': {'type': 'string'}},
                                                  'required': ['script'],
                                                  'type': 'object'},
                     'PublicAddress': {'additionalProperties': False,
                                       'properties': {'target': {'type': 'string'}},
                                       'required': ['target'],
                                       'type': 'object'},
                     'PublicAddressResults': {'additionalProperties': False,
                                              'properties': {'public-address': {'type': 'string'}},
                                              'required': ['public-address'],
                                              'type': 'object'},
                     'RegionDefaults': {'additionalProperties': False,
                                        'properties': {'region-name': {'type': 'string'},
                                                       'value': {'additionalProperties': True,
                                                                 'type': 'object'}},
                                        'required': ['region-name', 'value'],
                                        'type': 'object'},
                     'RelationStatus': {'additionalProperties': False,
                                        'properties': {'endpoints': {'items': {'$ref': '#/definitions/EndpointStatus'},
                                                                     'type': 'array'},
                                                       'id': {'type': 'integer'},
                                                       'interface': {'type': 'string'},
                                                       'key': {'type': 'string'},
                                                       'scope': {'type': 'string'}},
                                        'required': ['id',
                                                     'key',
                                                     'interface',
                                                     'scope',
                                                     'endpoints'],
                                        'type': 'object'},
                     'ResolveCharmResult': {'additionalProperties': False,
                                            'properties': {'error': {'type': 'string'},
                                                           'url': {'type': 'string'}},
                                            'type': 'object'},
                     'ResolveCharmResults': {'additionalProperties': False,
                                             'properties': {'urls': {'items': {'$ref': '#/definitions/ResolveCharmResult'},
                                                                     'type': 'array'}},
                                             'required': ['urls'],
                                             'type': 'object'},
                     'ResolveCharms': {'additionalProperties': False,
                                       'properties': {'references': {'items': {'type': 'string'},
                                                                     'type': 'array'}},
                                       'required': ['references'],
                                       'type': 'object'},
                     'Resolved': {'additionalProperties': False,
                                  'properties': {'retry': {'type': 'boolean'},
                                                 'unit-name': {'type': 'string'}},
                                  'required': ['unit-name', 'retry'],
                                  'type': 'object'},
                     'SetConstraints': {'additionalProperties': False,
                                        'properties': {'application': {'type': 'string'},
                                                       'constraints': {'$ref': '#/definitions/Value'}},
                                        'required': ['application', 'constraints'],
                                        'type': 'object'},
                     'SetModelAgentVersion': {'additionalProperties': False,
                                              'properties': {'version': {'$ref': '#/definitions/Number'}},
                                              'required': ['version'],
                                              'type': 'object'},
                     'SetModelDefaults': {'additionalProperties': False,
                                          'properties': {'config': {'items': {'$ref': '#/definitions/ModelDefaultValues'},
                                                                    'type': 'array'}},
                                          'required': ['config'],
                                          'type': 'object'},
                     'StatusHistoryFilter': {'additionalProperties': False,
                                             'properties': {'date': {'format': 'date-time',
                                                                     'type': 'string'},
                                                            'delta': {'type': 'integer'},
                                                            'size': {'type': 'integer'}},
                                             'required': ['size', 'date', 'delta'],
                                             'type': 'object'},
                     'StatusHistoryRequest': {'additionalProperties': False,
                                              'properties': {'filter': {'$ref': '#/definitions/StatusHistoryFilter'},
                                                             'historyKind': {'type': 'string'},
                                                             'size': {'type': 'integer'},
                                                             'tag': {'type': 'string'}},
                                              'required': ['historyKind',
                                                           'size',
                                                           'filter',
                                                           'tag'],
                                              'type': 'object'},
                     'StatusHistoryRequests': {'additionalProperties': False,
                                               'properties': {'requests': {'items': {'$ref': '#/definitions/StatusHistoryRequest'},
                                                                           'type': 'array'}},
                                               'required': ['requests'],
                                               'type': 'object'},
                     'StatusHistoryResult': {'additionalProperties': False,
                                             'properties': {'error': {'$ref': '#/definitions/Error'},
                                                            'history': {'$ref': '#/definitions/History'}},
                                             'required': ['history'],
                                             'type': 'object'},
                     'StatusHistoryResults': {'additionalProperties': False,
                                              'properties': {'results': {'items': {'$ref': '#/definitions/StatusHistoryResult'},
                                                                         'type': 'array'}},
                                              'required': ['results'],
                                              'type': 'object'},
                     'StatusParams': {'additionalProperties': False,
                                      'properties': {'patterns': {'items': {'type': 'string'},
                                                                  'type': 'array'}},
                                      'required': ['patterns'],
                                      'type': 'object'},
                     'Tools': {'additionalProperties': False,
                               'properties': {'sha256': {'type': 'string'},
                                              'size': {'type': 'integer'},
                                              'url': {'type': 'string'},
                                              'version': {'$ref': '#/definitions/Binary'}},
                               'required': ['version', 'url', 'size'],
                               'type': 'object'},
                     'UnitStatus': {'additionalProperties': False,
                                    'properties': {'agent-status': {'$ref': '#/definitions/DetailedStatus'},
                                                   'charm': {'type': 'string'},
                                                   'machine': {'type': 'string'},
                                                   'opened-ports': {'items': {'type': 'string'},
                                                                    'type': 'array'},
                                                   'public-address': {'type': 'string'},
                                                   'subordinates': {'patternProperties': {'.*': {'$ref': '#/definitions/UnitStatus'}},
                                                                    'type': 'object'},
                                                   'workload-status': {'$ref': '#/definitions/DetailedStatus'},
                                                   'workload-version': {'type': 'string'}},
                                    'required': ['agent-status',
                                                 'workload-status',
                                                 'workload-version',
                                                 'machine',
                                                 'opened-ports',
                                                 'public-address',
                                                 'charm',
                                                 'subordinates'],
                                    'type': 'object'},
                     'UnsetModelDefaults': {'additionalProperties': False,
                                            'properties': {'keys': {'items': {'$ref': '#/definitions/ModelUnsetKeys'},
                                                                    'type': 'array'}},
                                            'required': ['keys'],
                                            'type': 'object'},
                     'Value': {'additionalProperties': False,
                               'properties': {'arch': {'type': 'string'},
                                              'container': {'type': 'string'},
                                              'cpu-cores': {'type': 'integer'},
                                              'cpu-power': {'type': 'integer'},
                                              'instance-type': {'type': 'string'},
                                              'mem': {'type': 'integer'},
                                              'root-disk': {'type': 'integer'},
                                              'spaces': {'items': {'type': 'string'},
                                                         'type': 'array'},
                                              'tags': {'items': {'type': 'string'},
                                                       'type': 'array'},
                                              'virt-type': {'type': 'string'}},
                               'type': 'object'}},
     'properties': {'APIHostPorts': {'properties': {'Result': {'$ref': '#/definitions/APIHostPortsResult'}},
                                     'type': 'object'},
                    'AbortCurrentUpgrade': {'type': 'object'},
                    'AddCharm': {'properties': {'Params': {'$ref': '#/definitions/AddCharm'}},
                                 'type': 'object'},
                    'AddCharmWithAuthorization': {'properties': {'Params': {'$ref': '#/definitions/AddCharmWithAuthorization'}},
                                                  'type': 'object'},
                    'AddMachines': {'properties': {'Params': {'$ref': '#/definitions/AddMachines'},
                                                   'Result': {'$ref': '#/definitions/AddMachinesResults'}},
                                    'type': 'object'},
                    'AddMachinesV2': {'properties': {'Params': {'$ref': '#/definitions/AddMachines'},
                                                     'Result': {'$ref': '#/definitions/AddMachinesResults'}},
                                      'type': 'object'},
                    'AgentVersion': {'properties': {'Result': {'$ref': '#/definitions/AgentVersionResult'}},
                                     'type': 'object'},
                    'DestroyMachines': {'properties': {'Params': {'$ref': '#/definitions/DestroyMachines'}},
                                        'type': 'object'},
                    'FindTools': {'properties': {'Params': {'$ref': '#/definitions/FindToolsParams'},
                                                 'Result': {'$ref': '#/definitions/FindToolsResult'}},
                                  'type': 'object'},
                    'FullStatus': {'properties': {'Params': {'$ref': '#/definitions/StatusParams'},
                                                  'Result': {'$ref': '#/definitions/FullStatus'}},
                                   'type': 'object'},
                    'GetBundleChanges': {'properties': {'Params': {'$ref': '#/definitions/GetBundleChangesParams'},
                                                        'Result': {'$ref': '#/definitions/GetBundleChangesResults'}},
                                         'type': 'object'},
                    'GetModelConstraints': {'properties': {'Result': {'$ref': '#/definitions/GetConstraintsResults'}},
                                            'type': 'object'},
                    'InjectMachines': {'properties': {'Params': {'$ref': '#/definitions/AddMachines'},
                                                      'Result': {'$ref': '#/definitions/AddMachinesResults'}},
                                       'type': 'object'},
                    'ModelDefaults': {'properties': {'Result': {'$ref': '#/definitions/ModelDefaultsResult'}},
                                      'type': 'object'},
                    'ModelGet': {'properties': {'Result': {'$ref': '#/definitions/ModelConfigResults'}},
                                 'type': 'object'},
                    'ModelInfo': {'properties': {'Result': {'$ref': '#/definitions/ModelInfo'}},
                                  'type': 'object'},
                    'ModelSet': {'properties': {'Params': {'$ref': '#/definitions/ModelSet'}},
                                 'type': 'object'},
                    'ModelUnset': {'properties': {'Params': {'$ref': '#/definitions/ModelUnset'}},
                                   'type': 'object'},
                    'ModelUserInfo': {'properties': {'Result': {'$ref': '#/definitions/ModelUserInfoResults'}},
                                      'type': 'object'},
                    'PrivateAddress': {'properties': {'Params': {'$ref': '#/definitions/PrivateAddress'},
                                                      'Result': {'$ref': '#/definitions/PrivateAddressResults'}},
                                       'type': 'object'},
                    'ProvisioningScript': {'properties': {'Params': {'$ref': '#/definitions/ProvisioningScriptParams'},
                                                          'Result': {'$ref': '#/definitions/ProvisioningScriptResult'}},
                                           'type': 'object'},
                    'PublicAddress': {'properties': {'Params': {'$ref': '#/definitions/PublicAddress'},
                                                     'Result': {'$ref': '#/definitions/PublicAddressResults'}},
                                      'type': 'object'},
                    'ResolveCharms': {'properties': {'Params': {'$ref': '#/definitions/ResolveCharms'},
                                                     'Result': {'$ref': '#/definitions/ResolveCharmResults'}},
                                      'type': 'object'},
                    'Resolved': {'properties': {'Params': {'$ref': '#/definitions/Resolved'}},
                                 'type': 'object'},
                    'RetryProvisioning': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                         'Result': {'$ref': '#/definitions/ErrorResults'}},
                                          'type': 'object'},
                    'SetModelAgentVersion': {'properties': {'Params': {'$ref': '#/definitions/SetModelAgentVersion'}},
                                             'type': 'object'},
                    'SetModelConstraints': {'properties': {'Params': {'$ref': '#/definitions/SetConstraints'}},
                                            'type': 'object'},
                    'SetModelDefaults': {'properties': {'Params': {'$ref': '#/definitions/SetModelDefaults'},
                                                        'Result': {'$ref': '#/definitions/ErrorResults'}},
                                         'type': 'object'},
                    'StatusHistory': {'properties': {'Params': {'$ref': '#/definitions/StatusHistoryRequests'},
                                                     'Result': {'$ref': '#/definitions/StatusHistoryResults'}},
                                      'type': 'object'},
                    'UnsetModelDefaults': {'properties': {'Params': {'$ref': '#/definitions/UnsetModelDefaults'},
                                                          'Result': {'$ref': '#/definitions/ErrorResults'}},
                                           'type': 'object'},
                    'WatchAll': {'properties': {'Result': {'$ref': '#/definitions/AllWatcherId'}},
                                 'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(APIHostPortsResult)
    async def APIHostPorts(self):
        '''

        Returns -> typing.Sequence<+T_co>[~HostPort]<~HostPort>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='APIHostPorts', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def AbortCurrentUpgrade(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='AbortCurrentUpgrade', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def AddCharm(self, channel, url):
        '''
        channel : str
        url : str
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='AddCharm', version=1, params=params)
        params['channel'] = channel
        params['url'] = url
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def AddCharmWithAuthorization(self, channel, macaroon, url):
        '''
        channel : str
        macaroon : Macaroon
        url : str
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='AddCharmWithAuthorization', version=1, params=params)
        params['channel'] = channel
        params['macaroon'] = macaroon
        params['url'] = url
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(AddMachinesResults)
    async def AddMachines(self, params):
        '''
        params : typing.Sequence<+T_co>[~AddMachineParams]<~AddMachineParams>
        Returns -> typing.Sequence<+T_co>[~AddMachinesResult]<~AddMachinesResult>
        '''
        # map input types to rpc msg
        msg = dict(type='Client', request='AddMachines', version=1, params=params)
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(AddMachinesResults)
    async def AddMachinesV2(self, params):
        '''
        params : typing.Sequence<+T_co>[~AddMachineParams]<~AddMachineParams>
        Returns -> typing.Sequence<+T_co>[~AddMachinesResult]<~AddMachinesResult>
        '''
        # map input types to rpc msg
        msg = dict(type='Client', request='AddMachinesV2', version=1, params={"params": params})
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(AgentVersionResult)
    async def AgentVersion(self):
        '''

        Returns -> Number
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='AgentVersion', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def DestroyMachines(self, force, machine_names):
        '''
        force : bool
        machine_names : typing.Sequence<+T_co>[str]
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='DestroyMachines', version=1, params=params)
        params['force'] = force
        params['machine-names'] = machine_names
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(FindToolsResult)
    async def FindTools(self, arch, major, minor, number, series):
        '''
        arch : str
        major : int
        minor : int
        number : Number
        series : str
        Returns -> typing.Union[_ForwardRef('Error'), typing.Sequence<+T_co>[~Tools]<~Tools>]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='FindTools', version=1, params=params)
        params['arch'] = arch
        params['major'] = major
        params['minor'] = minor
        params['number'] = number
        params['series'] = series
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(FullStatus)
    async def FullStatus(self, patterns):
        '''
        patterns : typing.Sequence<+T_co>[str]
        Returns -> typing.Union[typing.Mapping<~KT, +VT_co>[str, ~MachineStatus]<~MachineStatus>, _ForwardRef('ModelStatusInfo'), typing.Sequence<+T_co>[~RelationStatus]<~RelationStatus>]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='FullStatus', version=1, params=params)
        params['patterns'] = patterns
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(GetBundleChangesResults)
    async def GetBundleChanges(self, yaml):
        '''
        yaml : str
        Returns -> typing.Sequence<+T_co>[~BundleChangesChange]<~BundleChangesChange>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='GetBundleChanges', version=1, params=params)
        params['yaml'] = yaml
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(GetConstraintsResults)
    async def GetModelConstraints(self):
        '''

        Returns -> Value
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='GetModelConstraints', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(AddMachinesResults)
    async def InjectMachines(self, params):
        '''
        params : typing.Sequence<+T_co>[~AddMachineParams]<~AddMachineParams>
        Returns -> typing.Sequence<+T_co>[~AddMachinesResult]<~AddMachinesResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='InjectMachines', version=1, params=params)
        params['params'] = params
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelDefaultsResult)
    async def ModelDefaults(self):
        '''

        Returns -> typing.Mapping<~KT, +VT_co>[str, ~ModelDefaults]<~ModelDefaults>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='ModelDefaults', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelConfigResults)
    async def ModelGet(self):
        '''

        Returns -> typing.Mapping<~KT, +VT_co>[str, ~ConfigValue]<~ConfigValue>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='ModelGet', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelInfo)
    async def ModelInfo(self):
        '''

        Returns -> typing.Union[_ForwardRef('EntityStatus'), typing.Sequence<+T_co>[~ModelUserInfo]<~ModelUserInfo>]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='ModelInfo', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def ModelSet(self, config):
        '''
        config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='ModelSet', version=1, params=params)
        params['config'] = config
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def ModelUnset(self, keys):
        '''
        keys : typing.Sequence<+T_co>[str]
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='ModelUnset', version=1, params=params)
        params['keys'] = keys
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelUserInfoResults)
    async def ModelUserInfo(self):
        '''

        Returns -> typing.Sequence<+T_co>[~ModelUserInfoResult]<~ModelUserInfoResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='ModelUserInfo', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(PrivateAddressResults)
    async def PrivateAddress(self, target):
        '''
        target : str
        Returns -> str
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='PrivateAddress', version=1, params=params)
        params['target'] = target
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ProvisioningScriptResult)
    async def ProvisioningScript(self, data_dir, disable_package_commands, machine_id, nonce):
        '''
        data_dir : str
        disable_package_commands : bool
        machine_id : str
        nonce : str
        Returns -> str
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='ProvisioningScript', version=1, params=params)
        params['data-dir'] = data_dir
        params['disable-package-commands'] = disable_package_commands
        params['machine-id'] = machine_id
        params['nonce'] = nonce
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(PublicAddressResults)
    async def PublicAddress(self, target):
        '''
        target : str
        Returns -> str
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='PublicAddress', version=1, params=params)
        params['target'] = target
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ResolveCharmResults)
    async def ResolveCharms(self, references):
        '''
        references : typing.Sequence<+T_co>[str]
        Returns -> typing.Sequence<+T_co>[~ResolveCharmResult]<~ResolveCharmResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='ResolveCharms', version=1, params=params)
        params['references'] = references
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Resolved(self, retry, unit_name):
        '''
        retry : bool
        unit_name : str
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='Resolved', version=1, params=params)
        params['retry'] = retry
        params['unit-name'] = unit_name
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def RetryProvisioning(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='RetryProvisioning', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def SetModelAgentVersion(self, version):
        '''
        version : Number
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='SetModelAgentVersion', version=1, params=params)
        params['version'] = version
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def SetModelConstraints(self, application, constraints):
        '''
        application : str
        constraints : Value
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='SetModelConstraints', version=1, params=params)
        params['application'] = application
        params['constraints'] = constraints
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetModelDefaults(self, config):
        '''
        config : typing.Sequence<+T_co>[~ModelDefaultValues]<~ModelDefaultValues>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='SetModelDefaults', version=1, params=params)
        params['config'] = config
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StatusHistoryResults)
    async def StatusHistory(self, requests):
        '''
        requests : typing.Sequence<+T_co>[~StatusHistoryRequest]<~StatusHistoryRequest>
        Returns -> typing.Sequence<+T_co>[~StatusHistoryResult]<~StatusHistoryResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='StatusHistory', version=1, params=params)
        params['requests'] = requests
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def UnsetModelDefaults(self, keys):
        '''
        keys : typing.Sequence<+T_co>[~ModelUnsetKeys]<~ModelUnsetKeys>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='UnsetModelDefaults', version=1, params=params)
        params['keys'] = keys
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(AllWatcherId)
    async def WatchAll(self):
        '''

        Returns -> str
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Client', request='WatchAll', version=1, params=params)

        reply = await self.rpc(msg)
        return reply


class CloudFacade(Type):
    name = 'Cloud'
    version = 1
    schema =     {'definitions': {'Cloud': {'additionalProperties': False,
                               'properties': {'auth-types': {'items': {'type': 'string'},
                                                             'type': 'array'},
                                              'endpoint': {'type': 'string'},
                                              'identity-endpoint': {'type': 'string'},
                                              'regions': {'items': {'$ref': '#/definitions/CloudRegion'},
                                                          'type': 'array'},
                                              'storage-endpoint': {'type': 'string'},
                                              'type': {'type': 'string'}},
                               'required': ['type'],
                               'type': 'object'},
                     'CloudCredential': {'additionalProperties': False,
                                         'properties': {'attrs': {'patternProperties': {'.*': {'type': 'string'}},
                                                                  'type': 'object'},
                                                        'auth-type': {'type': 'string'},
                                                        'redacted': {'items': {'type': 'string'},
                                                                     'type': 'array'}},
                                         'required': ['auth-type'],
                                         'type': 'object'},
                     'CloudCredentialResult': {'additionalProperties': False,
                                               'properties': {'error': {'$ref': '#/definitions/Error'},
                                                              'result': {'$ref': '#/definitions/CloudCredential'}},
                                               'type': 'object'},
                     'CloudCredentialResults': {'additionalProperties': False,
                                                'properties': {'results': {'items': {'$ref': '#/definitions/CloudCredentialResult'},
                                                                           'type': 'array'}},
                                                'type': 'object'},
                     'CloudRegion': {'additionalProperties': False,
                                     'properties': {'endpoint': {'type': 'string'},
                                                    'identity-endpoint': {'type': 'string'},
                                                    'name': {'type': 'string'},
                                                    'storage-endpoint': {'type': 'string'}},
                                     'required': ['name'],
                                     'type': 'object'},
                     'CloudResult': {'additionalProperties': False,
                                     'properties': {'cloud': {'$ref': '#/definitions/Cloud'},
                                                    'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'CloudResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/CloudResult'},
                                                                 'type': 'array'}},
                                      'type': 'object'},
                     'CloudsResult': {'additionalProperties': False,
                                      'properties': {'clouds': {'patternProperties': {'.*': {'$ref': '#/definitions/Cloud'}},
                                                                'type': 'object'}},
                                      'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'StringResult': {'additionalProperties': False,
                                      'properties': {'error': {'$ref': '#/definitions/Error'},
                                                     'result': {'type': 'string'}},
                                      'required': ['result'],
                                      'type': 'object'},
                     'StringsResult': {'additionalProperties': False,
                                       'properties': {'error': {'$ref': '#/definitions/Error'},
                                                      'result': {'items': {'type': 'string'},
                                                                 'type': 'array'}},
                                       'type': 'object'},
                     'StringsResults': {'additionalProperties': False,
                                        'properties': {'results': {'items': {'$ref': '#/definitions/StringsResult'},
                                                                   'type': 'array'}},
                                        'required': ['results'],
                                        'type': 'object'},
                     'UpdateCloudCredential': {'additionalProperties': False,
                                               'properties': {'credential': {'$ref': '#/definitions/CloudCredential'},
                                                              'tag': {'type': 'string'}},
                                               'required': ['tag', 'credential'],
                                               'type': 'object'},
                     'UpdateCloudCredentials': {'additionalProperties': False,
                                                'properties': {'credentials': {'items': {'$ref': '#/definitions/UpdateCloudCredential'},
                                                                               'type': 'array'}},
                                                'type': 'object'},
                     'UserCloud': {'additionalProperties': False,
                                   'properties': {'cloud-tag': {'type': 'string'},
                                                  'user-tag': {'type': 'string'}},
                                   'required': ['user-tag', 'cloud-tag'],
                                   'type': 'object'},
                     'UserClouds': {'additionalProperties': False,
                                    'properties': {'user-clouds': {'items': {'$ref': '#/definitions/UserCloud'},
                                                                   'type': 'array'}},
                                    'type': 'object'}},
     'properties': {'Cloud': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                             'Result': {'$ref': '#/definitions/CloudResults'}},
                              'type': 'object'},
                    'Clouds': {'properties': {'Result': {'$ref': '#/definitions/CloudsResult'}},
                               'type': 'object'},
                    'Credential': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/CloudCredentialResults'}},
                                   'type': 'object'},
                    'DefaultCloud': {'properties': {'Result': {'$ref': '#/definitions/StringResult'}},
                                     'type': 'object'},
                    'RevokeCredentials': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                         'Result': {'$ref': '#/definitions/ErrorResults'}},
                                          'type': 'object'},
                    'UpdateCredentials': {'properties': {'Params': {'$ref': '#/definitions/UpdateCloudCredentials'},
                                                         'Result': {'$ref': '#/definitions/ErrorResults'}},
                                          'type': 'object'},
                    'UserCredentials': {'properties': {'Params': {'$ref': '#/definitions/UserClouds'},
                                                       'Result': {'$ref': '#/definitions/StringsResults'}},
                                        'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(CloudResults)
    async def Cloud(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~CloudResult]<~CloudResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Cloud', request='Cloud', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(CloudsResult)
    async def Clouds(self):
        '''

        Returns -> typing.Mapping<~KT, +VT_co>[str, ~Cloud]<~Cloud>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Cloud', request='Clouds', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(CloudCredentialResults)
    async def Credential(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~CloudCredentialResult]<~CloudCredentialResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Cloud', request='Credential', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResult)
    async def DefaultCloud(self):
        '''

        Returns -> typing.Union[_ForwardRef('Error'), str]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Cloud', request='DefaultCloud', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def RevokeCredentials(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Cloud', request='RevokeCredentials', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def UpdateCredentials(self, credentials):
        '''
        credentials : typing.Sequence<+T_co>[~UpdateCloudCredential]<~UpdateCloudCredential>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Cloud', request='UpdateCredentials', version=1, params=params)
        params['credentials'] = credentials
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsResults)
    async def UserCredentials(self, user_clouds):
        '''
        user_clouds : typing.Sequence<+T_co>[~UserCloud]<~UserCloud>
        Returns -> typing.Sequence<+T_co>[~StringsResult]<~StringsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Cloud', request='UserCredentials', version=1, params=params)
        params['user-clouds'] = user_clouds
        reply = await self.rpc(msg)
        return reply


class ControllerFacade(Type):
    name = 'Controller'
    version = 3
    schema =     {'definitions': {'AllWatcherId': {'additionalProperties': False,
                                      'properties': {'watcher-id': {'type': 'string'}},
                                      'required': ['watcher-id'],
                                      'type': 'object'},
                     'CloudCredential': {'additionalProperties': False,
                                         'properties': {'attrs': {'patternProperties': {'.*': {'type': 'string'}},
                                                                  'type': 'object'},
                                                        'auth-type': {'type': 'string'},
                                                        'redacted': {'items': {'type': 'string'},
                                                                     'type': 'array'}},
                                         'required': ['auth-type'],
                                         'type': 'object'},
                     'CloudSpec': {'additionalProperties': False,
                                   'properties': {'credential': {'$ref': '#/definitions/CloudCredential'},
                                                  'endpoint': {'type': 'string'},
                                                  'identity-endpoint': {'type': 'string'},
                                                  'name': {'type': 'string'},
                                                  'region': {'type': 'string'},
                                                  'storage-endpoint': {'type': 'string'},
                                                  'type': {'type': 'string'}},
                                   'required': ['type', 'name'],
                                   'type': 'object'},
                     'CloudSpecResult': {'additionalProperties': False,
                                         'properties': {'error': {'$ref': '#/definitions/Error'},
                                                        'result': {'$ref': '#/definitions/CloudSpec'}},
                                         'type': 'object'},
                     'CloudSpecResults': {'additionalProperties': False,
                                          'properties': {'results': {'items': {'$ref': '#/definitions/CloudSpecResult'},
                                                                     'type': 'array'}},
                                          'type': 'object'},
                     'ConfigValue': {'additionalProperties': False,
                                     'properties': {'source': {'type': 'string'},
                                                    'value': {'additionalProperties': True,
                                                              'type': 'object'}},
                                     'required': ['value', 'source'],
                                     'type': 'object'},
                     'ControllerConfigResult': {'additionalProperties': False,
                                                'properties': {'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                       'type': 'object'}},
                                                                          'type': 'object'}},
                                                'required': ['config'],
                                                'type': 'object'},
                     'DestroyControllerArgs': {'additionalProperties': False,
                                               'properties': {'destroy-models': {'type': 'boolean'}},
                                               'required': ['destroy-models'],
                                               'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'InitiateMigrationArgs': {'additionalProperties': False,
                                               'properties': {'specs': {'items': {'$ref': '#/definitions/MigrationSpec'},
                                                                        'type': 'array'}},
                                               'required': ['specs'],
                                               'type': 'object'},
                     'InitiateMigrationResult': {'additionalProperties': False,
                                                 'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                'migration-id': {'type': 'string'},
                                                                'model-tag': {'type': 'string'}},
                                                 'required': ['model-tag',
                                                              'migration-id'],
                                                 'type': 'object'},
                     'InitiateMigrationResults': {'additionalProperties': False,
                                                  'properties': {'results': {'items': {'$ref': '#/definitions/InitiateMigrationResult'},
                                                                             'type': 'array'}},
                                                  'required': ['results'],
                                                  'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MachineHardware': {'additionalProperties': False,
                                         'properties': {'arch': {'type': 'string'},
                                                        'availability-zone': {'type': 'string'},
                                                        'cores': {'type': 'integer'},
                                                        'cpu-power': {'type': 'integer'},
                                                        'mem': {'type': 'integer'},
                                                        'root-disk': {'type': 'integer'},
                                                        'tags': {'items': {'type': 'string'},
                                                                 'type': 'array'}},
                                         'type': 'object'},
                     'MigrationSpec': {'additionalProperties': False,
                                       'properties': {'external-control': {'type': 'boolean'},
                                                      'model-tag': {'type': 'string'},
                                                      'target-info': {'$ref': '#/definitions/MigrationTargetInfo'}},
                                       'required': ['model-tag',
                                                    'target-info',
                                                    'external-control'],
                                       'type': 'object'},
                     'MigrationTargetInfo': {'additionalProperties': False,
                                             'properties': {'addrs': {'items': {'type': 'string'},
                                                                      'type': 'array'},
                                                            'auth-tag': {'type': 'string'},
                                                            'ca-cert': {'type': 'string'},
                                                            'controller-tag': {'type': 'string'},
                                                            'macaroons': {'type': 'string'},
                                                            'password': {'type': 'string'}},
                                             'required': ['controller-tag',
                                                          'addrs',
                                                          'ca-cert',
                                                          'auth-tag'],
                                             'type': 'object'},
                     'Model': {'additionalProperties': False,
                               'properties': {'name': {'type': 'string'},
                                              'owner-tag': {'type': 'string'},
                                              'uuid': {'type': 'string'}},
                               'required': ['name', 'uuid', 'owner-tag'],
                               'type': 'object'},
                     'ModelBlockInfo': {'additionalProperties': False,
                                        'properties': {'blocks': {'items': {'type': 'string'},
                                                                  'type': 'array'},
                                                       'model-uuid': {'type': 'string'},
                                                       'name': {'type': 'string'},
                                                       'owner-tag': {'type': 'string'}},
                                        'required': ['name',
                                                     'model-uuid',
                                                     'owner-tag',
                                                     'blocks'],
                                        'type': 'object'},
                     'ModelBlockInfoList': {'additionalProperties': False,
                                            'properties': {'models': {'items': {'$ref': '#/definitions/ModelBlockInfo'},
                                                                      'type': 'array'}},
                                            'type': 'object'},
                     'ModelConfigResults': {'additionalProperties': False,
                                            'properties': {'config': {'patternProperties': {'.*': {'$ref': '#/definitions/ConfigValue'}},
                                                                      'type': 'object'}},
                                            'required': ['config'],
                                            'type': 'object'},
                     'ModelMachineInfo': {'additionalProperties': False,
                                          'properties': {'hardware': {'$ref': '#/definitions/MachineHardware'},
                                                         'id': {'type': 'string'}},
                                          'required': ['id'],
                                          'type': 'object'},
                     'ModelStatus': {'additionalProperties': False,
                                     'properties': {'application-count': {'type': 'integer'},
                                                    'hosted-machine-count': {'type': 'integer'},
                                                    'life': {'type': 'string'},
                                                    'machines': {'items': {'$ref': '#/definitions/ModelMachineInfo'},
                                                                 'type': 'array'},
                                                    'model-tag': {'type': 'string'},
                                                    'owner-tag': {'type': 'string'}},
                                     'required': ['model-tag',
                                                  'life',
                                                  'hosted-machine-count',
                                                  'application-count',
                                                  'owner-tag'],
                                     'type': 'object'},
                     'ModelStatusResults': {'additionalProperties': False,
                                            'properties': {'models': {'items': {'$ref': '#/definitions/ModelStatus'},
                                                                      'type': 'array'}},
                                            'required': ['models'],
                                            'type': 'object'},
                     'ModifyControllerAccess': {'additionalProperties': False,
                                                'properties': {'access': {'type': 'string'},
                                                               'action': {'type': 'string'},
                                                               'user-tag': {'type': 'string'}},
                                                'required': ['user-tag',
                                                             'action',
                                                             'access'],
                                                'type': 'object'},
                     'ModifyControllerAccessRequest': {'additionalProperties': False,
                                                       'properties': {'changes': {'items': {'$ref': '#/definitions/ModifyControllerAccess'},
                                                                                  'type': 'array'}},
                                                       'required': ['changes'],
                                                       'type': 'object'},
                     'RemoveBlocksArgs': {'additionalProperties': False,
                                          'properties': {'all': {'type': 'boolean'}},
                                          'required': ['all'],
                                          'type': 'object'},
                     'UserAccess': {'additionalProperties': False,
                                    'properties': {'access': {'type': 'string'},
                                                   'user-tag': {'type': 'string'}},
                                    'required': ['user-tag', 'access'],
                                    'type': 'object'},
                     'UserAccessResult': {'additionalProperties': False,
                                          'properties': {'error': {'$ref': '#/definitions/Error'},
                                                         'result': {'$ref': '#/definitions/UserAccess'}},
                                          'type': 'object'},
                     'UserAccessResults': {'additionalProperties': False,
                                           'properties': {'results': {'items': {'$ref': '#/definitions/UserAccessResult'},
                                                                      'type': 'array'}},
                                           'type': 'object'},
                     'UserModel': {'additionalProperties': False,
                                   'properties': {'last-connection': {'format': 'date-time',
                                                                      'type': 'string'},
                                                  'model': {'$ref': '#/definitions/Model'}},
                                   'required': ['model', 'last-connection'],
                                   'type': 'object'},
                     'UserModelList': {'additionalProperties': False,
                                       'properties': {'user-models': {'items': {'$ref': '#/definitions/UserModel'},
                                                                      'type': 'array'}},
                                       'required': ['user-models'],
                                       'type': 'object'}},
     'properties': {'AllModels': {'properties': {'Result': {'$ref': '#/definitions/UserModelList'}},
                                  'type': 'object'},
                    'CloudSpec': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                 'Result': {'$ref': '#/definitions/CloudSpecResults'}},
                                  'type': 'object'},
                    'ControllerConfig': {'properties': {'Result': {'$ref': '#/definitions/ControllerConfigResult'}},
                                         'type': 'object'},
                    'DestroyController': {'properties': {'Params': {'$ref': '#/definitions/DestroyControllerArgs'}},
                                          'type': 'object'},
                    'GetControllerAccess': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                           'Result': {'$ref': '#/definitions/UserAccessResults'}},
                                            'type': 'object'},
                    'InitiateMigration': {'properties': {'Params': {'$ref': '#/definitions/InitiateMigrationArgs'},
                                                         'Result': {'$ref': '#/definitions/InitiateMigrationResults'}},
                                          'type': 'object'},
                    'ListBlockedModels': {'properties': {'Result': {'$ref': '#/definitions/ModelBlockInfoList'}},
                                          'type': 'object'},
                    'ModelConfig': {'properties': {'Result': {'$ref': '#/definitions/ModelConfigResults'}},
                                    'type': 'object'},
                    'ModelStatus': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                   'Result': {'$ref': '#/definitions/ModelStatusResults'}},
                                    'type': 'object'},
                    'ModifyControllerAccess': {'properties': {'Params': {'$ref': '#/definitions/ModifyControllerAccessRequest'},
                                                              'Result': {'$ref': '#/definitions/ErrorResults'}},
                                               'type': 'object'},
                    'RemoveBlocks': {'properties': {'Params': {'$ref': '#/definitions/RemoveBlocksArgs'}},
                                     'type': 'object'},
                    'WatchAllModels': {'properties': {'Result': {'$ref': '#/definitions/AllWatcherId'}},
                                       'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(UserModelList)
    async def AllModels(self):
        '''

        Returns -> typing.Sequence<+T_co>[~UserModel]<~UserModel>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Controller', request='AllModels', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(CloudSpecResults)
    async def CloudSpec(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~CloudSpecResult]<~CloudSpecResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Controller', request='CloudSpec', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ControllerConfigResult)
    async def ControllerConfig(self):
        '''

        Returns -> typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Controller', request='ControllerConfig', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def DestroyController(self, destroy_models):
        '''
        destroy_models : bool
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Controller', request='DestroyController', version=3, params=params)
        params['destroy-models'] = destroy_models
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(UserAccessResults)
    async def GetControllerAccess(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~UserAccessResult]<~UserAccessResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Controller', request='GetControllerAccess', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(InitiateMigrationResults)
    async def InitiateMigration(self, specs):
        '''
        specs : typing.Sequence<+T_co>[~MigrationSpec]<~MigrationSpec>
        Returns -> typing.Sequence<+T_co>[~InitiateMigrationResult]<~InitiateMigrationResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Controller', request='InitiateMigration', version=3, params=params)
        params['specs'] = specs
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelBlockInfoList)
    async def ListBlockedModels(self):
        '''

        Returns -> typing.Sequence<+T_co>[~ModelBlockInfo]<~ModelBlockInfo>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Controller', request='ListBlockedModels', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelConfigResults)
    async def ModelConfig(self):
        '''

        Returns -> typing.Mapping<~KT, +VT_co>[str, ~ConfigValue]<~ConfigValue>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Controller', request='ModelConfig', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelStatusResults)
    async def ModelStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ModelStatus]<~ModelStatus>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Controller', request='ModelStatus', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def ModifyControllerAccess(self, changes):
        '''
        changes : typing.Sequence<+T_co>[~ModifyControllerAccess]<~ModifyControllerAccess>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Controller', request='ModifyControllerAccess', version=3, params=params)
        params['changes'] = changes
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def RemoveBlocks(self, all_):
        '''
        all_ : bool
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Controller', request='RemoveBlocks', version=3, params=params)
        params['all'] = all_
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(AllWatcherId)
    async def WatchAllModels(self):
        '''

        Returns -> str
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Controller', request='WatchAllModels', version=3, params=params)

        reply = await self.rpc(msg)
        return reply


class DeployerFacade(Type):
    name = 'Deployer'
    version = 1
    schema =     {'definitions': {'APIHostPortsResult': {'additionalProperties': False,
                                            'properties': {'servers': {'items': {'items': {'$ref': '#/definitions/HostPort'},
                                                                                 'type': 'array'},
                                                                       'type': 'array'}},
                                            'required': ['servers'],
                                            'type': 'object'},
                     'Address': {'additionalProperties': False,
                                 'properties': {'scope': {'type': 'string'},
                                                'space-name': {'type': 'string'},
                                                'type': {'type': 'string'},
                                                'value': {'type': 'string'}},
                                 'required': ['value', 'type', 'scope'],
                                 'type': 'object'},
                     'BytesResult': {'additionalProperties': False,
                                     'properties': {'result': {'items': {'type': 'integer'},
                                                               'type': 'array'}},
                                     'required': ['result'],
                                     'type': 'object'},
                     'DeployerConnectionValues': {'additionalProperties': False,
                                                  'properties': {'api-addresses': {'items': {'type': 'string'},
                                                                                   'type': 'array'},
                                                                 'state-addresses': {'items': {'type': 'string'},
                                                                                     'type': 'array'}},
                                                  'required': ['state-addresses',
                                                               'api-addresses'],
                                                  'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'EntityPassword': {'additionalProperties': False,
                                        'properties': {'password': {'type': 'string'},
                                                       'tag': {'type': 'string'}},
                                        'required': ['tag', 'password'],
                                        'type': 'object'},
                     'EntityPasswords': {'additionalProperties': False,
                                         'properties': {'changes': {'items': {'$ref': '#/definitions/EntityPassword'},
                                                                    'type': 'array'}},
                                         'required': ['changes'],
                                         'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'HostPort': {'additionalProperties': False,
                                  'properties': {'Address': {'$ref': '#/definitions/Address'},
                                                 'port': {'type': 'integer'}},
                                  'required': ['Address', 'port'],
                                  'type': 'object'},
                     'LifeResult': {'additionalProperties': False,
                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                   'life': {'type': 'string'}},
                                    'required': ['life'],
                                    'type': 'object'},
                     'LifeResults': {'additionalProperties': False,
                                     'properties': {'results': {'items': {'$ref': '#/definitions/LifeResult'},
                                                                'type': 'array'}},
                                     'required': ['results'],
                                     'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'StringResult': {'additionalProperties': False,
                                      'properties': {'error': {'$ref': '#/definitions/Error'},
                                                     'result': {'type': 'string'}},
                                      'required': ['result'],
                                      'type': 'object'},
                     'StringsResult': {'additionalProperties': False,
                                       'properties': {'error': {'$ref': '#/definitions/Error'},
                                                      'result': {'items': {'type': 'string'},
                                                                 'type': 'array'}},
                                       'type': 'object'},
                     'StringsWatchResult': {'additionalProperties': False,
                                            'properties': {'changes': {'items': {'type': 'string'},
                                                                       'type': 'array'},
                                                           'error': {'$ref': '#/definitions/Error'},
                                                           'watcher-id': {'type': 'string'}},
                                            'required': ['watcher-id'],
                                            'type': 'object'},
                     'StringsWatchResults': {'additionalProperties': False,
                                             'properties': {'results': {'items': {'$ref': '#/definitions/StringsWatchResult'},
                                                                        'type': 'array'}},
                                             'required': ['results'],
                                             'type': 'object'}},
     'properties': {'APIAddresses': {'properties': {'Result': {'$ref': '#/definitions/StringsResult'}},
                                     'type': 'object'},
                    'APIHostPorts': {'properties': {'Result': {'$ref': '#/definitions/APIHostPortsResult'}},
                                     'type': 'object'},
                    'CACert': {'properties': {'Result': {'$ref': '#/definitions/BytesResult'}},
                               'type': 'object'},
                    'ConnectionInfo': {'properties': {'Result': {'$ref': '#/definitions/DeployerConnectionValues'}},
                                       'type': 'object'},
                    'Life': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                            'Result': {'$ref': '#/definitions/LifeResults'}},
                             'type': 'object'},
                    'ModelUUID': {'properties': {'Result': {'$ref': '#/definitions/StringResult'}},
                                  'type': 'object'},
                    'Remove': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                              'Result': {'$ref': '#/definitions/ErrorResults'}},
                               'type': 'object'},
                    'SetPasswords': {'properties': {'Params': {'$ref': '#/definitions/EntityPasswords'},
                                                    'Result': {'$ref': '#/definitions/ErrorResults'}},
                                     'type': 'object'},
                    'StateAddresses': {'properties': {'Result': {'$ref': '#/definitions/StringsResult'}},
                                       'type': 'object'},
                    'WatchAPIHostPorts': {'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResult'}},
                                          'type': 'object'},
                    'WatchUnits': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                   'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(StringsResult)
    async def APIAddresses(self):
        '''

        Returns -> typing.Union[_ForwardRef('Error'), typing.Sequence<+T_co>[str]]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Deployer', request='APIAddresses', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(APIHostPortsResult)
    async def APIHostPorts(self):
        '''

        Returns -> typing.Sequence<+T_co>[~HostPort]<~HostPort>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Deployer', request='APIHostPorts', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(BytesResult)
    async def CACert(self):
        '''

        Returns -> typing.Sequence<+T_co>[int]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Deployer', request='CACert', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(DeployerConnectionValues)
    async def ConnectionInfo(self):
        '''

        Returns -> typing.Sequence<+T_co>[str]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Deployer', request='ConnectionInfo', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(LifeResults)
    async def Life(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~LifeResult]<~LifeResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Deployer', request='Life', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResult)
    async def ModelUUID(self):
        '''

        Returns -> typing.Union[_ForwardRef('Error'), str]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Deployer', request='ModelUUID', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def Remove(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Deployer', request='Remove', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetPasswords(self, changes):
        '''
        changes : typing.Sequence<+T_co>[~EntityPassword]<~EntityPassword>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Deployer', request='SetPasswords', version=1, params=params)
        params['changes'] = changes
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsResult)
    async def StateAddresses(self):
        '''

        Returns -> typing.Union[_ForwardRef('Error'), typing.Sequence<+T_co>[str]]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Deployer', request='StateAddresses', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResult)
    async def WatchAPIHostPorts(self):
        '''

        Returns -> typing.Union[str, _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Deployer', request='WatchAPIHostPorts', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchUnits(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringsWatchResult]<~StringsWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Deployer', request='WatchUnits', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class DiscoverSpacesFacade(Type):
    name = 'DiscoverSpaces'
    version = 2
    schema =     {'definitions': {'AddSubnetParams': {'additionalProperties': False,
                                         'properties': {'space-tag': {'type': 'string'},
                                                        'subnet-provider-id': {'type': 'string'},
                                                        'subnet-tag': {'type': 'string'},
                                                        'zones': {'items': {'type': 'string'},
                                                                  'type': 'array'}},
                                         'required': ['space-tag'],
                                         'type': 'object'},
                     'AddSubnetsParams': {'additionalProperties': False,
                                          'properties': {'subnets': {'items': {'$ref': '#/definitions/AddSubnetParams'},
                                                                     'type': 'array'}},
                                          'required': ['subnets'],
                                          'type': 'object'},
                     'CreateSpaceParams': {'additionalProperties': False,
                                           'properties': {'provider-id': {'type': 'string'},
                                                          'public': {'type': 'boolean'},
                                                          'space-tag': {'type': 'string'},
                                                          'subnet-tags': {'items': {'type': 'string'},
                                                                          'type': 'array'}},
                                           'required': ['subnet-tags',
                                                        'space-tag',
                                                        'public'],
                                           'type': 'object'},
                     'CreateSpacesParams': {'additionalProperties': False,
                                            'properties': {'spaces': {'items': {'$ref': '#/definitions/CreateSpaceParams'},
                                                                      'type': 'array'}},
                                            'required': ['spaces'],
                                            'type': 'object'},
                     'DiscoverSpacesResults': {'additionalProperties': False,
                                               'properties': {'results': {'items': {'$ref': '#/definitions/ProviderSpace'},
                                                                          'type': 'array'}},
                                               'required': ['results'],
                                               'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'ListSubnetsResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/Subnet'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'ModelConfigResult': {'additionalProperties': False,
                                           'properties': {'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                  'type': 'object'}},
                                                                     'type': 'object'}},
                                           'required': ['config'],
                                           'type': 'object'},
                     'ProviderSpace': {'additionalProperties': False,
                                       'properties': {'error': {'$ref': '#/definitions/Error'},
                                                      'name': {'type': 'string'},
                                                      'provider-id': {'type': 'string'},
                                                      'subnets': {'items': {'$ref': '#/definitions/Subnet'},
                                                                  'type': 'array'}},
                                       'required': ['name',
                                                    'provider-id',
                                                    'subnets'],
                                       'type': 'object'},
                     'Subnet': {'additionalProperties': False,
                                'properties': {'cidr': {'type': 'string'},
                                               'life': {'type': 'string'},
                                               'provider-id': {'type': 'string'},
                                               'space-tag': {'type': 'string'},
                                               'status': {'type': 'string'},
                                               'vlan-tag': {'type': 'integer'},
                                               'zones': {'items': {'type': 'string'},
                                                         'type': 'array'}},
                                'required': ['cidr',
                                             'vlan-tag',
                                             'life',
                                             'space-tag',
                                             'zones'],
                                'type': 'object'},
                     'SubnetsFilters': {'additionalProperties': False,
                                        'properties': {'space-tag': {'type': 'string'},
                                                       'zone': {'type': 'string'}},
                                        'type': 'object'}},
     'properties': {'AddSubnets': {'properties': {'Params': {'$ref': '#/definitions/AddSubnetsParams'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'},
                    'CreateSpaces': {'properties': {'Params': {'$ref': '#/definitions/CreateSpacesParams'},
                                                    'Result': {'$ref': '#/definitions/ErrorResults'}},
                                     'type': 'object'},
                    'ListSpaces': {'properties': {'Result': {'$ref': '#/definitions/DiscoverSpacesResults'}},
                                   'type': 'object'},
                    'ListSubnets': {'properties': {'Params': {'$ref': '#/definitions/SubnetsFilters'},
                                                   'Result': {'$ref': '#/definitions/ListSubnetsResults'}},
                                    'type': 'object'},
                    'ModelConfig': {'properties': {'Result': {'$ref': '#/definitions/ModelConfigResult'}},
                                    'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResults)
    async def AddSubnets(self, subnets):
        '''
        subnets : typing.Sequence<+T_co>[~AddSubnetParams]<~AddSubnetParams>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='DiscoverSpaces', request='AddSubnets', version=2, params=params)
        params['subnets'] = subnets
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def CreateSpaces(self, spaces):
        '''
        spaces : typing.Sequence<+T_co>[~CreateSpaceParams]<~CreateSpaceParams>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='DiscoverSpaces', request='CreateSpaces', version=2, params=params)
        params['spaces'] = spaces
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(DiscoverSpacesResults)
    async def ListSpaces(self):
        '''

        Returns -> typing.Sequence<+T_co>[~ProviderSpace]<~ProviderSpace>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='DiscoverSpaces', request='ListSpaces', version=2, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ListSubnetsResults)
    async def ListSubnets(self, space_tag, zone):
        '''
        space_tag : str
        zone : str
        Returns -> typing.Sequence<+T_co>[~Subnet]<~Subnet>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='DiscoverSpaces', request='ListSubnets', version=2, params=params)
        params['space-tag'] = space_tag
        params['zone'] = zone
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelConfigResult)
    async def ModelConfig(self):
        '''

        Returns -> typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='DiscoverSpaces', request='ModelConfig', version=2, params=params)

        reply = await self.rpc(msg)
        return reply


class DiskManagerFacade(Type):
    name = 'DiskManager'
    version = 2
    schema =     {'definitions': {'BlockDevice': {'additionalProperties': False,
                                     'properties': {'BusAddress': {'type': 'string'},
                                                    'DeviceLinks': {'items': {'type': 'string'},
                                                                    'type': 'array'},
                                                    'DeviceName': {'type': 'string'},
                                                    'FilesystemType': {'type': 'string'},
                                                    'HardwareId': {'type': 'string'},
                                                    'InUse': {'type': 'boolean'},
                                                    'Label': {'type': 'string'},
                                                    'MountPoint': {'type': 'string'},
                                                    'Size': {'type': 'integer'},
                                                    'UUID': {'type': 'string'}},
                                     'required': ['DeviceName',
                                                  'DeviceLinks',
                                                  'Label',
                                                  'UUID',
                                                  'HardwareId',
                                                  'BusAddress',
                                                  'Size',
                                                  'FilesystemType',
                                                  'InUse',
                                                  'MountPoint'],
                                     'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MachineBlockDevices': {'additionalProperties': False,
                                             'properties': {'block-devices': {'items': {'$ref': '#/definitions/BlockDevice'},
                                                                              'type': 'array'},
                                                            'machine': {'type': 'string'}},
                                             'required': ['machine'],
                                             'type': 'object'},
                     'SetMachineBlockDevices': {'additionalProperties': False,
                                                'properties': {'machine-block-devices': {'items': {'$ref': '#/definitions/MachineBlockDevices'},
                                                                                         'type': 'array'}},
                                                'required': ['machine-block-devices'],
                                                'type': 'object'}},
     'properties': {'SetMachineBlockDevices': {'properties': {'Params': {'$ref': '#/definitions/SetMachineBlockDevices'},
                                                              'Result': {'$ref': '#/definitions/ErrorResults'}},
                                               'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResults)
    async def SetMachineBlockDevices(self, machine_block_devices):
        '''
        machine_block_devices : typing.Sequence<+T_co>[~MachineBlockDevices]<~MachineBlockDevices>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='DiskManager', request='SetMachineBlockDevices', version=2, params=params)
        params['machine-block-devices'] = machine_block_devices
        reply = await self.rpc(msg)
        return reply


class EntityWatcherFacade(Type):
    name = 'EntityWatcher'
    version = 2
    schema =     {'definitions': {'EntitiesWatchResult': {'additionalProperties': False,
                                             'properties': {'changes': {'items': {'type': 'string'},
                                                                        'type': 'array'},
                                                            'error': {'$ref': '#/definitions/Error'},
                                                            'watcher-id': {'type': 'string'}},
                                             'required': ['watcher-id'],
                                             'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'}},
     'properties': {'Next': {'properties': {'Result': {'$ref': '#/definitions/EntitiesWatchResult'}},
                             'type': 'object'},
                    'Stop': {'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(EntitiesWatchResult)
    async def Next(self):
        '''

        Returns -> typing.Union[typing.Sequence<+T_co>[str], _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='EntityWatcher', request='Next', version=2, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Stop(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='EntityWatcher', request='Stop', version=2, params=params)

        reply = await self.rpc(msg)
        return reply


class FilesystemAttachmentsWatcherFacade(Type):
    name = 'FilesystemAttachmentsWatcher'
    version = 2
    schema =     {'definitions': {'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MachineStorageId': {'additionalProperties': False,
                                          'properties': {'attachment-tag': {'type': 'string'},
                                                         'machine-tag': {'type': 'string'}},
                                          'required': ['machine-tag',
                                                       'attachment-tag'],
                                          'type': 'object'},
                     'MachineStorageIdsWatchResult': {'additionalProperties': False,
                                                      'properties': {'changes': {'items': {'$ref': '#/definitions/MachineStorageId'},
                                                                                 'type': 'array'},
                                                                     'error': {'$ref': '#/definitions/Error'},
                                                                     'watcher-id': {'type': 'string'}},
                                                      'required': ['watcher-id',
                                                                   'changes'],
                                                      'type': 'object'}},
     'properties': {'Next': {'properties': {'Result': {'$ref': '#/definitions/MachineStorageIdsWatchResult'}},
                             'type': 'object'},
                    'Stop': {'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(MachineStorageIdsWatchResult)
    async def Next(self):
        '''

        Returns -> typing.Union[typing.Sequence<+T_co>[~MachineStorageId]<~MachineStorageId>, _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='FilesystemAttachmentsWatcher', request='Next', version=2, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Stop(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='FilesystemAttachmentsWatcher', request='Stop', version=2, params=params)

        reply = await self.rpc(msg)
        return reply


class FirewallerFacade(Type):
    name = 'Firewaller'
    version = 3
    schema =     {'definitions': {'BoolResult': {'additionalProperties': False,
                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                   'result': {'type': 'boolean'}},
                                    'required': ['result'],
                                    'type': 'object'},
                     'BoolResults': {'additionalProperties': False,
                                     'properties': {'results': {'items': {'$ref': '#/definitions/BoolResult'},
                                                                'type': 'array'}},
                                     'required': ['results'],
                                     'type': 'object'},
                     'CloudCredential': {'additionalProperties': False,
                                         'properties': {'attrs': {'patternProperties': {'.*': {'type': 'string'}},
                                                                  'type': 'object'},
                                                        'auth-type': {'type': 'string'},
                                                        'redacted': {'items': {'type': 'string'},
                                                                     'type': 'array'}},
                                         'required': ['auth-type'],
                                         'type': 'object'},
                     'CloudSpec': {'additionalProperties': False,
                                   'properties': {'credential': {'$ref': '#/definitions/CloudCredential'},
                                                  'endpoint': {'type': 'string'},
                                                  'identity-endpoint': {'type': 'string'},
                                                  'name': {'type': 'string'},
                                                  'region': {'type': 'string'},
                                                  'storage-endpoint': {'type': 'string'},
                                                  'type': {'type': 'string'}},
                                   'required': ['type', 'name'],
                                   'type': 'object'},
                     'CloudSpecResult': {'additionalProperties': False,
                                         'properties': {'error': {'$ref': '#/definitions/Error'},
                                                        'result': {'$ref': '#/definitions/CloudSpec'}},
                                         'type': 'object'},
                     'CloudSpecResults': {'additionalProperties': False,
                                          'properties': {'results': {'items': {'$ref': '#/definitions/CloudSpecResult'},
                                                                     'type': 'array'}},
                                          'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'LifeResult': {'additionalProperties': False,
                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                   'life': {'type': 'string'}},
                                    'required': ['life'],
                                    'type': 'object'},
                     'LifeResults': {'additionalProperties': False,
                                     'properties': {'results': {'items': {'$ref': '#/definitions/LifeResult'},
                                                                'type': 'array'}},
                                     'required': ['results'],
                                     'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MachinePortRange': {'additionalProperties': False,
                                          'properties': {'port-range': {'$ref': '#/definitions/PortRange'},
                                                         'relation-tag': {'type': 'string'},
                                                         'unit-tag': {'type': 'string'}},
                                          'required': ['unit-tag',
                                                       'relation-tag',
                                                       'port-range'],
                                          'type': 'object'},
                     'MachinePorts': {'additionalProperties': False,
                                      'properties': {'machine-tag': {'type': 'string'},
                                                     'subnet-tag': {'type': 'string'}},
                                      'required': ['machine-tag', 'subnet-tag'],
                                      'type': 'object'},
                     'MachinePortsParams': {'additionalProperties': False,
                                            'properties': {'params': {'items': {'$ref': '#/definitions/MachinePorts'},
                                                                      'type': 'array'}},
                                            'required': ['params'],
                                            'type': 'object'},
                     'MachinePortsResult': {'additionalProperties': False,
                                            'properties': {'error': {'$ref': '#/definitions/Error'},
                                                           'ports': {'items': {'$ref': '#/definitions/MachinePortRange'},
                                                                     'type': 'array'}},
                                            'required': ['ports'],
                                            'type': 'object'},
                     'MachinePortsResults': {'additionalProperties': False,
                                             'properties': {'results': {'items': {'$ref': '#/definitions/MachinePortsResult'},
                                                                        'type': 'array'}},
                                             'required': ['results'],
                                             'type': 'object'},
                     'ModelConfigResult': {'additionalProperties': False,
                                           'properties': {'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                  'type': 'object'}},
                                                                     'type': 'object'}},
                                           'required': ['config'],
                                           'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'NotifyWatchResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/NotifyWatchResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'PortRange': {'additionalProperties': False,
                                   'properties': {'from-port': {'type': 'integer'},
                                                  'protocol': {'type': 'string'},
                                                  'to-port': {'type': 'integer'}},
                                   'required': ['from-port', 'to-port', 'protocol'],
                                   'type': 'object'},
                     'StringResult': {'additionalProperties': False,
                                      'properties': {'error': {'$ref': '#/definitions/Error'},
                                                     'result': {'type': 'string'}},
                                      'required': ['result'],
                                      'type': 'object'},
                     'StringResults': {'additionalProperties': False,
                                       'properties': {'results': {'items': {'$ref': '#/definitions/StringResult'},
                                                                  'type': 'array'}},
                                       'required': ['results'],
                                       'type': 'object'},
                     'StringsResult': {'additionalProperties': False,
                                       'properties': {'error': {'$ref': '#/definitions/Error'},
                                                      'result': {'items': {'type': 'string'},
                                                                 'type': 'array'}},
                                       'type': 'object'},
                     'StringsResults': {'additionalProperties': False,
                                        'properties': {'results': {'items': {'$ref': '#/definitions/StringsResult'},
                                                                   'type': 'array'}},
                                        'required': ['results'],
                                        'type': 'object'},
                     'StringsWatchResult': {'additionalProperties': False,
                                            'properties': {'changes': {'items': {'type': 'string'},
                                                                       'type': 'array'},
                                                           'error': {'$ref': '#/definitions/Error'},
                                                           'watcher-id': {'type': 'string'}},
                                            'required': ['watcher-id'],
                                            'type': 'object'},
                     'StringsWatchResults': {'additionalProperties': False,
                                             'properties': {'results': {'items': {'$ref': '#/definitions/StringsWatchResult'},
                                                                        'type': 'array'}},
                                             'required': ['results'],
                                             'type': 'object'}},
     'properties': {'CloudSpec': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                 'Result': {'$ref': '#/definitions/CloudSpecResults'}},
                                  'type': 'object'},
                    'GetAssignedMachine': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                          'Result': {'$ref': '#/definitions/StringResults'}},
                                           'type': 'object'},
                    'GetExposed': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/BoolResults'}},
                                   'type': 'object'},
                    'GetMachineActiveSubnets': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                               'Result': {'$ref': '#/definitions/StringsResults'}},
                                                'type': 'object'},
                    'GetMachinePorts': {'properties': {'Params': {'$ref': '#/definitions/MachinePortsParams'},
                                                       'Result': {'$ref': '#/definitions/MachinePortsResults'}},
                                        'type': 'object'},
                    'InstanceId': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/StringResults'}},
                                   'type': 'object'},
                    'Life': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                            'Result': {'$ref': '#/definitions/LifeResults'}},
                             'type': 'object'},
                    'ModelConfig': {'properties': {'Result': {'$ref': '#/definitions/ModelConfigResult'}},
                                    'type': 'object'},
                    'Watch': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                             'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                              'type': 'object'},
                    'WatchForModelConfigChanges': {'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResult'}},
                                                   'type': 'object'},
                    'WatchModelMachines': {'properties': {'Result': {'$ref': '#/definitions/StringsWatchResult'}},
                                           'type': 'object'},
                    'WatchOpenedPorts': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                        'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                         'type': 'object'},
                    'WatchUnits': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                   'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(CloudSpecResults)
    async def CloudSpec(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~CloudSpecResult]<~CloudSpecResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Firewaller', request='CloudSpec', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def GetAssignedMachine(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringResult]<~StringResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Firewaller', request='GetAssignedMachine', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(BoolResults)
    async def GetExposed(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~BoolResult]<~BoolResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Firewaller', request='GetExposed', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsResults)
    async def GetMachineActiveSubnets(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringsResult]<~StringsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Firewaller', request='GetMachineActiveSubnets', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(MachinePortsResults)
    async def GetMachinePorts(self, params):
        '''
        params : typing.Sequence<+T_co>[~MachinePorts]<~MachinePorts>
        Returns -> typing.Sequence<+T_co>[~MachinePortsResult]<~MachinePortsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Firewaller', request='GetMachinePorts', version=3, params=params)
        params['params'] = params
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def InstanceId(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringResult]<~StringResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Firewaller', request='InstanceId', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(LifeResults)
    async def Life(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~LifeResult]<~LifeResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Firewaller', request='Life', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelConfigResult)
    async def ModelConfig(self):
        '''

        Returns -> typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Firewaller', request='ModelConfig', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def Watch(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Firewaller', request='Watch', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResult)
    async def WatchForModelConfigChanges(self):
        '''

        Returns -> typing.Union[str, _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Firewaller', request='WatchForModelConfigChanges', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResult)
    async def WatchModelMachines(self):
        '''

        Returns -> typing.Union[typing.Sequence<+T_co>[str], _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Firewaller', request='WatchModelMachines', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchOpenedPorts(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringsWatchResult]<~StringsWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Firewaller', request='WatchOpenedPorts', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchUnits(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringsWatchResult]<~StringsWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Firewaller', request='WatchUnits', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class HighAvailabilityFacade(Type):
    name = 'HighAvailability'
    version = 2
    schema =     {'definitions': {'Address': {'additionalProperties': False,
                                 'properties': {'Scope': {'type': 'string'},
                                                'SpaceName': {'type': 'string'},
                                                'SpaceProviderId': {'type': 'string'},
                                                'Type': {'type': 'string'},
                                                'Value': {'type': 'string'}},
                                 'required': ['Value',
                                              'Type',
                                              'Scope',
                                              'SpaceName',
                                              'SpaceProviderId'],
                                 'type': 'object'},
                     'ControllersChangeResult': {'additionalProperties': False,
                                                 'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                'result': {'$ref': '#/definitions/ControllersChanges'}},
                                                 'required': ['result'],
                                                 'type': 'object'},
                     'ControllersChangeResults': {'additionalProperties': False,
                                                  'properties': {'results': {'items': {'$ref': '#/definitions/ControllersChangeResult'},
                                                                             'type': 'array'}},
                                                  'required': ['results'],
                                                  'type': 'object'},
                     'ControllersChanges': {'additionalProperties': False,
                                            'properties': {'added': {'items': {'type': 'string'},
                                                                     'type': 'array'},
                                                           'converted': {'items': {'type': 'string'},
                                                                         'type': 'array'},
                                                           'demoted': {'items': {'type': 'string'},
                                                                       'type': 'array'},
                                                           'maintained': {'items': {'type': 'string'},
                                                                          'type': 'array'},
                                                           'promoted': {'items': {'type': 'string'},
                                                                        'type': 'array'},
                                                           'removed': {'items': {'type': 'string'},
                                                                       'type': 'array'}},
                                            'type': 'object'},
                     'ControllersSpec': {'additionalProperties': False,
                                         'properties': {'constraints': {'$ref': '#/definitions/Value'},
                                                        'model-tag': {'type': 'string'},
                                                        'num-controllers': {'type': 'integer'},
                                                        'placement': {'items': {'type': 'string'},
                                                                      'type': 'array'},
                                                        'series': {'type': 'string'}},
                                         'required': ['model-tag',
                                                      'num-controllers'],
                                         'type': 'object'},
                     'ControllersSpecs': {'additionalProperties': False,
                                          'properties': {'specs': {'items': {'$ref': '#/definitions/ControllersSpec'},
                                                                   'type': 'array'}},
                                          'required': ['specs'],
                                          'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'HAMember': {'additionalProperties': False,
                                  'properties': {'public-address': {'$ref': '#/definitions/Address'},
                                                 'series': {'type': 'string'},
                                                 'tag': {'type': 'string'}},
                                  'required': ['tag', 'public-address', 'series'],
                                  'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'Member': {'additionalProperties': False,
                                'properties': {'Address': {'type': 'string'},
                                               'Arbiter': {'type': 'boolean'},
                                               'BuildIndexes': {'type': 'boolean'},
                                               'Hidden': {'type': 'boolean'},
                                               'Id': {'type': 'integer'},
                                               'Priority': {'type': 'number'},
                                               'SlaveDelay': {'type': 'integer'},
                                               'Tags': {'patternProperties': {'.*': {'type': 'string'}},
                                                        'type': 'object'},
                                               'Votes': {'type': 'integer'}},
                                'required': ['Id',
                                             'Address',
                                             'Arbiter',
                                             'BuildIndexes',
                                             'Hidden',
                                             'Priority',
                                             'Tags',
                                             'SlaveDelay',
                                             'Votes'],
                                'type': 'object'},
                     'MongoUpgradeResults': {'additionalProperties': False,
                                             'properties': {'ha-members': {'items': {'$ref': '#/definitions/HAMember'},
                                                                           'type': 'array'},
                                                            'master': {'$ref': '#/definitions/HAMember'},
                                                            'rs-members': {'items': {'$ref': '#/definitions/Member'},
                                                                           'type': 'array'}},
                                             'required': ['rs-members',
                                                          'master',
                                                          'ha-members'],
                                             'type': 'object'},
                     'MongoVersion': {'additionalProperties': False,
                                      'properties': {'engine': {'type': 'string'},
                                                     'major': {'type': 'integer'},
                                                     'minor': {'type': 'integer'},
                                                     'patch': {'type': 'string'}},
                                      'required': ['major',
                                                   'minor',
                                                   'patch',
                                                   'engine'],
                                      'type': 'object'},
                     'ResumeReplicationParams': {'additionalProperties': False,
                                                 'properties': {'members': {'items': {'$ref': '#/definitions/Member'},
                                                                            'type': 'array'}},
                                                 'required': ['members'],
                                                 'type': 'object'},
                     'UpgradeMongoParams': {'additionalProperties': False,
                                            'properties': {'target': {'$ref': '#/definitions/MongoVersion'}},
                                            'required': ['target'],
                                            'type': 'object'},
                     'Value': {'additionalProperties': False,
                               'properties': {'arch': {'type': 'string'},
                                              'container': {'type': 'string'},
                                              'cpu-cores': {'type': 'integer'},
                                              'cpu-power': {'type': 'integer'},
                                              'instance-type': {'type': 'string'},
                                              'mem': {'type': 'integer'},
                                              'root-disk': {'type': 'integer'},
                                              'spaces': {'items': {'type': 'string'},
                                                         'type': 'array'},
                                              'tags': {'items': {'type': 'string'},
                                                       'type': 'array'},
                                              'virt-type': {'type': 'string'}},
                               'type': 'object'}},
     'properties': {'EnableHA': {'properties': {'Params': {'$ref': '#/definitions/ControllersSpecs'},
                                                'Result': {'$ref': '#/definitions/ControllersChangeResults'}},
                                 'type': 'object'},
                    'ResumeHAReplicationAfterUpgrade': {'properties': {'Params': {'$ref': '#/definitions/ResumeReplicationParams'}},
                                                        'type': 'object'},
                    'StopHAReplicationForUpgrade': {'properties': {'Params': {'$ref': '#/definitions/UpgradeMongoParams'},
                                                                   'Result': {'$ref': '#/definitions/MongoUpgradeResults'}},
                                                    'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ControllersChangeResults)
    async def EnableHA(self, specs):
        '''
        specs : typing.Sequence<+T_co>[~ControllersSpec]<~ControllersSpec>
        Returns -> typing.Sequence<+T_co>[~ControllersChangeResult]<~ControllersChangeResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='HighAvailability', request='EnableHA', version=2, params=params)
        params['specs'] = specs
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def ResumeHAReplicationAfterUpgrade(self, members):
        '''
        members : typing.Sequence<+T_co>[~Member]<~Member>
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='HighAvailability', request='ResumeHAReplicationAfterUpgrade', version=2, params=params)
        params['members'] = members
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(MongoUpgradeResults)
    async def StopHAReplicationForUpgrade(self, target):
        '''
        target : MongoVersion
        Returns -> typing.Union[_ForwardRef('HAMember'), typing.Sequence<+T_co>[~Member]<~Member>]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='HighAvailability', request='StopHAReplicationForUpgrade', version=2, params=params)
        params['target'] = target
        reply = await self.rpc(msg)
        return reply


class HostKeyReporterFacade(Type):
    name = 'HostKeyReporter'
    version = 1
    schema =     {'definitions': {'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'SSHHostKeySet': {'additionalProperties': False,
                                       'properties': {'entity-keys': {'items': {'$ref': '#/definitions/SSHHostKeys'},
                                                                      'type': 'array'}},
                                       'required': ['entity-keys'],
                                       'type': 'object'},
                     'SSHHostKeys': {'additionalProperties': False,
                                     'properties': {'public-keys': {'items': {'type': 'string'},
                                                                    'type': 'array'},
                                                    'tag': {'type': 'string'}},
                                     'required': ['tag', 'public-keys'],
                                     'type': 'object'}},
     'properties': {'ReportKeys': {'properties': {'Params': {'$ref': '#/definitions/SSHHostKeySet'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResults)
    async def ReportKeys(self, entity_keys):
        '''
        entity_keys : typing.Sequence<+T_co>[~SSHHostKeys]<~SSHHostKeys>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='HostKeyReporter', request='ReportKeys', version=1, params=params)
        params['entity-keys'] = entity_keys
        reply = await self.rpc(msg)
        return reply


class ImageManagerFacade(Type):
    name = 'ImageManager'
    version = 2
    schema =     {'definitions': {'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'ImageFilterParams': {'additionalProperties': False,
                                           'properties': {'images': {'items': {'$ref': '#/definitions/ImageSpec'},
                                                                     'type': 'array'}},
                                           'required': ['images'],
                                           'type': 'object'},
                     'ImageMetadata': {'additionalProperties': False,
                                       'properties': {'arch': {'type': 'string'},
                                                      'created': {'format': 'date-time',
                                                                  'type': 'string'},
                                                      'kind': {'type': 'string'},
                                                      'series': {'type': 'string'},
                                                      'url': {'type': 'string'}},
                                       'required': ['kind',
                                                    'arch',
                                                    'series',
                                                    'url',
                                                    'created'],
                                       'type': 'object'},
                     'ImageSpec': {'additionalProperties': False,
                                   'properties': {'arch': {'type': 'string'},
                                                  'kind': {'type': 'string'},
                                                  'series': {'type': 'string'}},
                                   'required': ['kind', 'arch', 'series'],
                                   'type': 'object'},
                     'ListImageResult': {'additionalProperties': False,
                                         'properties': {'result': {'items': {'$ref': '#/definitions/ImageMetadata'},
                                                                   'type': 'array'}},
                                         'required': ['result'],
                                         'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'}},
     'properties': {'DeleteImages': {'properties': {'Params': {'$ref': '#/definitions/ImageFilterParams'},
                                                    'Result': {'$ref': '#/definitions/ErrorResults'}},
                                     'type': 'object'},
                    'ListImages': {'properties': {'Params': {'$ref': '#/definitions/ImageFilterParams'},
                                                  'Result': {'$ref': '#/definitions/ListImageResult'}},
                                   'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResults)
    async def DeleteImages(self, images):
        '''
        images : typing.Sequence<+T_co>[~ImageSpec]<~ImageSpec>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ImageManager', request='DeleteImages', version=2, params=params)
        params['images'] = images
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ListImageResult)
    async def ListImages(self, images):
        '''
        images : typing.Sequence<+T_co>[~ImageSpec]<~ImageSpec>
        Returns -> typing.Sequence<+T_co>[~ImageMetadata]<~ImageMetadata>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ImageManager', request='ListImages', version=2, params=params)
        params['images'] = images
        reply = await self.rpc(msg)
        return reply


class ImageMetadataFacade(Type):
    name = 'ImageMetadata'
    version = 2
    schema =     {'definitions': {'CloudImageMetadata': {'additionalProperties': False,
                                            'properties': {'arch': {'type': 'string'},
                                                           'image-id': {'type': 'string'},
                                                           'priority': {'type': 'integer'},
                                                           'region': {'type': 'string'},
                                                           'root-storage-size': {'type': 'integer'},
                                                           'root-storage-type': {'type': 'string'},
                                                           'series': {'type': 'string'},
                                                           'source': {'type': 'string'},
                                                           'stream': {'type': 'string'},
                                                           'version': {'type': 'string'},
                                                           'virt-type': {'type': 'string'}},
                                            'required': ['image-id',
                                                         'region',
                                                         'version',
                                                         'series',
                                                         'arch',
                                                         'source',
                                                         'priority'],
                                            'type': 'object'},
                     'CloudImageMetadataList': {'additionalProperties': False,
                                                'properties': {'metadata': {'items': {'$ref': '#/definitions/CloudImageMetadata'},
                                                                            'type': 'array'}},
                                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'ImageMetadataFilter': {'additionalProperties': False,
                                             'properties': {'arches': {'items': {'type': 'string'},
                                                                       'type': 'array'},
                                                            'region': {'type': 'string'},
                                                            'root-storage-type': {'type': 'string'},
                                                            'series': {'items': {'type': 'string'},
                                                                       'type': 'array'},
                                                            'stream': {'type': 'string'},
                                                            'virt-type': {'type': 'string'}},
                                             'type': 'object'},
                     'ListCloudImageMetadataResult': {'additionalProperties': False,
                                                      'properties': {'result': {'items': {'$ref': '#/definitions/CloudImageMetadata'},
                                                                                'type': 'array'}},
                                                      'required': ['result'],
                                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MetadataImageIds': {'additionalProperties': False,
                                          'properties': {'image-ids': {'items': {'type': 'string'},
                                                                       'type': 'array'}},
                                          'required': ['image-ids'],
                                          'type': 'object'},
                     'MetadataSaveParams': {'additionalProperties': False,
                                            'properties': {'metadata': {'items': {'$ref': '#/definitions/CloudImageMetadataList'},
                                                                        'type': 'array'}},
                                            'type': 'object'}},
     'properties': {'Delete': {'properties': {'Params': {'$ref': '#/definitions/MetadataImageIds'},
                                              'Result': {'$ref': '#/definitions/ErrorResults'}},
                               'type': 'object'},
                    'List': {'properties': {'Params': {'$ref': '#/definitions/ImageMetadataFilter'},
                                            'Result': {'$ref': '#/definitions/ListCloudImageMetadataResult'}},
                             'type': 'object'},
                    'Save': {'properties': {'Params': {'$ref': '#/definitions/MetadataSaveParams'},
                                            'Result': {'$ref': '#/definitions/ErrorResults'}},
                             'type': 'object'},
                    'UpdateFromPublishedImages': {'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResults)
    async def Delete(self, image_ids):
        '''
        image_ids : typing.Sequence<+T_co>[str]
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ImageMetadata', request='Delete', version=2, params=params)
        params['image-ids'] = image_ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ListCloudImageMetadataResult)
    async def List(self, arches, region, root_storage_type, series, stream, virt_type):
        '''
        arches : typing.Sequence<+T_co>[str]
        region : str
        root_storage_type : str
        series : typing.Sequence<+T_co>[str]
        stream : str
        virt_type : str
        Returns -> typing.Sequence<+T_co>[~CloudImageMetadata]<~CloudImageMetadata>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ImageMetadata', request='List', version=2, params=params)
        params['arches'] = arches
        params['region'] = region
        params['root-storage-type'] = root_storage_type
        params['series'] = series
        params['stream'] = stream
        params['virt-type'] = virt_type
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def Save(self, metadata):
        '''
        metadata : typing.Sequence<+T_co>[~CloudImageMetadataList]<~CloudImageMetadataList>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ImageMetadata', request='Save', version=2, params=params)
        params['metadata'] = metadata
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def UpdateFromPublishedImages(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ImageMetadata', request='UpdateFromPublishedImages', version=2, params=params)

        reply = await self.rpc(msg)
        return reply


class InstancePollerFacade(Type):
    name = 'InstancePoller'
    version = 3
    schema =     {'definitions': {'Address': {'additionalProperties': False,
                                 'properties': {'scope': {'type': 'string'},
                                                'space-name': {'type': 'string'},
                                                'type': {'type': 'string'},
                                                'value': {'type': 'string'}},
                                 'required': ['value', 'type', 'scope'],
                                 'type': 'object'},
                     'BoolResult': {'additionalProperties': False,
                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                   'result': {'type': 'boolean'}},
                                    'required': ['result'],
                                    'type': 'object'},
                     'BoolResults': {'additionalProperties': False,
                                     'properties': {'results': {'items': {'$ref': '#/definitions/BoolResult'},
                                                                'type': 'array'}},
                                     'required': ['results'],
                                     'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'EntityStatusArgs': {'additionalProperties': False,
                                          'properties': {'data': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                               'type': 'object'}},
                                                                  'type': 'object'},
                                                         'info': {'type': 'string'},
                                                         'status': {'type': 'string'},
                                                         'tag': {'type': 'string'}},
                                          'required': ['tag',
                                                       'status',
                                                       'info',
                                                       'data'],
                                          'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'LifeResult': {'additionalProperties': False,
                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                   'life': {'type': 'string'}},
                                    'required': ['life'],
                                    'type': 'object'},
                     'LifeResults': {'additionalProperties': False,
                                     'properties': {'results': {'items': {'$ref': '#/definitions/LifeResult'},
                                                                'type': 'array'}},
                                     'required': ['results'],
                                     'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MachineAddresses': {'additionalProperties': False,
                                          'properties': {'addresses': {'items': {'$ref': '#/definitions/Address'},
                                                                       'type': 'array'},
                                                         'tag': {'type': 'string'}},
                                          'required': ['tag', 'addresses'],
                                          'type': 'object'},
                     'MachineAddressesResult': {'additionalProperties': False,
                                                'properties': {'addresses': {'items': {'$ref': '#/definitions/Address'},
                                                                             'type': 'array'},
                                                               'error': {'$ref': '#/definitions/Error'}},
                                                'required': ['addresses'],
                                                'type': 'object'},
                     'MachineAddressesResults': {'additionalProperties': False,
                                                 'properties': {'results': {'items': {'$ref': '#/definitions/MachineAddressesResult'},
                                                                            'type': 'array'}},
                                                 'required': ['results'],
                                                 'type': 'object'},
                     'ModelConfigResult': {'additionalProperties': False,
                                           'properties': {'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                  'type': 'object'}},
                                                                     'type': 'object'}},
                                           'required': ['config'],
                                           'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'SetMachinesAddresses': {'additionalProperties': False,
                                              'properties': {'machine-addresses': {'items': {'$ref': '#/definitions/MachineAddresses'},
                                                                                   'type': 'array'}},
                                              'required': ['machine-addresses'],
                                              'type': 'object'},
                     'SetStatus': {'additionalProperties': False,
                                   'properties': {'entities': {'items': {'$ref': '#/definitions/EntityStatusArgs'},
                                                               'type': 'array'}},
                                   'required': ['entities'],
                                   'type': 'object'},
                     'StatusResult': {'additionalProperties': False,
                                      'properties': {'data': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                           'type': 'object'}},
                                                              'type': 'object'},
                                                     'error': {'$ref': '#/definitions/Error'},
                                                     'id': {'type': 'string'},
                                                     'info': {'type': 'string'},
                                                     'life': {'type': 'string'},
                                                     'since': {'format': 'date-time',
                                                               'type': 'string'},
                                                     'status': {'type': 'string'}},
                                      'required': ['id',
                                                   'life',
                                                   'status',
                                                   'info',
                                                   'data',
                                                   'since'],
                                      'type': 'object'},
                     'StatusResults': {'additionalProperties': False,
                                       'properties': {'results': {'items': {'$ref': '#/definitions/StatusResult'},
                                                                  'type': 'array'}},
                                       'required': ['results'],
                                       'type': 'object'},
                     'StringResult': {'additionalProperties': False,
                                      'properties': {'error': {'$ref': '#/definitions/Error'},
                                                     'result': {'type': 'string'}},
                                      'required': ['result'],
                                      'type': 'object'},
                     'StringResults': {'additionalProperties': False,
                                       'properties': {'results': {'items': {'$ref': '#/definitions/StringResult'},
                                                                  'type': 'array'}},
                                       'required': ['results'],
                                       'type': 'object'},
                     'StringsWatchResult': {'additionalProperties': False,
                                            'properties': {'changes': {'items': {'type': 'string'},
                                                                       'type': 'array'},
                                                           'error': {'$ref': '#/definitions/Error'},
                                                           'watcher-id': {'type': 'string'}},
                                            'required': ['watcher-id'],
                                            'type': 'object'}},
     'properties': {'AreManuallyProvisioned': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                              'Result': {'$ref': '#/definitions/BoolResults'}},
                                               'type': 'object'},
                    'InstanceId': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/StringResults'}},
                                   'type': 'object'},
                    'InstanceStatus': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                      'Result': {'$ref': '#/definitions/StatusResults'}},
                                       'type': 'object'},
                    'Life': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                            'Result': {'$ref': '#/definitions/LifeResults'}},
                             'type': 'object'},
                    'ModelConfig': {'properties': {'Result': {'$ref': '#/definitions/ModelConfigResult'}},
                                    'type': 'object'},
                    'ProviderAddresses': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                         'Result': {'$ref': '#/definitions/MachineAddressesResults'}},
                                          'type': 'object'},
                    'SetInstanceStatus': {'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                         'Result': {'$ref': '#/definitions/ErrorResults'}},
                                          'type': 'object'},
                    'SetProviderAddresses': {'properties': {'Params': {'$ref': '#/definitions/SetMachinesAddresses'},
                                                            'Result': {'$ref': '#/definitions/ErrorResults'}},
                                             'type': 'object'},
                    'Status': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                              'Result': {'$ref': '#/definitions/StatusResults'}},
                               'type': 'object'},
                    'WatchForModelConfigChanges': {'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResult'}},
                                                   'type': 'object'},
                    'WatchModelMachines': {'properties': {'Result': {'$ref': '#/definitions/StringsWatchResult'}},
                                           'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(BoolResults)
    async def AreManuallyProvisioned(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~BoolResult]<~BoolResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='InstancePoller', request='AreManuallyProvisioned', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def InstanceId(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringResult]<~StringResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='InstancePoller', request='InstanceId', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StatusResults)
    async def InstanceStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StatusResult]<~StatusResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='InstancePoller', request='InstanceStatus', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(LifeResults)
    async def Life(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~LifeResult]<~LifeResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='InstancePoller', request='Life', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelConfigResult)
    async def ModelConfig(self):
        '''

        Returns -> typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='InstancePoller', request='ModelConfig', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(MachineAddressesResults)
    async def ProviderAddresses(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~MachineAddressesResult]<~MachineAddressesResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='InstancePoller', request='ProviderAddresses', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetInstanceStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityStatusArgs]<~EntityStatusArgs>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='InstancePoller', request='SetInstanceStatus', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetProviderAddresses(self, machine_addresses):
        '''
        machine_addresses : typing.Sequence<+T_co>[~MachineAddresses]<~MachineAddresses>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='InstancePoller', request='SetProviderAddresses', version=3, params=params)
        params['machine-addresses'] = machine_addresses
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StatusResults)
    async def Status(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StatusResult]<~StatusResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='InstancePoller', request='Status', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResult)
    async def WatchForModelConfigChanges(self):
        '''

        Returns -> typing.Union[str, _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='InstancePoller', request='WatchForModelConfigChanges', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResult)
    async def WatchModelMachines(self):
        '''

        Returns -> typing.Union[typing.Sequence<+T_co>[str], _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='InstancePoller', request='WatchModelMachines', version=3, params=params)

        reply = await self.rpc(msg)
        return reply


class KeyManagerFacade(Type):
    name = 'KeyManager'
    version = 1
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'ListSSHKeys': {'additionalProperties': False,
                                     'properties': {'entities': {'$ref': '#/definitions/Entities'},
                                                    'mode': {'type': 'boolean'}},
                                     'required': ['entities', 'mode'],
                                     'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'ModifyUserSSHKeys': {'additionalProperties': False,
                                           'properties': {'ssh-keys': {'items': {'type': 'string'},
                                                                       'type': 'array'},
                                                          'user': {'type': 'string'}},
                                           'required': ['user', 'ssh-keys'],
                                           'type': 'object'},
                     'StringsResult': {'additionalProperties': False,
                                       'properties': {'error': {'$ref': '#/definitions/Error'},
                                                      'result': {'items': {'type': 'string'},
                                                                 'type': 'array'}},
                                       'type': 'object'},
                     'StringsResults': {'additionalProperties': False,
                                        'properties': {'results': {'items': {'$ref': '#/definitions/StringsResult'},
                                                                   'type': 'array'}},
                                        'required': ['results'],
                                        'type': 'object'}},
     'properties': {'AddKeys': {'properties': {'Params': {'$ref': '#/definitions/ModifyUserSSHKeys'},
                                               'Result': {'$ref': '#/definitions/ErrorResults'}},
                                'type': 'object'},
                    'DeleteKeys': {'properties': {'Params': {'$ref': '#/definitions/ModifyUserSSHKeys'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'},
                    'ImportKeys': {'properties': {'Params': {'$ref': '#/definitions/ModifyUserSSHKeys'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'},
                    'ListKeys': {'properties': {'Params': {'$ref': '#/definitions/ListSSHKeys'},
                                                'Result': {'$ref': '#/definitions/StringsResults'}},
                                 'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResults)
    async def AddKeys(self, ssh_keys, user):
        '''
        ssh_keys : typing.Sequence<+T_co>[str]
        user : str
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='KeyManager', request='AddKeys', version=1, params=params)
        params['ssh-keys'] = ssh_keys
        params['user'] = user
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def DeleteKeys(self, ssh_keys, user):
        '''
        ssh_keys : typing.Sequence<+T_co>[str]
        user : str
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='KeyManager', request='DeleteKeys', version=1, params=params)
        params['ssh-keys'] = ssh_keys
        params['user'] = user
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def ImportKeys(self, ssh_keys, user):
        '''
        ssh_keys : typing.Sequence<+T_co>[str]
        user : str
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='KeyManager', request='ImportKeys', version=1, params=params)
        params['ssh-keys'] = ssh_keys
        params['user'] = user
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsResults)
    async def ListKeys(self, entities, mode):
        '''
        entities : Entities
        mode : bool
        Returns -> typing.Sequence<+T_co>[~StringsResult]<~StringsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='KeyManager', request='ListKeys', version=1, params=params)
        params['entities'] = entities
        params['mode'] = mode
        reply = await self.rpc(msg)
        return reply


class KeyUpdaterFacade(Type):
    name = 'KeyUpdater'
    version = 1
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'NotifyWatchResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/NotifyWatchResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'StringsResult': {'additionalProperties': False,
                                       'properties': {'error': {'$ref': '#/definitions/Error'},
                                                      'result': {'items': {'type': 'string'},
                                                                 'type': 'array'}},
                                       'type': 'object'},
                     'StringsResults': {'additionalProperties': False,
                                        'properties': {'results': {'items': {'$ref': '#/definitions/StringsResult'},
                                                                   'type': 'array'}},
                                        'required': ['results'],
                                        'type': 'object'}},
     'properties': {'AuthorisedKeys': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                      'Result': {'$ref': '#/definitions/StringsResults'}},
                                       'type': 'object'},
                    'WatchAuthorisedKeys': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                           'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                            'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(StringsResults)
    async def AuthorisedKeys(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringsResult]<~StringsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='KeyUpdater', request='AuthorisedKeys', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchAuthorisedKeys(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='KeyUpdater', request='WatchAuthorisedKeys', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class LeadershipServiceFacade(Type):
    name = 'LeadershipService'
    version = 2
    schema =     {'definitions': {'ApplicationTag': {'additionalProperties': False,
                                        'properties': {'Name': {'type': 'string'}},
                                        'required': ['Name'],
                                        'type': 'object'},
                     'ClaimLeadershipBulkParams': {'additionalProperties': False,
                                                   'properties': {'params': {'items': {'$ref': '#/definitions/ClaimLeadershipParams'},
                                                                             'type': 'array'}},
                                                   'required': ['params'],
                                                   'type': 'object'},
                     'ClaimLeadershipBulkResults': {'additionalProperties': False,
                                                    'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                               'type': 'array'}},
                                                    'required': ['results'],
                                                    'type': 'object'},
                     'ClaimLeadershipParams': {'additionalProperties': False,
                                               'properties': {'application-tag': {'type': 'string'},
                                                              'duration': {'type': 'number'},
                                                              'unit-tag': {'type': 'string'}},
                                               'required': ['application-tag',
                                                            'unit-tag',
                                                            'duration'],
                                               'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'}},
     'properties': {'BlockUntilLeadershipReleased': {'properties': {'Params': {'$ref': '#/definitions/ApplicationTag'},
                                                                    'Result': {'$ref': '#/definitions/ErrorResult'}},
                                                     'type': 'object'},
                    'ClaimLeadership': {'properties': {'Params': {'$ref': '#/definitions/ClaimLeadershipBulkParams'},
                                                       'Result': {'$ref': '#/definitions/ClaimLeadershipBulkResults'}},
                                        'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResult)
    async def BlockUntilLeadershipReleased(self, name):
        '''
        name : str
        Returns -> Error
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='LeadershipService', request='BlockUntilLeadershipReleased', version=2, params=params)
        params['Name'] = name
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ClaimLeadershipBulkResults)
    async def ClaimLeadership(self, params):
        '''
        params : typing.Sequence<+T_co>[~ClaimLeadershipParams]<~ClaimLeadershipParams>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='LeadershipService', request='ClaimLeadership', version=2, params=params)
        params['params'] = params
        reply = await self.rpc(msg)
        return reply


class LifeFlagFacade(Type):
    name = 'LifeFlag'
    version = 1
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'LifeResult': {'additionalProperties': False,
                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                   'life': {'type': 'string'}},
                                    'required': ['life'],
                                    'type': 'object'},
                     'LifeResults': {'additionalProperties': False,
                                     'properties': {'results': {'items': {'$ref': '#/definitions/LifeResult'},
                                                                'type': 'array'}},
                                     'required': ['results'],
                                     'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'NotifyWatchResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/NotifyWatchResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'}},
     'properties': {'Life': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                            'Result': {'$ref': '#/definitions/LifeResults'}},
                             'type': 'object'},
                    'Watch': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                             'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                              'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(LifeResults)
    async def Life(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~LifeResult]<~LifeResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='LifeFlag', request='Life', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def Watch(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='LifeFlag', request='Watch', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class LogForwardingFacade(Type):
    name = 'LogForwarding'
    version = 1
    schema =     {'definitions': {'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'LogForwardingGetLastSentParams': {'additionalProperties': False,
                                                        'properties': {'ids': {'items': {'$ref': '#/definitions/LogForwardingID'},
                                                                               'type': 'array'}},
                                                        'required': ['ids'],
                                                        'type': 'object'},
                     'LogForwardingGetLastSentResult': {'additionalProperties': False,
                                                        'properties': {'err': {'$ref': '#/definitions/Error'},
                                                                       'record-id': {'type': 'integer'},
                                                                       'record-timestamp': {'type': 'integer'}},
                                                        'required': ['record-id',
                                                                     'record-timestamp',
                                                                     'err'],
                                                        'type': 'object'},
                     'LogForwardingGetLastSentResults': {'additionalProperties': False,
                                                         'properties': {'results': {'items': {'$ref': '#/definitions/LogForwardingGetLastSentResult'},
                                                                                    'type': 'array'}},
                                                         'required': ['results'],
                                                         'type': 'object'},
                     'LogForwardingID': {'additionalProperties': False,
                                         'properties': {'model': {'type': 'string'},
                                                        'sink': {'type': 'string'}},
                                         'required': ['model', 'sink'],
                                         'type': 'object'},
                     'LogForwardingSetLastSentParam': {'additionalProperties': False,
                                                       'properties': {'LogForwardingID': {'$ref': '#/definitions/LogForwardingID'},
                                                                      'record-id': {'type': 'integer'},
                                                                      'record-timestamp': {'type': 'integer'}},
                                                       'required': ['LogForwardingID',
                                                                    'record-id',
                                                                    'record-timestamp'],
                                                       'type': 'object'},
                     'LogForwardingSetLastSentParams': {'additionalProperties': False,
                                                        'properties': {'params': {'items': {'$ref': '#/definitions/LogForwardingSetLastSentParam'},
                                                                                  'type': 'array'}},
                                                        'required': ['params'],
                                                        'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'}},
     'properties': {'GetLastSent': {'properties': {'Params': {'$ref': '#/definitions/LogForwardingGetLastSentParams'},
                                                   'Result': {'$ref': '#/definitions/LogForwardingGetLastSentResults'}},
                                    'type': 'object'},
                    'SetLastSent': {'properties': {'Params': {'$ref': '#/definitions/LogForwardingSetLastSentParams'},
                                                   'Result': {'$ref': '#/definitions/ErrorResults'}},
                                    'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(LogForwardingGetLastSentResults)
    async def GetLastSent(self, ids):
        '''
        ids : typing.Sequence<+T_co>[~LogForwardingID]<~LogForwardingID>
        Returns -> typing.Sequence<+T_co>[~LogForwardingGetLastSentResult]<~LogForwardingGetLastSentResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='LogForwarding', request='GetLastSent', version=1, params=params)
        params['ids'] = ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetLastSent(self, params):
        '''
        params : typing.Sequence<+T_co>[~LogForwardingSetLastSentParam]<~LogForwardingSetLastSentParam>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='LogForwarding', request='SetLastSent', version=1, params=params)
        params['params'] = params
        reply = await self.rpc(msg)
        return reply


class LoggerFacade(Type):
    name = 'Logger'
    version = 1
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'NotifyWatchResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/NotifyWatchResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'StringResult': {'additionalProperties': False,
                                      'properties': {'error': {'$ref': '#/definitions/Error'},
                                                     'result': {'type': 'string'}},
                                      'required': ['result'],
                                      'type': 'object'},
                     'StringResults': {'additionalProperties': False,
                                       'properties': {'results': {'items': {'$ref': '#/definitions/StringResult'},
                                                                  'type': 'array'}},
                                       'required': ['results'],
                                       'type': 'object'}},
     'properties': {'LoggingConfig': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                     'Result': {'$ref': '#/definitions/StringResults'}},
                                      'type': 'object'},
                    'WatchLoggingConfig': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                          'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                           'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(StringResults)
    async def LoggingConfig(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringResult]<~StringResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Logger', request='LoggingConfig', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchLoggingConfig(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Logger', request='WatchLoggingConfig', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class MachineActionsFacade(Type):
    name = 'MachineActions'
    version = 1
    schema =     {'definitions': {'Action': {'additionalProperties': False,
                                'properties': {'name': {'type': 'string'},
                                               'parameters': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                           'type': 'object'}},
                                                              'type': 'object'},
                                               'receiver': {'type': 'string'},
                                               'tag': {'type': 'string'}},
                                'required': ['tag', 'receiver', 'name'],
                                'type': 'object'},
                     'ActionExecutionResult': {'additionalProperties': False,
                                               'properties': {'action-tag': {'type': 'string'},
                                                              'message': {'type': 'string'},
                                                              'results': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                       'type': 'object'}},
                                                                          'type': 'object'},
                                                              'status': {'type': 'string'}},
                                               'required': ['action-tag', 'status'],
                                               'type': 'object'},
                     'ActionExecutionResults': {'additionalProperties': False,
                                                'properties': {'results': {'items': {'$ref': '#/definitions/ActionExecutionResult'},
                                                                           'type': 'array'}},
                                                'type': 'object'},
                     'ActionResult': {'additionalProperties': False,
                                      'properties': {'action': {'$ref': '#/definitions/Action'},
                                                     'completed': {'format': 'date-time',
                                                                   'type': 'string'},
                                                     'enqueued': {'format': 'date-time',
                                                                  'type': 'string'},
                                                     'error': {'$ref': '#/definitions/Error'},
                                                     'message': {'type': 'string'},
                                                     'output': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                             'type': 'object'}},
                                                                'type': 'object'},
                                                     'started': {'format': 'date-time',
                                                                 'type': 'string'},
                                                     'status': {'type': 'string'}},
                                      'type': 'object'},
                     'ActionResults': {'additionalProperties': False,
                                       'properties': {'results': {'items': {'$ref': '#/definitions/ActionResult'},
                                                                  'type': 'array'}},
                                       'type': 'object'},
                     'ActionsByReceiver': {'additionalProperties': False,
                                           'properties': {'actions': {'items': {'$ref': '#/definitions/ActionResult'},
                                                                      'type': 'array'},
                                                          'error': {'$ref': '#/definitions/Error'},
                                                          'receiver': {'type': 'string'}},
                                           'type': 'object'},
                     'ActionsByReceivers': {'additionalProperties': False,
                                            'properties': {'actions': {'items': {'$ref': '#/definitions/ActionsByReceiver'},
                                                                       'type': 'array'}},
                                            'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'StringsWatchResult': {'additionalProperties': False,
                                            'properties': {'changes': {'items': {'type': 'string'},
                                                                       'type': 'array'},
                                                           'error': {'$ref': '#/definitions/Error'},
                                                           'watcher-id': {'type': 'string'}},
                                            'required': ['watcher-id'],
                                            'type': 'object'},
                     'StringsWatchResults': {'additionalProperties': False,
                                             'properties': {'results': {'items': {'$ref': '#/definitions/StringsWatchResult'},
                                                                        'type': 'array'}},
                                             'required': ['results'],
                                             'type': 'object'}},
     'properties': {'Actions': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                               'Result': {'$ref': '#/definitions/ActionResults'}},
                                'type': 'object'},
                    'BeginActions': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                    'Result': {'$ref': '#/definitions/ErrorResults'}},
                                     'type': 'object'},
                    'FinishActions': {'properties': {'Params': {'$ref': '#/definitions/ActionExecutionResults'},
                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                      'type': 'object'},
                    'RunningActions': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                      'Result': {'$ref': '#/definitions/ActionsByReceivers'}},
                                       'type': 'object'},
                    'WatchActionNotifications': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                                 'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ActionResults)
    async def Actions(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ActionResult]<~ActionResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MachineActions', request='Actions', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def BeginActions(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MachineActions', request='BeginActions', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def FinishActions(self, results):
        '''
        results : typing.Sequence<+T_co>[~ActionExecutionResult]<~ActionExecutionResult>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MachineActions', request='FinishActions', version=1, params=params)
        params['results'] = results
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ActionsByReceivers)
    async def RunningActions(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ActionsByReceiver]<~ActionsByReceiver>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MachineActions', request='RunningActions', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchActionNotifications(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringsWatchResult]<~StringsWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MachineActions', request='WatchActionNotifications', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class MachineManagerFacade(Type):
    name = 'MachineManager'
    version = 2
    schema =     {'definitions': {'AddMachineParams': {'additionalProperties': False,
                                          'properties': {'addresses': {'items': {'$ref': '#/definitions/Address'},
                                                                       'type': 'array'},
                                                         'constraints': {'$ref': '#/definitions/Value'},
                                                         'container-type': {'type': 'string'},
                                                         'disks': {'items': {'$ref': '#/definitions/Constraints'},
                                                                   'type': 'array'},
                                                         'hardware-characteristics': {'$ref': '#/definitions/HardwareCharacteristics'},
                                                         'instance-id': {'type': 'string'},
                                                         'jobs': {'items': {'type': 'string'},
                                                                  'type': 'array'},
                                                         'nonce': {'type': 'string'},
                                                         'parent-id': {'type': 'string'},
                                                         'placement': {'$ref': '#/definitions/Placement'},
                                                         'series': {'type': 'string'}},
                                          'required': ['series',
                                                       'constraints',
                                                       'jobs',
                                                       'parent-id',
                                                       'container-type',
                                                       'instance-id',
                                                       'nonce',
                                                       'hardware-characteristics',
                                                       'addresses'],
                                          'type': 'object'},
                     'AddMachines': {'additionalProperties': False,
                                     'properties': {'params': {'items': {'$ref': '#/definitions/AddMachineParams'},
                                                               'type': 'array'}},
                                     'required': ['params'],
                                     'type': 'object'},
                     'AddMachinesResult': {'additionalProperties': False,
                                           'properties': {'error': {'$ref': '#/definitions/Error'},
                                                          'machine': {'type': 'string'}},
                                           'required': ['machine'],
                                           'type': 'object'},
                     'AddMachinesResults': {'additionalProperties': False,
                                            'properties': {'machines': {'items': {'$ref': '#/definitions/AddMachinesResult'},
                                                                        'type': 'array'}},
                                            'required': ['machines'],
                                            'type': 'object'},
                     'Address': {'additionalProperties': False,
                                 'properties': {'scope': {'type': 'string'},
                                                'space-name': {'type': 'string'},
                                                'type': {'type': 'string'},
                                                'value': {'type': 'string'}},
                                 'required': ['value', 'type', 'scope'],
                                 'type': 'object'},
                     'Constraints': {'additionalProperties': False,
                                     'properties': {'Count': {'type': 'integer'},
                                                    'Pool': {'type': 'string'},
                                                    'Size': {'type': 'integer'}},
                                     'required': ['Pool', 'Size', 'Count'],
                                     'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'HardwareCharacteristics': {'additionalProperties': False,
                                                 'properties': {'arch': {'type': 'string'},
                                                                'availability-zone': {'type': 'string'},
                                                                'cpu-cores': {'type': 'integer'},
                                                                'cpu-power': {'type': 'integer'},
                                                                'mem': {'type': 'integer'},
                                                                'root-disk': {'type': 'integer'},
                                                                'tags': {'items': {'type': 'string'},
                                                                         'type': 'array'}},
                                                 'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'Placement': {'additionalProperties': False,
                                   'properties': {'directive': {'type': 'string'},
                                                  'scope': {'type': 'string'}},
                                   'required': ['scope', 'directive'],
                                   'type': 'object'},
                     'Value': {'additionalProperties': False,
                               'properties': {'arch': {'type': 'string'},
                                              'container': {'type': 'string'},
                                              'cpu-cores': {'type': 'integer'},
                                              'cpu-power': {'type': 'integer'},
                                              'instance-type': {'type': 'string'},
                                              'mem': {'type': 'integer'},
                                              'root-disk': {'type': 'integer'},
                                              'spaces': {'items': {'type': 'string'},
                                                         'type': 'array'},
                                              'tags': {'items': {'type': 'string'},
                                                       'type': 'array'},
                                              'virt-type': {'type': 'string'}},
                               'type': 'object'}},
     'properties': {'AddMachines': {'properties': {'Params': {'$ref': '#/definitions/AddMachines'},
                                                   'Result': {'$ref': '#/definitions/AddMachinesResults'}},
                                    'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(AddMachinesResults)
    async def AddMachines(self, params):
        '''
        params : typing.Sequence<+T_co>[~AddMachineParams]<~AddMachineParams>
        Returns -> typing.Sequence<+T_co>[~AddMachinesResult]<~AddMachinesResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MachineManager', request='AddMachines', version=2, params=params)
        params['params'] = params
        reply = await self.rpc(msg)
        return reply


class MachineUndertakerFacade(Type):
    name = 'MachineUndertaker'
    version = 1
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'EntitiesResult': {'additionalProperties': False,
                                        'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                                    'type': 'array'},
                                                       'error': {'$ref': '#/definitions/Error'}},
                                        'required': ['entities'],
                                        'type': 'object'},
                     'EntitiesResults': {'additionalProperties': False,
                                         'properties': {'results': {'items': {'$ref': '#/definitions/EntitiesResult'},
                                                                    'type': 'array'}},
                                         'required': ['results'],
                                         'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'NotifyWatchResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/NotifyWatchResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'ProviderInterfaceInfo': {'additionalProperties': False,
                                               'properties': {'interface-name': {'type': 'string'},
                                                              'mac-address': {'type': 'string'},
                                                              'provider-id': {'type': 'string'}},
                                               'required': ['interface-name',
                                                            'mac-address',
                                                            'provider-id'],
                                               'type': 'object'},
                     'ProviderInterfaceInfoResult': {'additionalProperties': False,
                                                     'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                    'interfaces': {'items': {'$ref': '#/definitions/ProviderInterfaceInfo'},
                                                                                   'type': 'array'},
                                                                    'machine-tag': {'type': 'string'}},
                                                     'required': ['machine-tag',
                                                                  'interfaces'],
                                                     'type': 'object'},
                     'ProviderInterfaceInfoResults': {'additionalProperties': False,
                                                      'properties': {'results': {'items': {'$ref': '#/definitions/ProviderInterfaceInfoResult'},
                                                                                 'type': 'array'}},
                                                      'required': ['results'],
                                                      'type': 'object'}},
     'properties': {'AllMachineRemovals': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                          'Result': {'$ref': '#/definitions/EntitiesResults'}},
                                           'type': 'object'},
                    'CompleteMachineRemovals': {'properties': {'Params': {'$ref': '#/definitions/Entities'}},
                                                'type': 'object'},
                    'GetMachineProviderInterfaceInfo': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                       'Result': {'$ref': '#/definitions/ProviderInterfaceInfoResults'}},
                                                        'type': 'object'},
                    'WatchMachineRemovals': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                            'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                             'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(EntitiesResults)
    async def AllMachineRemovals(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~EntitiesResult]<~EntitiesResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MachineUndertaker', request='AllMachineRemovals', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def CompleteMachineRemovals(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MachineUndertaker', request='CompleteMachineRemovals', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ProviderInterfaceInfoResults)
    async def GetMachineProviderInterfaceInfo(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ProviderInterfaceInfoResult]<~ProviderInterfaceInfoResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MachineUndertaker', request='GetMachineProviderInterfaceInfo', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchMachineRemovals(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MachineUndertaker', request='WatchMachineRemovals', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class MachinerFacade(Type):
    name = 'Machiner'
    version = 1
    schema =     {'definitions': {'APIHostPortsResult': {'additionalProperties': False,
                                            'properties': {'servers': {'items': {'items': {'$ref': '#/definitions/HostPort'},
                                                                                 'type': 'array'},
                                                                       'type': 'array'}},
                                            'required': ['servers'],
                                            'type': 'object'},
                     'Address': {'additionalProperties': False,
                                 'properties': {'scope': {'type': 'string'},
                                                'space-name': {'type': 'string'},
                                                'type': {'type': 'string'},
                                                'value': {'type': 'string'}},
                                 'required': ['value', 'type', 'scope'],
                                 'type': 'object'},
                     'BytesResult': {'additionalProperties': False,
                                     'properties': {'result': {'items': {'type': 'integer'},
                                                               'type': 'array'}},
                                     'required': ['result'],
                                     'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'EntityStatusArgs': {'additionalProperties': False,
                                          'properties': {'data': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                               'type': 'object'}},
                                                                  'type': 'object'},
                                                         'info': {'type': 'string'},
                                                         'status': {'type': 'string'},
                                                         'tag': {'type': 'string'}},
                                          'required': ['tag',
                                                       'status',
                                                       'info',
                                                       'data'],
                                          'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'HostPort': {'additionalProperties': False,
                                  'properties': {'Address': {'$ref': '#/definitions/Address'},
                                                 'port': {'type': 'integer'}},
                                  'required': ['Address', 'port'],
                                  'type': 'object'},
                     'JobsResult': {'additionalProperties': False,
                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                   'jobs': {'items': {'type': 'string'},
                                                            'type': 'array'}},
                                    'required': ['jobs'],
                                    'type': 'object'},
                     'JobsResults': {'additionalProperties': False,
                                     'properties': {'results': {'items': {'$ref': '#/definitions/JobsResult'},
                                                                'type': 'array'}},
                                     'required': ['results'],
                                     'type': 'object'},
                     'LifeResult': {'additionalProperties': False,
                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                   'life': {'type': 'string'}},
                                    'required': ['life'],
                                    'type': 'object'},
                     'LifeResults': {'additionalProperties': False,
                                     'properties': {'results': {'items': {'$ref': '#/definitions/LifeResult'},
                                                                'type': 'array'}},
                                     'required': ['results'],
                                     'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MachineAddresses': {'additionalProperties': False,
                                          'properties': {'addresses': {'items': {'$ref': '#/definitions/Address'},
                                                                       'type': 'array'},
                                                         'tag': {'type': 'string'}},
                                          'required': ['tag', 'addresses'],
                                          'type': 'object'},
                     'NetworkConfig': {'additionalProperties': False,
                                       'properties': {'address': {'type': 'string'},
                                                      'cidr': {'type': 'string'},
                                                      'config-type': {'type': 'string'},
                                                      'device-index': {'type': 'integer'},
                                                      'disabled': {'type': 'boolean'},
                                                      'dns-search-domains': {'items': {'type': 'string'},
                                                                             'type': 'array'},
                                                      'dns-servers': {'items': {'type': 'string'},
                                                                      'type': 'array'},
                                                      'gateway-address': {'type': 'string'},
                                                      'interface-name': {'type': 'string'},
                                                      'interface-type': {'type': 'string'},
                                                      'mac-address': {'type': 'string'},
                                                      'mtu': {'type': 'integer'},
                                                      'no-auto-start': {'type': 'boolean'},
                                                      'parent-interface-name': {'type': 'string'},
                                                      'provider-address-id': {'type': 'string'},
                                                      'provider-id': {'type': 'string'},
                                                      'provider-space-id': {'type': 'string'},
                                                      'provider-subnet-id': {'type': 'string'},
                                                      'provider-vlan-id': {'type': 'string'},
                                                      'vlan-tag': {'type': 'integer'}},
                                       'required': ['device-index',
                                                    'mac-address',
                                                    'cidr',
                                                    'mtu',
                                                    'provider-id',
                                                    'provider-subnet-id',
                                                    'provider-space-id',
                                                    'provider-address-id',
                                                    'provider-vlan-id',
                                                    'vlan-tag',
                                                    'interface-name',
                                                    'parent-interface-name',
                                                    'interface-type',
                                                    'disabled'],
                                       'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'NotifyWatchResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/NotifyWatchResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'SetMachineNetworkConfig': {'additionalProperties': False,
                                                 'properties': {'config': {'items': {'$ref': '#/definitions/NetworkConfig'},
                                                                           'type': 'array'},
                                                                'tag': {'type': 'string'}},
                                                 'required': ['tag', 'config'],
                                                 'type': 'object'},
                     'SetMachinesAddresses': {'additionalProperties': False,
                                              'properties': {'machine-addresses': {'items': {'$ref': '#/definitions/MachineAddresses'},
                                                                                   'type': 'array'}},
                                              'required': ['machine-addresses'],
                                              'type': 'object'},
                     'SetStatus': {'additionalProperties': False,
                                   'properties': {'entities': {'items': {'$ref': '#/definitions/EntityStatusArgs'},
                                                               'type': 'array'}},
                                   'required': ['entities'],
                                   'type': 'object'},
                     'StringResult': {'additionalProperties': False,
                                      'properties': {'error': {'$ref': '#/definitions/Error'},
                                                     'result': {'type': 'string'}},
                                      'required': ['result'],
                                      'type': 'object'},
                     'StringsResult': {'additionalProperties': False,
                                       'properties': {'error': {'$ref': '#/definitions/Error'},
                                                      'result': {'items': {'type': 'string'},
                                                                 'type': 'array'}},
                                       'type': 'object'}},
     'properties': {'APIAddresses': {'properties': {'Result': {'$ref': '#/definitions/StringsResult'}},
                                     'type': 'object'},
                    'APIHostPorts': {'properties': {'Result': {'$ref': '#/definitions/APIHostPortsResult'}},
                                     'type': 'object'},
                    'CACert': {'properties': {'Result': {'$ref': '#/definitions/BytesResult'}},
                               'type': 'object'},
                    'EnsureDead': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'},
                    'Jobs': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                            'Result': {'$ref': '#/definitions/JobsResults'}},
                             'type': 'object'},
                    'Life': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                            'Result': {'$ref': '#/definitions/LifeResults'}},
                             'type': 'object'},
                    'ModelUUID': {'properties': {'Result': {'$ref': '#/definitions/StringResult'}},
                                  'type': 'object'},
                    'SetMachineAddresses': {'properties': {'Params': {'$ref': '#/definitions/SetMachinesAddresses'},
                                                           'Result': {'$ref': '#/definitions/ErrorResults'}},
                                            'type': 'object'},
                    'SetObservedNetworkConfig': {'properties': {'Params': {'$ref': '#/definitions/SetMachineNetworkConfig'}},
                                                 'type': 'object'},
                    'SetProviderNetworkConfig': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                'Result': {'$ref': '#/definitions/ErrorResults'}},
                                                 'type': 'object'},
                    'SetStatus': {'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                 'Result': {'$ref': '#/definitions/ErrorResults'}},
                                  'type': 'object'},
                    'UpdateStatus': {'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                    'Result': {'$ref': '#/definitions/ErrorResults'}},
                                     'type': 'object'},
                    'Watch': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                             'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                              'type': 'object'},
                    'WatchAPIHostPorts': {'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResult'}},
                                          'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(StringsResult)
    async def APIAddresses(self):
        '''

        Returns -> typing.Union[_ForwardRef('Error'), typing.Sequence<+T_co>[str]]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Machiner', request='APIAddresses', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(APIHostPortsResult)
    async def APIHostPorts(self):
        '''

        Returns -> typing.Sequence<+T_co>[~HostPort]<~HostPort>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Machiner', request='APIHostPorts', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(BytesResult)
    async def CACert(self):
        '''

        Returns -> typing.Sequence<+T_co>[int]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Machiner', request='CACert', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def EnsureDead(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Machiner', request='EnsureDead', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(JobsResults)
    async def Jobs(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~JobsResult]<~JobsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Machiner', request='Jobs', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(LifeResults)
    async def Life(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~LifeResult]<~LifeResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Machiner', request='Life', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResult)
    async def ModelUUID(self):
        '''

        Returns -> typing.Union[_ForwardRef('Error'), str]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Machiner', request='ModelUUID', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetMachineAddresses(self, machine_addresses):
        '''
        machine_addresses : typing.Sequence<+T_co>[~MachineAddresses]<~MachineAddresses>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Machiner', request='SetMachineAddresses', version=1, params=params)
        params['machine-addresses'] = machine_addresses
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def SetObservedNetworkConfig(self, config, tag):
        '''
        config : typing.Sequence<+T_co>[~NetworkConfig]<~NetworkConfig>
        tag : str
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Machiner', request='SetObservedNetworkConfig', version=1, params=params)
        params['config'] = config
        params['tag'] = tag
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetProviderNetworkConfig(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Machiner', request='SetProviderNetworkConfig', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityStatusArgs]<~EntityStatusArgs>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Machiner', request='SetStatus', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def UpdateStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityStatusArgs]<~EntityStatusArgs>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Machiner', request='UpdateStatus', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def Watch(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Machiner', request='Watch', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResult)
    async def WatchAPIHostPorts(self):
        '''

        Returns -> typing.Union[str, _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Machiner', request='WatchAPIHostPorts', version=1, params=params)

        reply = await self.rpc(msg)
        return reply


class MeterStatusFacade(Type):
    name = 'MeterStatus'
    version = 1
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MeterStatusResult': {'additionalProperties': False,
                                           'properties': {'code': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'},
                                                          'info': {'type': 'string'}},
                                           'required': ['code', 'info'],
                                           'type': 'object'},
                     'MeterStatusResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/MeterStatusResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'NotifyWatchResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/NotifyWatchResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'}},
     'properties': {'GetMeterStatus': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                      'Result': {'$ref': '#/definitions/MeterStatusResults'}},
                                       'type': 'object'},
                    'WatchMeterStatus': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                        'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                         'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(MeterStatusResults)
    async def GetMeterStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~MeterStatusResult]<~MeterStatusResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MeterStatus', request='GetMeterStatus', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchMeterStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MeterStatus', request='WatchMeterStatus', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class MetricsAdderFacade(Type):
    name = 'MetricsAdder'
    version = 2
    schema =     {'definitions': {'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'Metric': {'additionalProperties': False,
                                'properties': {'key': {'type': 'string'},
                                               'time': {'format': 'date-time',
                                                        'type': 'string'},
                                               'value': {'type': 'string'}},
                                'required': ['key', 'value', 'time'],
                                'type': 'object'},
                     'MetricBatch': {'additionalProperties': False,
                                     'properties': {'charm-url': {'type': 'string'},
                                                    'created': {'format': 'date-time',
                                                                'type': 'string'},
                                                    'metrics': {'items': {'$ref': '#/definitions/Metric'},
                                                                'type': 'array'},
                                                    'uuid': {'type': 'string'}},
                                     'required': ['uuid',
                                                  'charm-url',
                                                  'created',
                                                  'metrics'],
                                     'type': 'object'},
                     'MetricBatchParam': {'additionalProperties': False,
                                          'properties': {'batch': {'$ref': '#/definitions/MetricBatch'},
                                                         'tag': {'type': 'string'}},
                                          'required': ['tag', 'batch'],
                                          'type': 'object'},
                     'MetricBatchParams': {'additionalProperties': False,
                                           'properties': {'batches': {'items': {'$ref': '#/definitions/MetricBatchParam'},
                                                                      'type': 'array'}},
                                           'required': ['batches'],
                                           'type': 'object'}},
     'properties': {'AddMetricBatches': {'properties': {'Params': {'$ref': '#/definitions/MetricBatchParams'},
                                                        'Result': {'$ref': '#/definitions/ErrorResults'}},
                                         'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResults)
    async def AddMetricBatches(self, batches):
        '''
        batches : typing.Sequence<+T_co>[~MetricBatchParam]<~MetricBatchParam>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MetricsAdder', request='AddMetricBatches', version=2, params=params)
        params['batches'] = batches
        reply = await self.rpc(msg)
        return reply


class MetricsDebugFacade(Type):
    name = 'MetricsDebug'
    version = 2
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'EntityMetrics': {'additionalProperties': False,
                                       'properties': {'error': {'$ref': '#/definitions/Error'},
                                                      'metrics': {'items': {'$ref': '#/definitions/MetricResult'},
                                                                  'type': 'array'}},
                                       'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MeterStatusParam': {'additionalProperties': False,
                                          'properties': {'code': {'type': 'string'},
                                                         'info': {'type': 'string'},
                                                         'tag': {'type': 'string'}},
                                          'required': ['tag', 'code', 'info'],
                                          'type': 'object'},
                     'MeterStatusParams': {'additionalProperties': False,
                                           'properties': {'statues': {'items': {'$ref': '#/definitions/MeterStatusParam'},
                                                                      'type': 'array'}},
                                           'required': ['statues'],
                                           'type': 'object'},
                     'MetricResult': {'additionalProperties': False,
                                      'properties': {'key': {'type': 'string'},
                                                     'time': {'format': 'date-time',
                                                              'type': 'string'},
                                                     'unit': {'type': 'string'},
                                                     'value': {'type': 'string'}},
                                      'required': ['time', 'key', 'value', 'unit'],
                                      'type': 'object'},
                     'MetricResults': {'additionalProperties': False,
                                       'properties': {'results': {'items': {'$ref': '#/definitions/EntityMetrics'},
                                                                  'type': 'array'}},
                                       'required': ['results'],
                                       'type': 'object'}},
     'properties': {'GetMetrics': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/MetricResults'}},
                                   'type': 'object'},
                    'SetMeterStatus': {'properties': {'Params': {'$ref': '#/definitions/MeterStatusParams'},
                                                      'Result': {'$ref': '#/definitions/ErrorResults'}},
                                       'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(MetricResults)
    async def GetMetrics(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~EntityMetrics]<~EntityMetrics>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MetricsDebug', request='GetMetrics', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetMeterStatus(self, statues):
        '''
        statues : typing.Sequence<+T_co>[~MeterStatusParam]<~MeterStatusParam>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MetricsDebug', request='SetMeterStatus', version=2, params=params)
        params['statues'] = statues
        reply = await self.rpc(msg)
        return reply


class MetricsManagerFacade(Type):
    name = 'MetricsManager'
    version = 1
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'}},
     'properties': {'CleanupOldMetrics': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                         'Result': {'$ref': '#/definitions/ErrorResults'}},
                                          'type': 'object'},
                    'SendMetrics': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                   'Result': {'$ref': '#/definitions/ErrorResults'}},
                                    'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResults)
    async def CleanupOldMetrics(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MetricsManager', request='CleanupOldMetrics', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SendMetrics(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MetricsManager', request='SendMetrics', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class MigrationFlagFacade(Type):
    name = 'MigrationFlag'
    version = 1
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'NotifyWatchResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/NotifyWatchResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'PhaseResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'},
                                                    'phase': {'type': 'string'}},
                                     'type': 'object'},
                     'PhaseResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/PhaseResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'}},
     'properties': {'Phase': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                             'Result': {'$ref': '#/definitions/PhaseResults'}},
                              'type': 'object'},
                    'Watch': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                             'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                              'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(PhaseResults)
    async def Phase(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~PhaseResult]<~PhaseResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationFlag', request='Phase', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def Watch(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationFlag', request='Watch', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class MigrationMasterFacade(Type):
    name = 'MigrationMaster'
    version = 1
    schema =     {'definitions': {'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MasterMigrationStatus': {'additionalProperties': False,
                                               'properties': {'migration-id': {'type': 'string'},
                                                              'phase': {'type': 'string'},
                                                              'phase-changed-time': {'format': 'date-time',
                                                                                     'type': 'string'},
                                                              'spec': {'$ref': '#/definitions/MigrationSpec'}},
                                               'required': ['spec',
                                                            'migration-id',
                                                            'phase',
                                                            'phase-changed-time'],
                                               'type': 'object'},
                     'MigrationModelInfo': {'additionalProperties': False,
                                            'properties': {'agent-version': {'$ref': '#/definitions/Number'},
                                                           'name': {'type': 'string'},
                                                           'owner-tag': {'type': 'string'},
                                                           'uuid': {'type': 'string'}},
                                            'required': ['uuid',
                                                         'name',
                                                         'owner-tag',
                                                         'agent-version'],
                                            'type': 'object'},
                     'MigrationSpec': {'additionalProperties': False,
                                       'properties': {'external-control': {'type': 'boolean'},
                                                      'model-tag': {'type': 'string'},
                                                      'target-info': {'$ref': '#/definitions/MigrationTargetInfo'}},
                                       'required': ['model-tag',
                                                    'target-info',
                                                    'external-control'],
                                       'type': 'object'},
                     'MigrationTargetInfo': {'additionalProperties': False,
                                             'properties': {'addrs': {'items': {'type': 'string'},
                                                                      'type': 'array'},
                                                            'auth-tag': {'type': 'string'},
                                                            'ca-cert': {'type': 'string'},
                                                            'controller-tag': {'type': 'string'},
                                                            'macaroons': {'type': 'string'},
                                                            'password': {'type': 'string'}},
                                             'required': ['controller-tag',
                                                          'addrs',
                                                          'ca-cert',
                                                          'auth-tag'],
                                             'type': 'object'},
                     'MinionReports': {'additionalProperties': False,
                                       'properties': {'failed': {'items': {'type': 'string'},
                                                                 'type': 'array'},
                                                      'migration-id': {'type': 'string'},
                                                      'phase': {'type': 'string'},
                                                      'success-count': {'type': 'integer'},
                                                      'unknown-count': {'type': 'integer'},
                                                      'unknown-sample': {'items': {'type': 'string'},
                                                                         'type': 'array'}},
                                       'required': ['migration-id',
                                                    'phase',
                                                    'success-count',
                                                    'unknown-count',
                                                    'unknown-sample',
                                                    'failed'],
                                       'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'Number': {'additionalProperties': False,
                                'properties': {'Build': {'type': 'integer'},
                                               'Major': {'type': 'integer'},
                                               'Minor': {'type': 'integer'},
                                               'Patch': {'type': 'integer'},
                                               'Tag': {'type': 'string'}},
                                'required': ['Major',
                                             'Minor',
                                             'Tag',
                                             'Patch',
                                             'Build'],
                                'type': 'object'},
                     'SerializedModel': {'additionalProperties': False,
                                         'properties': {'bytes': {'items': {'type': 'integer'},
                                                                  'type': 'array'},
                                                        'charms': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                        'tools': {'items': {'$ref': '#/definitions/SerializedModelTools'},
                                                                  'type': 'array'}},
                                         'required': ['bytes', 'charms', 'tools'],
                                         'type': 'object'},
                     'SerializedModelTools': {'additionalProperties': False,
                                              'properties': {'uri': {'type': 'string'},
                                                             'version': {'type': 'string'}},
                                              'required': ['version', 'uri'],
                                              'type': 'object'},
                     'SetMigrationPhaseArgs': {'additionalProperties': False,
                                               'properties': {'phase': {'type': 'string'}},
                                               'required': ['phase'],
                                               'type': 'object'},
                     'SetMigrationStatusMessageArgs': {'additionalProperties': False,
                                                       'properties': {'message': {'type': 'string'}},
                                                       'required': ['message'],
                                                       'type': 'object'}},
     'properties': {'Export': {'properties': {'Result': {'$ref': '#/definitions/SerializedModel'}},
                               'type': 'object'},
                    'MigrationStatus': {'properties': {'Result': {'$ref': '#/definitions/MasterMigrationStatus'}},
                                        'type': 'object'},
                    'MinionReports': {'properties': {'Result': {'$ref': '#/definitions/MinionReports'}},
                                      'type': 'object'},
                    'ModelInfo': {'properties': {'Result': {'$ref': '#/definitions/MigrationModelInfo'}},
                                  'type': 'object'},
                    'Prechecks': {'type': 'object'},
                    'Reap': {'type': 'object'},
                    'SetPhase': {'properties': {'Params': {'$ref': '#/definitions/SetMigrationPhaseArgs'}},
                                 'type': 'object'},
                    'SetStatusMessage': {'properties': {'Params': {'$ref': '#/definitions/SetMigrationStatusMessageArgs'}},
                                         'type': 'object'},
                    'Watch': {'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResult'}},
                              'type': 'object'},
                    'WatchMinionReports': {'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResult'}},
                                           'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(SerializedModel)
    async def Export(self):
        '''

        Returns -> typing.Sequence<+T_co>[~SerializedModelTools]<~SerializedModelTools>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationMaster', request='Export', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(MasterMigrationStatus)
    async def MigrationStatus(self):
        '''

        Returns -> typing.Union[str, _ForwardRef('MigrationSpec')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationMaster', request='MigrationStatus', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(MinionReports)
    async def MinionReports(self):
        '''

        Returns -> typing.Union[typing.Sequence<+T_co>[str], int]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationMaster', request='MinionReports', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(MigrationModelInfo)
    async def ModelInfo(self):
        '''

        Returns -> typing.Union[_ForwardRef('Number'), str]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationMaster', request='ModelInfo', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Prechecks(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationMaster', request='Prechecks', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Reap(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationMaster', request='Reap', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def SetPhase(self, phase):
        '''
        phase : str
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationMaster', request='SetPhase', version=1, params=params)
        params['phase'] = phase
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def SetStatusMessage(self, message):
        '''
        message : str
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationMaster', request='SetStatusMessage', version=1, params=params)
        params['message'] = message
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResult)
    async def Watch(self):
        '''

        Returns -> typing.Union[str, _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationMaster', request='Watch', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResult)
    async def WatchMinionReports(self):
        '''

        Returns -> typing.Union[str, _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationMaster', request='WatchMinionReports', version=1, params=params)

        reply = await self.rpc(msg)
        return reply


class MigrationMinionFacade(Type):
    name = 'MigrationMinion'
    version = 1
    schema =     {'definitions': {'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MinionReport': {'additionalProperties': False,
                                      'properties': {'migration-id': {'type': 'string'},
                                                     'phase': {'type': 'string'},
                                                     'success': {'type': 'boolean'}},
                                      'required': ['migration-id',
                                                   'phase',
                                                   'success'],
                                      'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'}},
     'properties': {'Report': {'properties': {'Params': {'$ref': '#/definitions/MinionReport'}},
                               'type': 'object'},
                    'Watch': {'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResult'}},
                              'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(None)
    async def Report(self, migration_id, phase, success):
        '''
        migration_id : str
        phase : str
        success : bool
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationMinion', request='Report', version=1, params=params)
        params['migration-id'] = migration_id
        params['phase'] = phase
        params['success'] = success
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResult)
    async def Watch(self):
        '''

        Returns -> typing.Union[str, _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationMinion', request='Watch', version=1, params=params)

        reply = await self.rpc(msg)
        return reply


class MigrationStatusWatcherFacade(Type):
    name = 'MigrationStatusWatcher'
    version = 1
    schema =     {'definitions': {'MigrationStatus': {'additionalProperties': False,
                                         'properties': {'attempt': {'type': 'integer'},
                                                        'migration-id': {'type': 'string'},
                                                        'phase': {'type': 'string'},
                                                        'source-api-addrs': {'items': {'type': 'string'},
                                                                             'type': 'array'},
                                                        'source-ca-cert': {'type': 'string'},
                                                        'target-api-addrs': {'items': {'type': 'string'},
                                                                             'type': 'array'},
                                                        'target-ca-cert': {'type': 'string'}},
                                         'required': ['migration-id',
                                                      'attempt',
                                                      'phase',
                                                      'source-api-addrs',
                                                      'source-ca-cert',
                                                      'target-api-addrs',
                                                      'target-ca-cert'],
                                         'type': 'object'}},
     'properties': {'Next': {'properties': {'Result': {'$ref': '#/definitions/MigrationStatus'}},
                             'type': 'object'},
                    'Stop': {'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(MigrationStatus)
    async def Next(self):
        '''

        Returns -> typing.Union[int, typing.Sequence<+T_co>[str]]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationStatusWatcher', request='Next', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Stop(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationStatusWatcher', request='Stop', version=1, params=params)

        reply = await self.rpc(msg)
        return reply


class MigrationTargetFacade(Type):
    name = 'MigrationTarget'
    version = 1
    schema =     {'definitions': {'MigrationModelInfo': {'additionalProperties': False,
                                            'properties': {'agent-version': {'$ref': '#/definitions/Number'},
                                                           'name': {'type': 'string'},
                                                           'owner-tag': {'type': 'string'},
                                                           'uuid': {'type': 'string'}},
                                            'required': ['uuid',
                                                         'name',
                                                         'owner-tag',
                                                         'agent-version'],
                                            'type': 'object'},
                     'ModelArgs': {'additionalProperties': False,
                                   'properties': {'model-tag': {'type': 'string'}},
                                   'required': ['model-tag'],
                                   'type': 'object'},
                     'Number': {'additionalProperties': False,
                                'properties': {'Build': {'type': 'integer'},
                                               'Major': {'type': 'integer'},
                                               'Minor': {'type': 'integer'},
                                               'Patch': {'type': 'integer'},
                                               'Tag': {'type': 'string'}},
                                'required': ['Major',
                                             'Minor',
                                             'Tag',
                                             'Patch',
                                             'Build'],
                                'type': 'object'},
                     'SerializedModel': {'additionalProperties': False,
                                         'properties': {'bytes': {'items': {'type': 'integer'},
                                                                  'type': 'array'},
                                                        'charms': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                        'tools': {'items': {'$ref': '#/definitions/SerializedModelTools'},
                                                                  'type': 'array'}},
                                         'required': ['bytes', 'charms', 'tools'],
                                         'type': 'object'},
                     'SerializedModelTools': {'additionalProperties': False,
                                              'properties': {'uri': {'type': 'string'},
                                                             'version': {'type': 'string'}},
                                              'required': ['version', 'uri'],
                                              'type': 'object'}},
     'properties': {'Abort': {'properties': {'Params': {'$ref': '#/definitions/ModelArgs'}},
                              'type': 'object'},
                    'Activate': {'properties': {'Params': {'$ref': '#/definitions/ModelArgs'}},
                                 'type': 'object'},
                    'Import': {'properties': {'Params': {'$ref': '#/definitions/SerializedModel'}},
                               'type': 'object'},
                    'Prechecks': {'properties': {'Params': {'$ref': '#/definitions/MigrationModelInfo'}},
                                  'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(None)
    async def Abort(self, model_tag):
        '''
        model_tag : str
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationTarget', request='Abort', version=1, params=params)
        params['model-tag'] = model_tag
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Activate(self, model_tag):
        '''
        model_tag : str
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationTarget', request='Activate', version=1, params=params)
        params['model-tag'] = model_tag
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Import(self, bytes_, charms, tools):
        '''
        bytes_ : typing.Sequence<+T_co>[int]
        charms : typing.Sequence<+T_co>[str]
        tools : typing.Sequence<+T_co>[~SerializedModelTools]<~SerializedModelTools>
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationTarget', request='Import', version=1, params=params)
        params['bytes'] = bytes_
        params['charms'] = charms
        params['tools'] = tools
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Prechecks(self, agent_version, name, owner_tag, uuid):
        '''
        agent_version : Number
        name : str
        owner_tag : str
        uuid : str
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='MigrationTarget', request='Prechecks', version=1, params=params)
        params['agent-version'] = agent_version
        params['name'] = name
        params['owner-tag'] = owner_tag
        params['uuid'] = uuid
        reply = await self.rpc(msg)
        return reply


class ModelConfigFacade(Type):
    name = 'ModelConfig'
    version = 1
    schema =     {'definitions': {'ConfigValue': {'additionalProperties': False,
                                     'properties': {'source': {'type': 'string'},
                                                    'value': {'additionalProperties': True,
                                                              'type': 'object'}},
                                     'required': ['value', 'source'],
                                     'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'ModelConfigResults': {'additionalProperties': False,
                                            'properties': {'config': {'patternProperties': {'.*': {'$ref': '#/definitions/ConfigValue'}},
                                                                      'type': 'object'}},
                                            'required': ['config'],
                                            'type': 'object'},
                     'ModelDefaultValues': {'additionalProperties': False,
                                            'properties': {'cloud-region': {'type': 'string'},
                                                           'cloud-tag': {'type': 'string'},
                                                           'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                   'type': 'object'}},
                                                                      'type': 'object'}},
                                            'required': ['config'],
                                            'type': 'object'},
                     'ModelDefaults': {'additionalProperties': False,
                                       'properties': {'controller': {'additionalProperties': True,
                                                                     'type': 'object'},
                                                      'default': {'additionalProperties': True,
                                                                  'type': 'object'},
                                                      'regions': {'items': {'$ref': '#/definitions/RegionDefaults'},
                                                                  'type': 'array'}},
                                       'type': 'object'},
                     'ModelDefaultsResult': {'additionalProperties': False,
                                             'properties': {'config': {'patternProperties': {'.*': {'$ref': '#/definitions/ModelDefaults'}},
                                                                       'type': 'object'}},
                                             'required': ['config'],
                                             'type': 'object'},
                     'ModelSet': {'additionalProperties': False,
                                  'properties': {'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                         'type': 'object'}},
                                                            'type': 'object'}},
                                  'required': ['config'],
                                  'type': 'object'},
                     'ModelUnset': {'additionalProperties': False,
                                    'properties': {'keys': {'items': {'type': 'string'},
                                                            'type': 'array'}},
                                    'required': ['keys'],
                                    'type': 'object'},
                     'ModelUnsetKeys': {'additionalProperties': False,
                                        'properties': {'cloud-region': {'type': 'string'},
                                                       'cloud-tag': {'type': 'string'},
                                                       'keys': {'items': {'type': 'string'},
                                                                'type': 'array'}},
                                        'required': ['keys'],
                                        'type': 'object'},
                     'RegionDefaults': {'additionalProperties': False,
                                        'properties': {'region-name': {'type': 'string'},
                                                       'value': {'additionalProperties': True,
                                                                 'type': 'object'}},
                                        'required': ['region-name', 'value'],
                                        'type': 'object'},
                     'SetModelDefaults': {'additionalProperties': False,
                                          'properties': {'config': {'items': {'$ref': '#/definitions/ModelDefaultValues'},
                                                                    'type': 'array'}},
                                          'required': ['config'],
                                          'type': 'object'},
                     'UnsetModelDefaults': {'additionalProperties': False,
                                            'properties': {'keys': {'items': {'$ref': '#/definitions/ModelUnsetKeys'},
                                                                    'type': 'array'}},
                                            'required': ['keys'],
                                            'type': 'object'}},
     'properties': {'ModelDefaults': {'properties': {'Result': {'$ref': '#/definitions/ModelDefaultsResult'}},
                                      'type': 'object'},
                    'ModelGet': {'properties': {'Result': {'$ref': '#/definitions/ModelConfigResults'}},
                                 'type': 'object'},
                    'ModelSet': {'properties': {'Params': {'$ref': '#/definitions/ModelSet'}},
                                 'type': 'object'},
                    'ModelUnset': {'properties': {'Params': {'$ref': '#/definitions/ModelUnset'}},
                                   'type': 'object'},
                    'SetModelDefaults': {'properties': {'Params': {'$ref': '#/definitions/SetModelDefaults'},
                                                        'Result': {'$ref': '#/definitions/ErrorResults'}},
                                         'type': 'object'},
                    'UnsetModelDefaults': {'properties': {'Params': {'$ref': '#/definitions/UnsetModelDefaults'},
                                                          'Result': {'$ref': '#/definitions/ErrorResults'}},
                                           'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ModelDefaultsResult)
    async def ModelDefaults(self):
        '''

        Returns -> typing.Mapping<~KT, +VT_co>[str, ~ModelDefaults]<~ModelDefaults>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ModelConfig', request='ModelDefaults', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelConfigResults)
    async def ModelGet(self):
        '''

        Returns -> typing.Mapping<~KT, +VT_co>[str, ~ConfigValue]<~ConfigValue>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ModelConfig', request='ModelGet', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def ModelSet(self, config):
        '''
        config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ModelConfig', request='ModelSet', version=1, params=params)
        params['config'] = config
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def ModelUnset(self, keys):
        '''
        keys : typing.Sequence<+T_co>[str]
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ModelConfig', request='ModelUnset', version=1, params=params)
        params['keys'] = keys
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetModelDefaults(self, config):
        '''
        config : typing.Sequence<+T_co>[~ModelDefaultValues]<~ModelDefaultValues>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ModelConfig', request='SetModelDefaults', version=1, params=params)
        params['config'] = config
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def UnsetModelDefaults(self, keys):
        '''
        keys : typing.Sequence<+T_co>[~ModelUnsetKeys]<~ModelUnsetKeys>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ModelConfig', request='UnsetModelDefaults', version=1, params=params)
        params['keys'] = keys
        reply = await self.rpc(msg)
        return reply


class ModelManagerFacade(Type):
    name = 'ModelManager'
    version = 2
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'EntityStatus': {'additionalProperties': False,
                                      'properties': {'data': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                           'type': 'object'}},
                                                              'type': 'object'},
                                                     'info': {'type': 'string'},
                                                     'since': {'format': 'date-time',
                                                               'type': 'string'},
                                                     'status': {'type': 'string'}},
                                      'required': ['status', 'info', 'since'],
                                      'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MachineHardware': {'additionalProperties': False,
                                         'properties': {'arch': {'type': 'string'},
                                                        'availability-zone': {'type': 'string'},
                                                        'cores': {'type': 'integer'},
                                                        'cpu-power': {'type': 'integer'},
                                                        'mem': {'type': 'integer'},
                                                        'root-disk': {'type': 'integer'},
                                                        'tags': {'items': {'type': 'string'},
                                                                 'type': 'array'}},
                                         'type': 'object'},
                     'MapResult': {'additionalProperties': False,
                                   'properties': {'error': {'$ref': '#/definitions/Error'},
                                                  'result': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                          'type': 'object'}},
                                                             'type': 'object'}},
                                   'required': ['result'],
                                   'type': 'object'},
                     'MapResults': {'additionalProperties': False,
                                    'properties': {'results': {'items': {'$ref': '#/definitions/MapResult'},
                                                               'type': 'array'}},
                                    'required': ['results'],
                                    'type': 'object'},
                     'Model': {'additionalProperties': False,
                               'properties': {'name': {'type': 'string'},
                                              'owner-tag': {'type': 'string'},
                                              'uuid': {'type': 'string'}},
                               'required': ['name', 'uuid', 'owner-tag'],
                               'type': 'object'},
                     'ModelCreateArgs': {'additionalProperties': False,
                                         'properties': {'cloud-tag': {'type': 'string'},
                                                        'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                'type': 'object'}},
                                                                   'type': 'object'},
                                                        'credential': {'type': 'string'},
                                                        'name': {'type': 'string'},
                                                        'owner-tag': {'type': 'string'},
                                                        'region': {'type': 'string'}},
                                         'required': ['name', 'owner-tag'],
                                         'type': 'object'},
                     'ModelInfo': {'additionalProperties': False,
                                   'properties': {'cloud': {'type': 'string'},
                                                  'cloud-credential-tag': {'type': 'string'},
                                                  'cloud-region': {'type': 'string'},
                                                  'controller-uuid': {'type': 'string'},
                                                  'default-series': {'type': 'string'},
                                                  'life': {'type': 'string'},
                                                  'machines': {'items': {'$ref': '#/definitions/ModelMachineInfo'},
                                                               'type': 'array'},
                                                  'name': {'type': 'string'},
                                                  'owner-tag': {'type': 'string'},
                                                  'provider-type': {'type': 'string'},
                                                  'status': {'$ref': '#/definitions/EntityStatus'},
                                                  'users': {'items': {'$ref': '#/definitions/ModelUserInfo'},
                                                            'type': 'array'},
                                                  'uuid': {'type': 'string'}},
                                   'required': ['name',
                                                'uuid',
                                                'controller-uuid',
                                                'provider-type',
                                                'default-series',
                                                'cloud',
                                                'owner-tag',
                                                'life',
                                                'status',
                                                'users',
                                                'machines'],
                                   'type': 'object'},
                     'ModelInfoResult': {'additionalProperties': False,
                                         'properties': {'error': {'$ref': '#/definitions/Error'},
                                                        'result': {'$ref': '#/definitions/ModelInfo'}},
                                         'type': 'object'},
                     'ModelInfoResults': {'additionalProperties': False,
                                          'properties': {'results': {'items': {'$ref': '#/definitions/ModelInfoResult'},
                                                                     'type': 'array'}},
                                          'required': ['results'],
                                          'type': 'object'},
                     'ModelMachineInfo': {'additionalProperties': False,
                                          'properties': {'hardware': {'$ref': '#/definitions/MachineHardware'},
                                                         'id': {'type': 'string'}},
                                          'required': ['id'],
                                          'type': 'object'},
                     'ModelUserInfo': {'additionalProperties': False,
                                       'properties': {'access': {'type': 'string'},
                                                      'display-name': {'type': 'string'},
                                                      'last-connection': {'format': 'date-time',
                                                                          'type': 'string'},
                                                      'user': {'type': 'string'}},
                                       'required': ['user',
                                                    'display-name',
                                                    'last-connection',
                                                    'access'],
                                       'type': 'object'},
                     'ModifyModelAccess': {'additionalProperties': False,
                                           'properties': {'access': {'type': 'string'},
                                                          'action': {'type': 'string'},
                                                          'model-tag': {'type': 'string'},
                                                          'user-tag': {'type': 'string'}},
                                           'required': ['user-tag',
                                                        'action',
                                                        'access',
                                                        'model-tag'],
                                           'type': 'object'},
                     'ModifyModelAccessRequest': {'additionalProperties': False,
                                                  'properties': {'changes': {'items': {'$ref': '#/definitions/ModifyModelAccess'},
                                                                             'type': 'array'}},
                                                  'required': ['changes'],
                                                  'type': 'object'},
                     'UserModel': {'additionalProperties': False,
                                   'properties': {'last-connection': {'format': 'date-time',
                                                                      'type': 'string'},
                                                  'model': {'$ref': '#/definitions/Model'}},
                                   'required': ['model', 'last-connection'],
                                   'type': 'object'},
                     'UserModelList': {'additionalProperties': False,
                                       'properties': {'user-models': {'items': {'$ref': '#/definitions/UserModel'},
                                                                      'type': 'array'}},
                                       'required': ['user-models'],
                                       'type': 'object'}},
     'properties': {'CreateModel': {'properties': {'Params': {'$ref': '#/definitions/ModelCreateArgs'},
                                                   'Result': {'$ref': '#/definitions/ModelInfo'}},
                                    'type': 'object'},
                    'DestroyModel': {'type': 'object'},
                    'DestroyModels': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                      'type': 'object'},
                    'DumpModels': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/MapResults'}},
                                   'type': 'object'},
                    'DumpModelsDB': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                    'Result': {'$ref': '#/definitions/MapResults'}},
                                     'type': 'object'},
                    'ListModels': {'properties': {'Params': {'$ref': '#/definitions/Entity'},
                                                  'Result': {'$ref': '#/definitions/UserModelList'}},
                                   'type': 'object'},
                    'ModelInfo': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                 'Result': {'$ref': '#/definitions/ModelInfoResults'}},
                                  'type': 'object'},
                    'ModifyModelAccess': {'properties': {'Params': {'$ref': '#/definitions/ModifyModelAccessRequest'},
                                                         'Result': {'$ref': '#/definitions/ErrorResults'}},
                                          'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ModelInfo)
    async def CreateModel(self, cloud_tag, config, credential, name, owner_tag, region):
        '''
        cloud_tag : str
        config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        credential : str
        name : str
        owner_tag : str
        region : str
        Returns -> typing.Union[_ForwardRef('EntityStatus'), typing.Sequence<+T_co>[~ModelUserInfo]<~ModelUserInfo>]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ModelManager', request='CreateModel', version=2, params=params)
        params['cloud-tag'] = cloud_tag
        params['config'] = config
        params['credential'] = credential
        params['name'] = name
        params['owner-tag'] = owner_tag
        params['region'] = region
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def DestroyModel(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ModelManager', request='DestroyModel', version=2, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def DestroyModels(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ModelManager', request='DestroyModels', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(MapResults)
    async def DumpModels(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~MapResult]<~MapResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ModelManager', request='DumpModels', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(MapResults)
    async def DumpModelsDB(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~MapResult]<~MapResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ModelManager', request='DumpModelsDB', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(UserModelList)
    async def ListModels(self, tag):
        '''
        tag : str
        Returns -> typing.Sequence<+T_co>[~UserModel]<~UserModel>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ModelManager', request='ListModels', version=2, params=params)
        params['tag'] = tag
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelInfoResults)
    async def ModelInfo(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ModelInfoResult]<~ModelInfoResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ModelManager', request='ModelInfo', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def ModifyModelAccess(self, changes):
        '''
        changes : typing.Sequence<+T_co>[~ModifyModelAccess]<~ModifyModelAccess>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ModelManager', request='ModifyModelAccess', version=2, params=params)
        params['changes'] = changes
        reply = await self.rpc(msg)
        return reply


class NotifyWatcherFacade(Type):
    name = 'NotifyWatcher'
    version = 1
    schema =     {'properties': {'Next': {'type': 'object'}, 'Stop': {'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(None)
    async def Next(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='NotifyWatcher', request='Next', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Stop(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='NotifyWatcher', request='Stop', version=1, params=params)

        reply = await self.rpc(msg)
        return reply


class PingerFacade(Type):
    name = 'Pinger'
    version = 1
    schema =     {'properties': {'Ping': {'type': 'object'}, 'Stop': {'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(None)
    async def Ping(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Pinger', request='Ping', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Stop(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Pinger', request='Stop', version=1, params=params)

        reply = await self.rpc(msg)
        return reply


class ProvisionerFacade(Type):
    name = 'Provisioner'
    version = 3
    schema =     {'definitions': {'APIHostPortsResult': {'additionalProperties': False,
                                            'properties': {'servers': {'items': {'items': {'$ref': '#/definitions/HostPort'},
                                                                                 'type': 'array'},
                                                                       'type': 'array'}},
                                            'required': ['servers'],
                                            'type': 'object'},
                     'Address': {'additionalProperties': False,
                                 'properties': {'scope': {'type': 'string'},
                                                'space-name': {'type': 'string'},
                                                'type': {'type': 'string'},
                                                'value': {'type': 'string'}},
                                 'required': ['value', 'type', 'scope'],
                                 'type': 'object'},
                     'Binary': {'additionalProperties': False,
                                'properties': {'Arch': {'type': 'string'},
                                               'Number': {'$ref': '#/definitions/Number'},
                                               'Series': {'type': 'string'}},
                                'required': ['Number', 'Series', 'Arch'],
                                'type': 'object'},
                     'BytesResult': {'additionalProperties': False,
                                     'properties': {'result': {'items': {'type': 'integer'},
                                                               'type': 'array'}},
                                     'required': ['result'],
                                     'type': 'object'},
                     'CloudImageMetadata': {'additionalProperties': False,
                                            'properties': {'arch': {'type': 'string'},
                                                           'image-id': {'type': 'string'},
                                                           'priority': {'type': 'integer'},
                                                           'region': {'type': 'string'},
                                                           'root-storage-size': {'type': 'integer'},
                                                           'root-storage-type': {'type': 'string'},
                                                           'series': {'type': 'string'},
                                                           'source': {'type': 'string'},
                                                           'stream': {'type': 'string'},
                                                           'version': {'type': 'string'},
                                                           'virt-type': {'type': 'string'}},
                                            'required': ['image-id',
                                                         'region',
                                                         'version',
                                                         'series',
                                                         'arch',
                                                         'source',
                                                         'priority'],
                                            'type': 'object'},
                     'ConstraintsResult': {'additionalProperties': False,
                                           'properties': {'constraints': {'$ref': '#/definitions/Value'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['constraints'],
                                           'type': 'object'},
                     'ConstraintsResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/ConstraintsResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'ContainerConfig': {'additionalProperties': False,
                                         'properties': {'UpdateBehavior': {'$ref': '#/definitions/UpdateBehavior'},
                                                        'apt-mirror': {'type': 'string'},
                                                        'apt-proxy': {'$ref': '#/definitions/Settings'},
                                                        'authorized-keys': {'type': 'string'},
                                                        'provider-type': {'type': 'string'},
                                                        'proxy': {'$ref': '#/definitions/Settings'},
                                                        'ssl-hostname-verification': {'type': 'boolean'}},
                                         'required': ['provider-type',
                                                      'authorized-keys',
                                                      'ssl-hostname-verification',
                                                      'proxy',
                                                      'apt-proxy',
                                                      'apt-mirror',
                                                      'UpdateBehavior'],
                                         'type': 'object'},
                     'ContainerManagerConfig': {'additionalProperties': False,
                                                'properties': {'config': {'patternProperties': {'.*': {'type': 'string'}},
                                                                          'type': 'object'}},
                                                'required': ['config'],
                                                'type': 'object'},
                     'ContainerManagerConfigParams': {'additionalProperties': False,
                                                      'properties': {'type': {'type': 'string'}},
                                                      'required': ['type'],
                                                      'type': 'object'},
                     'ControllerConfigResult': {'additionalProperties': False,
                                                'properties': {'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                       'type': 'object'}},
                                                                          'type': 'object'}},
                                                'required': ['config'],
                                                'type': 'object'},
                     'DistributionGroupResult': {'additionalProperties': False,
                                                 'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                'result': {'items': {'type': 'string'},
                                                                           'type': 'array'}},
                                                 'required': ['result'],
                                                 'type': 'object'},
                     'DistributionGroupResults': {'additionalProperties': False,
                                                  'properties': {'results': {'items': {'$ref': '#/definitions/DistributionGroupResult'},
                                                                             'type': 'array'}},
                                                  'required': ['results'],
                                                  'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'EntityPassword': {'additionalProperties': False,
                                        'properties': {'password': {'type': 'string'},
                                                       'tag': {'type': 'string'}},
                                        'required': ['tag', 'password'],
                                        'type': 'object'},
                     'EntityPasswords': {'additionalProperties': False,
                                         'properties': {'changes': {'items': {'$ref': '#/definitions/EntityPassword'},
                                                                    'type': 'array'}},
                                         'required': ['changes'],
                                         'type': 'object'},
                     'EntityStatusArgs': {'additionalProperties': False,
                                          'properties': {'data': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                               'type': 'object'}},
                                                                  'type': 'object'},
                                                         'info': {'type': 'string'},
                                                         'status': {'type': 'string'},
                                                         'tag': {'type': 'string'}},
                                          'required': ['tag',
                                                       'status',
                                                       'info',
                                                       'data'],
                                          'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'FindToolsParams': {'additionalProperties': False,
                                         'properties': {'arch': {'type': 'string'},
                                                        'major': {'type': 'integer'},
                                                        'minor': {'type': 'integer'},
                                                        'number': {'$ref': '#/definitions/Number'},
                                                        'series': {'type': 'string'}},
                                         'required': ['number',
                                                      'major',
                                                      'minor',
                                                      'arch',
                                                      'series'],
                                         'type': 'object'},
                     'FindToolsResult': {'additionalProperties': False,
                                         'properties': {'error': {'$ref': '#/definitions/Error'},
                                                        'list': {'items': {'$ref': '#/definitions/Tools'},
                                                                 'type': 'array'}},
                                         'required': ['list'],
                                         'type': 'object'},
                     'HardwareCharacteristics': {'additionalProperties': False,
                                                 'properties': {'arch': {'type': 'string'},
                                                                'availability-zone': {'type': 'string'},
                                                                'cpu-cores': {'type': 'integer'},
                                                                'cpu-power': {'type': 'integer'},
                                                                'mem': {'type': 'integer'},
                                                                'root-disk': {'type': 'integer'},
                                                                'tags': {'items': {'type': 'string'},
                                                                         'type': 'array'}},
                                                 'type': 'object'},
                     'HostPort': {'additionalProperties': False,
                                  'properties': {'Address': {'$ref': '#/definitions/Address'},
                                                 'port': {'type': 'integer'}},
                                  'required': ['Address', 'port'],
                                  'type': 'object'},
                     'InstanceInfo': {'additionalProperties': False,
                                      'properties': {'characteristics': {'$ref': '#/definitions/HardwareCharacteristics'},
                                                     'instance-id': {'type': 'string'},
                                                     'network-config': {'items': {'$ref': '#/definitions/NetworkConfig'},
                                                                        'type': 'array'},
                                                     'nonce': {'type': 'string'},
                                                     'tag': {'type': 'string'},
                                                     'volume-attachments': {'patternProperties': {'.*': {'$ref': '#/definitions/VolumeAttachmentInfo'}},
                                                                            'type': 'object'},
                                                     'volumes': {'items': {'$ref': '#/definitions/Volume'},
                                                                 'type': 'array'}},
                                      'required': ['tag',
                                                   'instance-id',
                                                   'nonce',
                                                   'characteristics',
                                                   'volumes',
                                                   'volume-attachments',
                                                   'network-config'],
                                      'type': 'object'},
                     'InstancesInfo': {'additionalProperties': False,
                                       'properties': {'machines': {'items': {'$ref': '#/definitions/InstanceInfo'},
                                                                   'type': 'array'}},
                                       'required': ['machines'],
                                       'type': 'object'},
                     'LifeResult': {'additionalProperties': False,
                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                   'life': {'type': 'string'}},
                                    'required': ['life'],
                                    'type': 'object'},
                     'LifeResults': {'additionalProperties': False,
                                     'properties': {'results': {'items': {'$ref': '#/definitions/LifeResult'},
                                                                'type': 'array'}},
                                     'required': ['results'],
                                     'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MachineContainers': {'additionalProperties': False,
                                           'properties': {'container-types': {'items': {'type': 'string'},
                                                                              'type': 'array'},
                                                          'machine-tag': {'type': 'string'}},
                                           'required': ['machine-tag',
                                                        'container-types'],
                                           'type': 'object'},
                     'MachineContainersParams': {'additionalProperties': False,
                                                 'properties': {'params': {'items': {'$ref': '#/definitions/MachineContainers'},
                                                                           'type': 'array'}},
                                                 'required': ['params'],
                                                 'type': 'object'},
                     'MachineNetworkConfigResult': {'additionalProperties': False,
                                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                   'info': {'items': {'$ref': '#/definitions/NetworkConfig'},
                                                                            'type': 'array'}},
                                                    'required': ['info'],
                                                    'type': 'object'},
                     'MachineNetworkConfigResults': {'additionalProperties': False,
                                                     'properties': {'results': {'items': {'$ref': '#/definitions/MachineNetworkConfigResult'},
                                                                                'type': 'array'}},
                                                     'required': ['results'],
                                                     'type': 'object'},
                     'ModelConfigResult': {'additionalProperties': False,
                                           'properties': {'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                  'type': 'object'}},
                                                                     'type': 'object'}},
                                           'required': ['config'],
                                           'type': 'object'},
                     'NetworkConfig': {'additionalProperties': False,
                                       'properties': {'address': {'type': 'string'},
                                                      'cidr': {'type': 'string'},
                                                      'config-type': {'type': 'string'},
                                                      'device-index': {'type': 'integer'},
                                                      'disabled': {'type': 'boolean'},
                                                      'dns-search-domains': {'items': {'type': 'string'},
                                                                             'type': 'array'},
                                                      'dns-servers': {'items': {'type': 'string'},
                                                                      'type': 'array'},
                                                      'gateway-address': {'type': 'string'},
                                                      'interface-name': {'type': 'string'},
                                                      'interface-type': {'type': 'string'},
                                                      'mac-address': {'type': 'string'},
                                                      'mtu': {'type': 'integer'},
                                                      'no-auto-start': {'type': 'boolean'},
                                                      'parent-interface-name': {'type': 'string'},
                                                      'provider-address-id': {'type': 'string'},
                                                      'provider-id': {'type': 'string'},
                                                      'provider-space-id': {'type': 'string'},
                                                      'provider-subnet-id': {'type': 'string'},
                                                      'provider-vlan-id': {'type': 'string'},
                                                      'vlan-tag': {'type': 'integer'}},
                                       'required': ['device-index',
                                                    'mac-address',
                                                    'cidr',
                                                    'mtu',
                                                    'provider-id',
                                                    'provider-subnet-id',
                                                    'provider-space-id',
                                                    'provider-address-id',
                                                    'provider-vlan-id',
                                                    'vlan-tag',
                                                    'interface-name',
                                                    'parent-interface-name',
                                                    'interface-type',
                                                    'disabled'],
                                       'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'Number': {'additionalProperties': False,
                                'properties': {'Build': {'type': 'integer'},
                                               'Major': {'type': 'integer'},
                                               'Minor': {'type': 'integer'},
                                               'Patch': {'type': 'integer'},
                                               'Tag': {'type': 'string'}},
                                'required': ['Major',
                                             'Minor',
                                             'Tag',
                                             'Patch',
                                             'Build'],
                                'type': 'object'},
                     'ProvisioningInfo': {'additionalProperties': False,
                                          'properties': {'constraints': {'$ref': '#/definitions/Value'},
                                                         'controller-config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                            'type': 'object'}},
                                                                               'type': 'object'},
                                                         'endpoint-bindings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                               'type': 'object'},
                                                         'image-metadata': {'items': {'$ref': '#/definitions/CloudImageMetadata'},
                                                                            'type': 'array'},
                                                         'jobs': {'items': {'type': 'string'},
                                                                  'type': 'array'},
                                                         'placement': {'type': 'string'},
                                                         'series': {'type': 'string'},
                                                         'subnets-to-zones': {'patternProperties': {'.*': {'items': {'type': 'string'},
                                                                                                           'type': 'array'}},
                                                                              'type': 'object'},
                                                         'tags': {'patternProperties': {'.*': {'type': 'string'}},
                                                                  'type': 'object'},
                                                         'volumes': {'items': {'$ref': '#/definitions/VolumeParams'},
                                                                     'type': 'array'}},
                                          'required': ['constraints',
                                                       'series',
                                                       'placement',
                                                       'jobs'],
                                          'type': 'object'},
                     'ProvisioningInfoResult': {'additionalProperties': False,
                                                'properties': {'error': {'$ref': '#/definitions/Error'},
                                                               'result': {'$ref': '#/definitions/ProvisioningInfo'}},
                                                'required': ['result'],
                                                'type': 'object'},
                     'ProvisioningInfoResults': {'additionalProperties': False,
                                                 'properties': {'results': {'items': {'$ref': '#/definitions/ProvisioningInfoResult'},
                                                                            'type': 'array'}},
                                                 'required': ['results'],
                                                 'type': 'object'},
                     'SetStatus': {'additionalProperties': False,
                                   'properties': {'entities': {'items': {'$ref': '#/definitions/EntityStatusArgs'},
                                                               'type': 'array'}},
                                   'required': ['entities'],
                                   'type': 'object'},
                     'Settings': {'additionalProperties': False,
                                  'properties': {'Ftp': {'type': 'string'},
                                                 'Http': {'type': 'string'},
                                                 'Https': {'type': 'string'},
                                                 'NoProxy': {'type': 'string'}},
                                  'required': ['Http', 'Https', 'Ftp', 'NoProxy'],
                                  'type': 'object'},
                     'StatusResult': {'additionalProperties': False,
                                      'properties': {'data': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                           'type': 'object'}},
                                                              'type': 'object'},
                                                     'error': {'$ref': '#/definitions/Error'},
                                                     'id': {'type': 'string'},
                                                     'info': {'type': 'string'},
                                                     'life': {'type': 'string'},
                                                     'since': {'format': 'date-time',
                                                               'type': 'string'},
                                                     'status': {'type': 'string'}},
                                      'required': ['id',
                                                   'life',
                                                   'status',
                                                   'info',
                                                   'data',
                                                   'since'],
                                      'type': 'object'},
                     'StatusResults': {'additionalProperties': False,
                                       'properties': {'results': {'items': {'$ref': '#/definitions/StatusResult'},
                                                                  'type': 'array'}},
                                       'required': ['results'],
                                       'type': 'object'},
                     'StringResult': {'additionalProperties': False,
                                      'properties': {'error': {'$ref': '#/definitions/Error'},
                                                     'result': {'type': 'string'}},
                                      'required': ['result'],
                                      'type': 'object'},
                     'StringResults': {'additionalProperties': False,
                                       'properties': {'results': {'items': {'$ref': '#/definitions/StringResult'},
                                                                  'type': 'array'}},
                                       'required': ['results'],
                                       'type': 'object'},
                     'StringsResult': {'additionalProperties': False,
                                       'properties': {'error': {'$ref': '#/definitions/Error'},
                                                      'result': {'items': {'type': 'string'},
                                                                 'type': 'array'}},
                                       'type': 'object'},
                     'StringsWatchResult': {'additionalProperties': False,
                                            'properties': {'changes': {'items': {'type': 'string'},
                                                                       'type': 'array'},
                                                           'error': {'$ref': '#/definitions/Error'},
                                                           'watcher-id': {'type': 'string'}},
                                            'required': ['watcher-id'],
                                            'type': 'object'},
                     'StringsWatchResults': {'additionalProperties': False,
                                             'properties': {'results': {'items': {'$ref': '#/definitions/StringsWatchResult'},
                                                                        'type': 'array'}},
                                             'required': ['results'],
                                             'type': 'object'},
                     'Tools': {'additionalProperties': False,
                               'properties': {'sha256': {'type': 'string'},
                                              'size': {'type': 'integer'},
                                              'url': {'type': 'string'},
                                              'version': {'$ref': '#/definitions/Binary'}},
                               'required': ['version', 'url', 'size'],
                               'type': 'object'},
                     'ToolsResult': {'additionalProperties': False,
                                     'properties': {'disable-ssl-hostname-verification': {'type': 'boolean'},
                                                    'error': {'$ref': '#/definitions/Error'},
                                                    'tools': {'items': {'$ref': '#/definitions/Tools'},
                                                              'type': 'array'}},
                                     'required': ['tools',
                                                  'disable-ssl-hostname-verification'],
                                     'type': 'object'},
                     'ToolsResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ToolsResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'UpdateBehavior': {'additionalProperties': False,
                                        'properties': {'enable-os-refresh-update': {'type': 'boolean'},
                                                       'enable-os-upgrade': {'type': 'boolean'}},
                                        'required': ['enable-os-refresh-update',
                                                     'enable-os-upgrade'],
                                        'type': 'object'},
                     'Value': {'additionalProperties': False,
                               'properties': {'arch': {'type': 'string'},
                                              'container': {'type': 'string'},
                                              'cpu-cores': {'type': 'integer'},
                                              'cpu-power': {'type': 'integer'},
                                              'instance-type': {'type': 'string'},
                                              'mem': {'type': 'integer'},
                                              'root-disk': {'type': 'integer'},
                                              'spaces': {'items': {'type': 'string'},
                                                         'type': 'array'},
                                              'tags': {'items': {'type': 'string'},
                                                       'type': 'array'},
                                              'virt-type': {'type': 'string'}},
                               'type': 'object'},
                     'Volume': {'additionalProperties': False,
                                'properties': {'info': {'$ref': '#/definitions/VolumeInfo'},
                                               'volume-tag': {'type': 'string'}},
                                'required': ['volume-tag', 'info'],
                                'type': 'object'},
                     'VolumeAttachmentInfo': {'additionalProperties': False,
                                              'properties': {'bus-address': {'type': 'string'},
                                                             'device-link': {'type': 'string'},
                                                             'device-name': {'type': 'string'},
                                                             'read-only': {'type': 'boolean'}},
                                              'type': 'object'},
                     'VolumeAttachmentParams': {'additionalProperties': False,
                                                'properties': {'instance-id': {'type': 'string'},
                                                               'machine-tag': {'type': 'string'},
                                                               'provider': {'type': 'string'},
                                                               'read-only': {'type': 'boolean'},
                                                               'volume-id': {'type': 'string'},
                                                               'volume-tag': {'type': 'string'}},
                                                'required': ['volume-tag',
                                                             'machine-tag',
                                                             'provider'],
                                                'type': 'object'},
                     'VolumeInfo': {'additionalProperties': False,
                                    'properties': {'hardware-id': {'type': 'string'},
                                                   'persistent': {'type': 'boolean'},
                                                   'size': {'type': 'integer'},
                                                   'volume-id': {'type': 'string'}},
                                    'required': ['volume-id', 'size', 'persistent'],
                                    'type': 'object'},
                     'VolumeParams': {'additionalProperties': False,
                                      'properties': {'attachment': {'$ref': '#/definitions/VolumeAttachmentParams'},
                                                     'attributes': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                 'type': 'object'}},
                                                                    'type': 'object'},
                                                     'provider': {'type': 'string'},
                                                     'size': {'type': 'integer'},
                                                     'tags': {'patternProperties': {'.*': {'type': 'string'}},
                                                              'type': 'object'},
                                                     'volume-tag': {'type': 'string'}},
                                      'required': ['volume-tag',
                                                   'size',
                                                   'provider'],
                                      'type': 'object'},
                     'WatchContainer': {'additionalProperties': False,
                                        'properties': {'container-type': {'type': 'string'},
                                                       'machine-tag': {'type': 'string'}},
                                        'required': ['machine-tag',
                                                     'container-type'],
                                        'type': 'object'},
                     'WatchContainers': {'additionalProperties': False,
                                         'properties': {'params': {'items': {'$ref': '#/definitions/WatchContainer'},
                                                                   'type': 'array'}},
                                         'required': ['params'],
                                         'type': 'object'}},
     'properties': {'APIAddresses': {'properties': {'Result': {'$ref': '#/definitions/StringsResult'}},
                                     'type': 'object'},
                    'APIHostPorts': {'properties': {'Result': {'$ref': '#/definitions/APIHostPortsResult'}},
                                     'type': 'object'},
                    'CACert': {'properties': {'Result': {'$ref': '#/definitions/BytesResult'}},
                               'type': 'object'},
                    'Constraints': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                   'Result': {'$ref': '#/definitions/ConstraintsResults'}},
                                    'type': 'object'},
                    'ContainerConfig': {'properties': {'Result': {'$ref': '#/definitions/ContainerConfig'}},
                                        'type': 'object'},
                    'ContainerManagerConfig': {'properties': {'Params': {'$ref': '#/definitions/ContainerManagerConfigParams'},
                                                              'Result': {'$ref': '#/definitions/ContainerManagerConfig'}},
                                               'type': 'object'},
                    'ControllerConfig': {'properties': {'Result': {'$ref': '#/definitions/ControllerConfigResult'}},
                                         'type': 'object'},
                    'DistributionGroup': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                         'Result': {'$ref': '#/definitions/DistributionGroupResults'}},
                                          'type': 'object'},
                    'EnsureDead': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'},
                    'FindTools': {'properties': {'Params': {'$ref': '#/definitions/FindToolsParams'},
                                                 'Result': {'$ref': '#/definitions/FindToolsResult'}},
                                  'type': 'object'},
                    'GetContainerInterfaceInfo': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                 'Result': {'$ref': '#/definitions/MachineNetworkConfigResults'}},
                                                  'type': 'object'},
                    'InstanceId': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/StringResults'}},
                                   'type': 'object'},
                    'InstanceStatus': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                      'Result': {'$ref': '#/definitions/StatusResults'}},
                                       'type': 'object'},
                    'Life': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                            'Result': {'$ref': '#/definitions/LifeResults'}},
                             'type': 'object'},
                    'MachinesWithTransientErrors': {'properties': {'Result': {'$ref': '#/definitions/StatusResults'}},
                                                    'type': 'object'},
                    'MarkMachinesForRemoval': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                              'Result': {'$ref': '#/definitions/ErrorResults'}},
                                               'type': 'object'},
                    'ModelConfig': {'properties': {'Result': {'$ref': '#/definitions/ModelConfigResult'}},
                                    'type': 'object'},
                    'ModelUUID': {'properties': {'Result': {'$ref': '#/definitions/StringResult'}},
                                  'type': 'object'},
                    'PrepareContainerInterfaceInfo': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                     'Result': {'$ref': '#/definitions/MachineNetworkConfigResults'}},
                                                      'type': 'object'},
                    'ProvisioningInfo': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                        'Result': {'$ref': '#/definitions/ProvisioningInfoResults'}},
                                         'type': 'object'},
                    'ReleaseContainerAddresses': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                 'Result': {'$ref': '#/definitions/ErrorResults'}},
                                                  'type': 'object'},
                    'Remove': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                              'Result': {'$ref': '#/definitions/ErrorResults'}},
                               'type': 'object'},
                    'Series': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                              'Result': {'$ref': '#/definitions/StringResults'}},
                               'type': 'object'},
                    'SetInstanceInfo': {'properties': {'Params': {'$ref': '#/definitions/InstancesInfo'},
                                                       'Result': {'$ref': '#/definitions/ErrorResults'}},
                                        'type': 'object'},
                    'SetInstanceStatus': {'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                         'Result': {'$ref': '#/definitions/ErrorResults'}},
                                          'type': 'object'},
                    'SetPasswords': {'properties': {'Params': {'$ref': '#/definitions/EntityPasswords'},
                                                    'Result': {'$ref': '#/definitions/ErrorResults'}},
                                     'type': 'object'},
                    'SetStatus': {'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                 'Result': {'$ref': '#/definitions/ErrorResults'}},
                                  'type': 'object'},
                    'SetSupportedContainers': {'properties': {'Params': {'$ref': '#/definitions/MachineContainersParams'},
                                                              'Result': {'$ref': '#/definitions/ErrorResults'}},
                                               'type': 'object'},
                    'StateAddresses': {'properties': {'Result': {'$ref': '#/definitions/StringsResult'}},
                                       'type': 'object'},
                    'Status': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                              'Result': {'$ref': '#/definitions/StatusResults'}},
                               'type': 'object'},
                    'Tools': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                             'Result': {'$ref': '#/definitions/ToolsResults'}},
                              'type': 'object'},
                    'UpdateStatus': {'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                    'Result': {'$ref': '#/definitions/ErrorResults'}},
                                     'type': 'object'},
                    'WatchAPIHostPorts': {'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResult'}},
                                          'type': 'object'},
                    'WatchAllContainers': {'properties': {'Params': {'$ref': '#/definitions/WatchContainers'},
                                                          'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                           'type': 'object'},
                    'WatchContainers': {'properties': {'Params': {'$ref': '#/definitions/WatchContainers'},
                                                       'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                        'type': 'object'},
                    'WatchForModelConfigChanges': {'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResult'}},
                                                   'type': 'object'},
                    'WatchMachineErrorRetry': {'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResult'}},
                                               'type': 'object'},
                    'WatchModelMachines': {'properties': {'Result': {'$ref': '#/definitions/StringsWatchResult'}},
                                           'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(StringsResult)
    async def APIAddresses(self):
        '''

        Returns -> typing.Union[_ForwardRef('Error'), typing.Sequence<+T_co>[str]]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='APIAddresses', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(APIHostPortsResult)
    async def APIHostPorts(self):
        '''

        Returns -> typing.Sequence<+T_co>[~HostPort]<~HostPort>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='APIHostPorts', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(BytesResult)
    async def CACert(self):
        '''

        Returns -> typing.Sequence<+T_co>[int]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='CACert', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ConstraintsResults)
    async def Constraints(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ConstraintsResult]<~ConstraintsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='Constraints', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ContainerConfig)
    async def ContainerConfig(self):
        '''

        Returns -> typing.Union[_ForwardRef('UpdateBehavior'), str, _ForwardRef('Settings'), _ForwardRef('Settings'), bool]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='ContainerConfig', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ContainerManagerConfig)
    async def ContainerManagerConfig(self, type_):
        '''
        type_ : str
        Returns -> typing.Mapping<~KT, +VT_co>[str, str]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='ContainerManagerConfig', version=3, params=params)
        params['type'] = type_
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ControllerConfigResult)
    async def ControllerConfig(self):
        '''

        Returns -> typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='ControllerConfig', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(DistributionGroupResults)
    async def DistributionGroup(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~DistributionGroupResult]<~DistributionGroupResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='DistributionGroup', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def EnsureDead(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='EnsureDead', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(FindToolsResult)
    async def FindTools(self, arch, major, minor, number, series):
        '''
        arch : str
        major : int
        minor : int
        number : Number
        series : str
        Returns -> typing.Union[_ForwardRef('Error'), typing.Sequence<+T_co>[~Tools]<~Tools>]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='FindTools', version=3, params=params)
        params['arch'] = arch
        params['major'] = major
        params['minor'] = minor
        params['number'] = number
        params['series'] = series
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(MachineNetworkConfigResults)
    async def GetContainerInterfaceInfo(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~MachineNetworkConfigResult]<~MachineNetworkConfigResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='GetContainerInterfaceInfo', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def InstanceId(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringResult]<~StringResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='InstanceId', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StatusResults)
    async def InstanceStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StatusResult]<~StatusResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='InstanceStatus', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(LifeResults)
    async def Life(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~LifeResult]<~LifeResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='Life', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StatusResults)
    async def MachinesWithTransientErrors(self):
        '''

        Returns -> typing.Sequence<+T_co>[~StatusResult]<~StatusResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='MachinesWithTransientErrors', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def MarkMachinesForRemoval(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='MarkMachinesForRemoval', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelConfigResult)
    async def ModelConfig(self):
        '''

        Returns -> typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='ModelConfig', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResult)
    async def ModelUUID(self):
        '''

        Returns -> typing.Union[_ForwardRef('Error'), str]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='ModelUUID', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(MachineNetworkConfigResults)
    async def PrepareContainerInterfaceInfo(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~MachineNetworkConfigResult]<~MachineNetworkConfigResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='PrepareContainerInterfaceInfo', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ProvisioningInfoResults)
    async def ProvisioningInfo(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ProvisioningInfoResult]<~ProvisioningInfoResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='ProvisioningInfo', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def ReleaseContainerAddresses(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='ReleaseContainerAddresses', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def Remove(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='Remove', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def Series(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringResult]<~StringResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='Series', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetInstanceInfo(self, machines):
        '''
        machines : typing.Sequence<+T_co>[~InstanceInfo]<~InstanceInfo>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='SetInstanceInfo', version=3, params=params)
        params['machines'] = machines
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetInstanceStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityStatusArgs]<~EntityStatusArgs>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='SetInstanceStatus', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetPasswords(self, changes):
        '''
        changes : typing.Sequence<+T_co>[~EntityPassword]<~EntityPassword>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='SetPasswords', version=3, params=params)
        params['changes'] = changes
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityStatusArgs]<~EntityStatusArgs>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='SetStatus', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetSupportedContainers(self, params):
        '''
        params : typing.Sequence<+T_co>[~MachineContainers]<~MachineContainers>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='SetSupportedContainers', version=3, params=params)
        params['params'] = params
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsResult)
    async def StateAddresses(self):
        '''

        Returns -> typing.Union[_ForwardRef('Error'), typing.Sequence<+T_co>[str]]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='StateAddresses', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StatusResults)
    async def Status(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StatusResult]<~StatusResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='Status', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ToolsResults)
    async def Tools(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ToolsResult]<~ToolsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='Tools', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def UpdateStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityStatusArgs]<~EntityStatusArgs>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='UpdateStatus', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResult)
    async def WatchAPIHostPorts(self):
        '''

        Returns -> typing.Union[str, _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='WatchAPIHostPorts', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchAllContainers(self, params):
        '''
        params : typing.Sequence<+T_co>[~WatchContainer]<~WatchContainer>
        Returns -> typing.Sequence<+T_co>[~StringsWatchResult]<~StringsWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='WatchAllContainers', version=3, params=params)
        params['params'] = params
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchContainers(self, params):
        '''
        params : typing.Sequence<+T_co>[~WatchContainer]<~WatchContainer>
        Returns -> typing.Sequence<+T_co>[~StringsWatchResult]<~StringsWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='WatchContainers', version=3, params=params)
        params['params'] = params
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResult)
    async def WatchForModelConfigChanges(self):
        '''

        Returns -> typing.Union[str, _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='WatchForModelConfigChanges', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResult)
    async def WatchMachineErrorRetry(self):
        '''

        Returns -> typing.Union[str, _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='WatchMachineErrorRetry', version=3, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResult)
    async def WatchModelMachines(self):
        '''

        Returns -> typing.Union[typing.Sequence<+T_co>[str], _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Provisioner', request='WatchModelMachines', version=3, params=params)

        reply = await self.rpc(msg)
        return reply


class ProxyUpdaterFacade(Type):
    name = 'ProxyUpdater'
    version = 1
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'NotifyWatchResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/NotifyWatchResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'ProxyConfig': {'additionalProperties': False,
                                     'properties': {'ftp': {'type': 'string'},
                                                    'http': {'type': 'string'},
                                                    'https': {'type': 'string'},
                                                    'no-proxy': {'type': 'string'}},
                                     'required': ['http',
                                                  'https',
                                                  'ftp',
                                                  'no-proxy'],
                                     'type': 'object'},
                     'ProxyConfigResult': {'additionalProperties': False,
                                           'properties': {'apt-proxy-settings': {'$ref': '#/definitions/ProxyConfig'},
                                                          'error': {'$ref': '#/definitions/Error'},
                                                          'proxy-settings': {'$ref': '#/definitions/ProxyConfig'}},
                                           'required': ['proxy-settings',
                                                        'apt-proxy-settings'],
                                           'type': 'object'},
                     'ProxyConfigResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/ProxyConfigResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'}},
     'properties': {'ProxyConfig': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                   'Result': {'$ref': '#/definitions/ProxyConfigResults'}},
                                    'type': 'object'},
                    'WatchForProxyConfigAndAPIHostPortChanges': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                                'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                                                 'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ProxyConfigResults)
    async def ProxyConfig(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ProxyConfigResult]<~ProxyConfigResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ProxyUpdater', request='ProxyConfig', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchForProxyConfigAndAPIHostPortChanges(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='ProxyUpdater', request='WatchForProxyConfigAndAPIHostPortChanges', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class RebootFacade(Type):
    name = 'Reboot'
    version = 2
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'RebootActionResult': {'additionalProperties': False,
                                            'properties': {'error': {'$ref': '#/definitions/Error'},
                                                           'result': {'type': 'string'}},
                                            'type': 'object'},
                     'RebootActionResults': {'additionalProperties': False,
                                             'properties': {'results': {'items': {'$ref': '#/definitions/RebootActionResult'},
                                                                        'type': 'array'}},
                                             'type': 'object'}},
     'properties': {'ClearReboot': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                   'Result': {'$ref': '#/definitions/ErrorResults'}},
                                    'type': 'object'},
                    'GetRebootAction': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                       'Result': {'$ref': '#/definitions/RebootActionResults'}},
                                        'type': 'object'},
                    'RequestReboot': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                      'type': 'object'},
                    'WatchForRebootEvent': {'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResult'}},
                                            'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResults)
    async def ClearReboot(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Reboot', request='ClearReboot', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(RebootActionResults)
    async def GetRebootAction(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~RebootActionResult]<~RebootActionResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Reboot', request='GetRebootAction', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def RequestReboot(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Reboot', request='RequestReboot', version=2, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResult)
    async def WatchForRebootEvent(self):
        '''

        Returns -> typing.Union[str, _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Reboot', request='WatchForRebootEvent', version=2, params=params)

        reply = await self.rpc(msg)
        return reply


class RelationUnitsWatcherFacade(Type):
    name = 'RelationUnitsWatcher'
    version = 1
    schema =     {'definitions': {'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'RelationUnitsChange': {'additionalProperties': False,
                                             'properties': {'changed': {'patternProperties': {'.*': {'$ref': '#/definitions/UnitSettings'}},
                                                                        'type': 'object'},
                                                            'departed': {'items': {'type': 'string'},
                                                                         'type': 'array'}},
                                             'required': ['changed'],
                                             'type': 'object'},
                     'RelationUnitsWatchResult': {'additionalProperties': False,
                                                  'properties': {'changes': {'$ref': '#/definitions/RelationUnitsChange'},
                                                                 'error': {'$ref': '#/definitions/Error'},
                                                                 'watcher-id': {'type': 'string'}},
                                                  'required': ['watcher-id',
                                                               'changes'],
                                                  'type': 'object'},
                     'UnitSettings': {'additionalProperties': False,
                                      'properties': {'version': {'type': 'integer'}},
                                      'required': ['version'],
                                      'type': 'object'}},
     'properties': {'Next': {'properties': {'Result': {'$ref': '#/definitions/RelationUnitsWatchResult'}},
                             'type': 'object'},
                    'Stop': {'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(RelationUnitsWatchResult)
    async def Next(self):
        '''

        Returns -> typing.Union[_ForwardRef('RelationUnitsChange'), _ForwardRef('Error'), str]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='RelationUnitsWatcher', request='Next', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Stop(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='RelationUnitsWatcher', request='Stop', version=1, params=params)

        reply = await self.rpc(msg)
        return reply


class ResumerFacade(Type):
    name = 'Resumer'
    version = 2
    schema =     {'properties': {'ResumeTransactions': {'type': 'object'}}, 'type': 'object'}
    

    @ReturnMapping(None)
    async def ResumeTransactions(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Resumer', request='ResumeTransactions', version=2, params=params)

        reply = await self.rpc(msg)
        return reply


class RetryStrategyFacade(Type):
    name = 'RetryStrategy'
    version = 1
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'NotifyWatchResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/NotifyWatchResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'RetryStrategy': {'additionalProperties': False,
                                       'properties': {'jitter-retry-time': {'type': 'boolean'},
                                                      'max-retry-time': {'type': 'integer'},
                                                      'min-retry-time': {'type': 'integer'},
                                                      'retry-time-factor': {'type': 'integer'},
                                                      'should-retry': {'type': 'boolean'}},
                                       'required': ['should-retry',
                                                    'min-retry-time',
                                                    'max-retry-time',
                                                    'jitter-retry-time',
                                                    'retry-time-factor'],
                                       'type': 'object'},
                     'RetryStrategyResult': {'additionalProperties': False,
                                             'properties': {'error': {'$ref': '#/definitions/Error'},
                                                            'result': {'$ref': '#/definitions/RetryStrategy'}},
                                             'type': 'object'},
                     'RetryStrategyResults': {'additionalProperties': False,
                                              'properties': {'results': {'items': {'$ref': '#/definitions/RetryStrategyResult'},
                                                                         'type': 'array'}},
                                              'required': ['results'],
                                              'type': 'object'}},
     'properties': {'RetryStrategy': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                     'Result': {'$ref': '#/definitions/RetryStrategyResults'}},
                                      'type': 'object'},
                    'WatchRetryStrategy': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                          'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                           'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(RetryStrategyResults)
    async def RetryStrategy(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~RetryStrategyResult]<~RetryStrategyResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='RetryStrategy', request='RetryStrategy', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchRetryStrategy(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='RetryStrategy', request='WatchRetryStrategy', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class SSHClientFacade(Type):
    name = 'SSHClient'
    version = 1
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'SSHAddressResult': {'additionalProperties': False,
                                          'properties': {'address': {'type': 'string'},
                                                         'error': {'$ref': '#/definitions/Error'}},
                                          'type': 'object'},
                     'SSHAddressResults': {'additionalProperties': False,
                                           'properties': {'results': {'items': {'$ref': '#/definitions/SSHAddressResult'},
                                                                      'type': 'array'}},
                                           'required': ['results'],
                                           'type': 'object'},
                     'SSHProxyResult': {'additionalProperties': False,
                                        'properties': {'use-proxy': {'type': 'boolean'}},
                                        'required': ['use-proxy'],
                                        'type': 'object'},
                     'SSHPublicKeysResult': {'additionalProperties': False,
                                             'properties': {'error': {'$ref': '#/definitions/Error'},
                                                            'public-keys': {'items': {'type': 'string'},
                                                                            'type': 'array'}},
                                             'type': 'object'},
                     'SSHPublicKeysResults': {'additionalProperties': False,
                                              'properties': {'results': {'items': {'$ref': '#/definitions/SSHPublicKeysResult'},
                                                                         'type': 'array'}},
                                              'required': ['results'],
                                              'type': 'object'}},
     'properties': {'PrivateAddress': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                      'Result': {'$ref': '#/definitions/SSHAddressResults'}},
                                       'type': 'object'},
                    'Proxy': {'properties': {'Result': {'$ref': '#/definitions/SSHProxyResult'}},
                              'type': 'object'},
                    'PublicAddress': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                     'Result': {'$ref': '#/definitions/SSHAddressResults'}},
                                      'type': 'object'},
                    'PublicKeys': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/SSHPublicKeysResults'}},
                                   'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(SSHAddressResults)
    async def PrivateAddress(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~SSHAddressResult]<~SSHAddressResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='SSHClient', request='PrivateAddress', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(SSHProxyResult)
    async def Proxy(self):
        '''

        Returns -> bool
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='SSHClient', request='Proxy', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(SSHAddressResults)
    async def PublicAddress(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~SSHAddressResult]<~SSHAddressResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='SSHClient', request='PublicAddress', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(SSHPublicKeysResults)
    async def PublicKeys(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~SSHPublicKeysResult]<~SSHPublicKeysResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='SSHClient', request='PublicKeys', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class SingularFacade(Type):
    name = 'Singular'
    version = 1
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'SingularClaim': {'additionalProperties': False,
                                       'properties': {'controller-tag': {'type': 'string'},
                                                      'duration': {'type': 'integer'},
                                                      'model-tag': {'type': 'string'}},
                                       'required': ['model-tag',
                                                    'controller-tag',
                                                    'duration'],
                                       'type': 'object'},
                     'SingularClaims': {'additionalProperties': False,
                                        'properties': {'claims': {'items': {'$ref': '#/definitions/SingularClaim'},
                                                                  'type': 'array'}},
                                        'required': ['claims'],
                                        'type': 'object'}},
     'properties': {'Claim': {'properties': {'Params': {'$ref': '#/definitions/SingularClaims'},
                                             'Result': {'$ref': '#/definitions/ErrorResults'}},
                              'type': 'object'},
                    'Wait': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                            'Result': {'$ref': '#/definitions/ErrorResults'}},
                             'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResults)
    async def Claim(self, claims):
        '''
        claims : typing.Sequence<+T_co>[~SingularClaim]<~SingularClaim>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Singular', request='Claim', version=1, params=params)
        params['claims'] = claims
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def Wait(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Singular', request='Wait', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class SpacesFacade(Type):
    name = 'Spaces'
    version = 2
    schema =     {'definitions': {'CreateSpaceParams': {'additionalProperties': False,
                                           'properties': {'provider-id': {'type': 'string'},
                                                          'public': {'type': 'boolean'},
                                                          'space-tag': {'type': 'string'},
                                                          'subnet-tags': {'items': {'type': 'string'},
                                                                          'type': 'array'}},
                                           'required': ['subnet-tags',
                                                        'space-tag',
                                                        'public'],
                                           'type': 'object'},
                     'CreateSpacesParams': {'additionalProperties': False,
                                            'properties': {'spaces': {'items': {'$ref': '#/definitions/CreateSpaceParams'},
                                                                      'type': 'array'}},
                                            'required': ['spaces'],
                                            'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'ListSpacesResults': {'additionalProperties': False,
                                           'properties': {'results': {'items': {'$ref': '#/definitions/Space'},
                                                                      'type': 'array'}},
                                           'required': ['results'],
                                           'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'Space': {'additionalProperties': False,
                               'properties': {'error': {'$ref': '#/definitions/Error'},
                                              'name': {'type': 'string'},
                                              'subnets': {'items': {'$ref': '#/definitions/Subnet'},
                                                          'type': 'array'}},
                               'required': ['name', 'subnets'],
                               'type': 'object'},
                     'Subnet': {'additionalProperties': False,
                                'properties': {'cidr': {'type': 'string'},
                                               'life': {'type': 'string'},
                                               'provider-id': {'type': 'string'},
                                               'space-tag': {'type': 'string'},
                                               'status': {'type': 'string'},
                                               'vlan-tag': {'type': 'integer'},
                                               'zones': {'items': {'type': 'string'},
                                                         'type': 'array'}},
                                'required': ['cidr',
                                             'vlan-tag',
                                             'life',
                                             'space-tag',
                                             'zones'],
                                'type': 'object'}},
     'properties': {'CreateSpaces': {'properties': {'Params': {'$ref': '#/definitions/CreateSpacesParams'},
                                                    'Result': {'$ref': '#/definitions/ErrorResults'}},
                                     'type': 'object'},
                    'ListSpaces': {'properties': {'Result': {'$ref': '#/definitions/ListSpacesResults'}},
                                   'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResults)
    async def CreateSpaces(self, spaces):
        '''
        spaces : typing.Sequence<+T_co>[~CreateSpaceParams]<~CreateSpaceParams>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Spaces', request='CreateSpaces', version=2, params=params)
        params['spaces'] = spaces
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ListSpacesResults)
    async def ListSpaces(self):
        '''

        Returns -> typing.Sequence<+T_co>[~Space]<~Space>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Spaces', request='ListSpaces', version=2, params=params)

        reply = await self.rpc(msg)
        return reply


class StatusHistoryFacade(Type):
    name = 'StatusHistory'
    version = 2
    schema =     {'definitions': {'StatusHistoryPruneArgs': {'additionalProperties': False,
                                                'properties': {'max-history-mb': {'type': 'integer'},
                                                               'max-history-time': {'type': 'integer'}},
                                                'required': ['max-history-time',
                                                             'max-history-mb'],
                                                'type': 'object'}},
     'properties': {'Prune': {'properties': {'Params': {'$ref': '#/definitions/StatusHistoryPruneArgs'}},
                              'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(None)
    async def Prune(self, max_history_mb, max_history_time):
        '''
        max_history_mb : int
        max_history_time : int
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StatusHistory', request='Prune', version=2, params=params)
        params['max-history-mb'] = max_history_mb
        params['max-history-time'] = max_history_time
        reply = await self.rpc(msg)
        return reply


class StorageFacade(Type):
    name = 'Storage'
    version = 3
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'EntityStatus': {'additionalProperties': False,
                                      'properties': {'data': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                           'type': 'object'}},
                                                              'type': 'object'},
                                                     'info': {'type': 'string'},
                                                     'since': {'format': 'date-time',
                                                               'type': 'string'},
                                                     'status': {'type': 'string'}},
                                      'required': ['status', 'info', 'since'],
                                      'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'FilesystemAttachmentInfo': {'additionalProperties': False,
                                                  'properties': {'mount-point': {'type': 'string'},
                                                                 'read-only': {'type': 'boolean'}},
                                                  'type': 'object'},
                     'FilesystemDetails': {'additionalProperties': False,
                                           'properties': {'filesystem-tag': {'type': 'string'},
                                                          'info': {'$ref': '#/definitions/FilesystemInfo'},
                                                          'machine-attachments': {'patternProperties': {'.*': {'$ref': '#/definitions/FilesystemAttachmentInfo'}},
                                                                                  'type': 'object'},
                                                          'status': {'$ref': '#/definitions/EntityStatus'},
                                                          'storage': {'$ref': '#/definitions/StorageDetails'},
                                                          'volume-tag': {'type': 'string'}},
                                           'required': ['filesystem-tag',
                                                        'info',
                                                        'status'],
                                           'type': 'object'},
                     'FilesystemDetailsListResult': {'additionalProperties': False,
                                                     'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                    'result': {'items': {'$ref': '#/definitions/FilesystemDetails'},
                                                                               'type': 'array'}},
                                                     'type': 'object'},
                     'FilesystemDetailsListResults': {'additionalProperties': False,
                                                      'properties': {'results': {'items': {'$ref': '#/definitions/FilesystemDetailsListResult'},
                                                                                 'type': 'array'}},
                                                      'type': 'object'},
                     'FilesystemFilter': {'additionalProperties': False,
                                          'properties': {'machines': {'items': {'type': 'string'},
                                                                      'type': 'array'}},
                                          'type': 'object'},
                     'FilesystemFilters': {'additionalProperties': False,
                                           'properties': {'filters': {'items': {'$ref': '#/definitions/FilesystemFilter'},
                                                                      'type': 'array'}},
                                           'type': 'object'},
                     'FilesystemInfo': {'additionalProperties': False,
                                        'properties': {'filesystem-id': {'type': 'string'},
                                                       'size': {'type': 'integer'}},
                                        'required': ['filesystem-id', 'size'],
                                        'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'StorageAddParams': {'additionalProperties': False,
                                          'properties': {'name': {'type': 'string'},
                                                         'storage': {'$ref': '#/definitions/StorageConstraints'},
                                                         'unit': {'type': 'string'}},
                                          'required': ['unit', 'name', 'storage'],
                                          'type': 'object'},
                     'StorageAttachmentDetails': {'additionalProperties': False,
                                                  'properties': {'location': {'type': 'string'},
                                                                 'machine-tag': {'type': 'string'},
                                                                 'storage-tag': {'type': 'string'},
                                                                 'unit-tag': {'type': 'string'}},
                                                  'required': ['storage-tag',
                                                               'unit-tag',
                                                               'machine-tag'],
                                                  'type': 'object'},
                     'StorageConstraints': {'additionalProperties': False,
                                            'properties': {'count': {'type': 'integer'},
                                                           'pool': {'type': 'string'},
                                                           'size': {'type': 'integer'}},
                                            'type': 'object'},
                     'StorageDetails': {'additionalProperties': False,
                                        'properties': {'attachments': {'patternProperties': {'.*': {'$ref': '#/definitions/StorageAttachmentDetails'}},
                                                                       'type': 'object'},
                                                       'kind': {'type': 'integer'},
                                                       'owner-tag': {'type': 'string'},
                                                       'persistent': {'type': 'boolean'},
                                                       'status': {'$ref': '#/definitions/EntityStatus'},
                                                       'storage-tag': {'type': 'string'}},
                                        'required': ['storage-tag',
                                                     'owner-tag',
                                                     'kind',
                                                     'status',
                                                     'persistent'],
                                        'type': 'object'},
                     'StorageDetailsListResult': {'additionalProperties': False,
                                                  'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                 'result': {'items': {'$ref': '#/definitions/StorageDetails'},
                                                                            'type': 'array'}},
                                                  'type': 'object'},
                     'StorageDetailsListResults': {'additionalProperties': False,
                                                   'properties': {'results': {'items': {'$ref': '#/definitions/StorageDetailsListResult'},
                                                                              'type': 'array'}},
                                                   'type': 'object'},
                     'StorageDetailsResult': {'additionalProperties': False,
                                              'properties': {'error': {'$ref': '#/definitions/Error'},
                                                             'result': {'$ref': '#/definitions/StorageDetails'}},
                                              'type': 'object'},
                     'StorageDetailsResults': {'additionalProperties': False,
                                               'properties': {'results': {'items': {'$ref': '#/definitions/StorageDetailsResult'},
                                                                          'type': 'array'}},
                                               'type': 'object'},
                     'StorageFilter': {'additionalProperties': False,
                                       'type': 'object'},
                     'StorageFilters': {'additionalProperties': False,
                                        'properties': {'filters': {'items': {'$ref': '#/definitions/StorageFilter'},
                                                                   'type': 'array'}},
                                        'type': 'object'},
                     'StoragePool': {'additionalProperties': False,
                                     'properties': {'attrs': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                           'type': 'object'}},
                                                              'type': 'object'},
                                                    'name': {'type': 'string'},
                                                    'provider': {'type': 'string'}},
                                     'required': ['name', 'provider', 'attrs'],
                                     'type': 'object'},
                     'StoragePoolFilter': {'additionalProperties': False,
                                           'properties': {'names': {'items': {'type': 'string'},
                                                                    'type': 'array'},
                                                          'providers': {'items': {'type': 'string'},
                                                                        'type': 'array'}},
                                           'type': 'object'},
                     'StoragePoolFilters': {'additionalProperties': False,
                                            'properties': {'filters': {'items': {'$ref': '#/definitions/StoragePoolFilter'},
                                                                       'type': 'array'}},
                                            'type': 'object'},
                     'StoragePoolsResult': {'additionalProperties': False,
                                            'properties': {'error': {'$ref': '#/definitions/Error'},
                                                           'storage-pools': {'items': {'$ref': '#/definitions/StoragePool'},
                                                                             'type': 'array'}},
                                            'type': 'object'},
                     'StoragePoolsResults': {'additionalProperties': False,
                                             'properties': {'results': {'items': {'$ref': '#/definitions/StoragePoolsResult'},
                                                                        'type': 'array'}},
                                             'type': 'object'},
                     'StoragesAddParams': {'additionalProperties': False,
                                           'properties': {'storages': {'items': {'$ref': '#/definitions/StorageAddParams'},
                                                                       'type': 'array'}},
                                           'required': ['storages'],
                                           'type': 'object'},
                     'VolumeAttachmentInfo': {'additionalProperties': False,
                                              'properties': {'bus-address': {'type': 'string'},
                                                             'device-link': {'type': 'string'},
                                                             'device-name': {'type': 'string'},
                                                             'read-only': {'type': 'boolean'}},
                                              'type': 'object'},
                     'VolumeDetails': {'additionalProperties': False,
                                       'properties': {'info': {'$ref': '#/definitions/VolumeInfo'},
                                                      'machine-attachments': {'patternProperties': {'.*': {'$ref': '#/definitions/VolumeAttachmentInfo'}},
                                                                              'type': 'object'},
                                                      'status': {'$ref': '#/definitions/EntityStatus'},
                                                      'storage': {'$ref': '#/definitions/StorageDetails'},
                                                      'volume-tag': {'type': 'string'}},
                                       'required': ['volume-tag', 'info', 'status'],
                                       'type': 'object'},
                     'VolumeDetailsListResult': {'additionalProperties': False,
                                                 'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                'result': {'items': {'$ref': '#/definitions/VolumeDetails'},
                                                                           'type': 'array'}},
                                                 'type': 'object'},
                     'VolumeDetailsListResults': {'additionalProperties': False,
                                                  'properties': {'results': {'items': {'$ref': '#/definitions/VolumeDetailsListResult'},
                                                                             'type': 'array'}},
                                                  'type': 'object'},
                     'VolumeFilter': {'additionalProperties': False,
                                      'properties': {'machines': {'items': {'type': 'string'},
                                                                  'type': 'array'}},
                                      'type': 'object'},
                     'VolumeFilters': {'additionalProperties': False,
                                       'properties': {'filters': {'items': {'$ref': '#/definitions/VolumeFilter'},
                                                                  'type': 'array'}},
                                       'type': 'object'},
                     'VolumeInfo': {'additionalProperties': False,
                                    'properties': {'hardware-id': {'type': 'string'},
                                                   'persistent': {'type': 'boolean'},
                                                   'size': {'type': 'integer'},
                                                   'volume-id': {'type': 'string'}},
                                    'required': ['volume-id', 'size', 'persistent'],
                                    'type': 'object'}},
     'properties': {'AddToUnit': {'properties': {'Params': {'$ref': '#/definitions/StoragesAddParams'},
                                                 'Result': {'$ref': '#/definitions/ErrorResults'}},
                                  'type': 'object'},
                    'CreatePool': {'properties': {'Params': {'$ref': '#/definitions/StoragePool'}},
                                   'type': 'object'},
                    'ListFilesystems': {'properties': {'Params': {'$ref': '#/definitions/FilesystemFilters'},
                                                       'Result': {'$ref': '#/definitions/FilesystemDetailsListResults'}},
                                        'type': 'object'},
                    'ListPools': {'properties': {'Params': {'$ref': '#/definitions/StoragePoolFilters'},
                                                 'Result': {'$ref': '#/definitions/StoragePoolsResults'}},
                                  'type': 'object'},
                    'ListStorageDetails': {'properties': {'Params': {'$ref': '#/definitions/StorageFilters'},
                                                          'Result': {'$ref': '#/definitions/StorageDetailsListResults'}},
                                           'type': 'object'},
                    'ListVolumes': {'properties': {'Params': {'$ref': '#/definitions/VolumeFilters'},
                                                   'Result': {'$ref': '#/definitions/VolumeDetailsListResults'}},
                                    'type': 'object'},
                    'StorageDetails': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                      'Result': {'$ref': '#/definitions/StorageDetailsResults'}},
                                       'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResults)
    async def AddToUnit(self, storages):
        '''
        storages : typing.Sequence<+T_co>[~StorageAddParams]<~StorageAddParams>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Storage', request='AddToUnit', version=3, params=params)
        params['storages'] = storages
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def CreatePool(self, attrs, name, provider):
        '''
        attrs : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        name : str
        provider : str
        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Storage', request='CreatePool', version=3, params=params)
        params['attrs'] = attrs
        params['name'] = name
        params['provider'] = provider
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(FilesystemDetailsListResults)
    async def ListFilesystems(self, filters):
        '''
        filters : typing.Sequence<+T_co>[~FilesystemFilter]<~FilesystemFilter>
        Returns -> typing.Sequence<+T_co>[~FilesystemDetailsListResult]<~FilesystemDetailsListResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Storage', request='ListFilesystems', version=3, params=params)
        params['filters'] = filters
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StoragePoolsResults)
    async def ListPools(self, filters):
        '''
        filters : typing.Sequence<+T_co>[~StoragePoolFilter]<~StoragePoolFilter>
        Returns -> typing.Sequence<+T_co>[~StoragePoolsResult]<~StoragePoolsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Storage', request='ListPools', version=3, params=params)
        params['filters'] = filters
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StorageDetailsListResults)
    async def ListStorageDetails(self, filters):
        '''
        filters : typing.Sequence<+T_co>[~StorageFilter]<~StorageFilter>
        Returns -> typing.Sequence<+T_co>[~StorageDetailsListResult]<~StorageDetailsListResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Storage', request='ListStorageDetails', version=3, params=params)
        params['filters'] = filters
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(VolumeDetailsListResults)
    async def ListVolumes(self, filters):
        '''
        filters : typing.Sequence<+T_co>[~VolumeFilter]<~VolumeFilter>
        Returns -> typing.Sequence<+T_co>[~VolumeDetailsListResult]<~VolumeDetailsListResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Storage', request='ListVolumes', version=3, params=params)
        params['filters'] = filters
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StorageDetailsResults)
    async def StorageDetails(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StorageDetailsResult]<~StorageDetailsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Storage', request='StorageDetails', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class StorageProvisionerFacade(Type):
    name = 'StorageProvisioner'
    version = 3
    schema =     {'definitions': {'BlockDevice': {'additionalProperties': False,
                                     'properties': {'BusAddress': {'type': 'string'},
                                                    'DeviceLinks': {'items': {'type': 'string'},
                                                                    'type': 'array'},
                                                    'DeviceName': {'type': 'string'},
                                                    'FilesystemType': {'type': 'string'},
                                                    'HardwareId': {'type': 'string'},
                                                    'InUse': {'type': 'boolean'},
                                                    'Label': {'type': 'string'},
                                                    'MountPoint': {'type': 'string'},
                                                    'Size': {'type': 'integer'},
                                                    'UUID': {'type': 'string'}},
                                     'required': ['DeviceName',
                                                  'DeviceLinks',
                                                  'Label',
                                                  'UUID',
                                                  'HardwareId',
                                                  'BusAddress',
                                                  'Size',
                                                  'FilesystemType',
                                                  'InUse',
                                                  'MountPoint'],
                                     'type': 'object'},
                     'BlockDeviceResult': {'additionalProperties': False,
                                           'properties': {'error': {'$ref': '#/definitions/Error'},
                                                          'result': {'$ref': '#/definitions/BlockDevice'}},
                                           'required': ['result'],
                                           'type': 'object'},
                     'BlockDeviceResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/BlockDeviceResult'},
                                                                       'type': 'array'}},
                                            'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'EntityStatusArgs': {'additionalProperties': False,
                                          'properties': {'data': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                               'type': 'object'}},
                                                                  'type': 'object'},
                                                         'info': {'type': 'string'},
                                                         'status': {'type': 'string'},
                                                         'tag': {'type': 'string'}},
                                          'required': ['tag',
                                                       'status',
                                                       'info',
                                                       'data'],
                                          'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Filesystem': {'additionalProperties': False,
                                    'properties': {'filesystem-tag': {'type': 'string'},
                                                   'info': {'$ref': '#/definitions/FilesystemInfo'},
                                                   'volume-tag': {'type': 'string'}},
                                    'required': ['filesystem-tag', 'info'],
                                    'type': 'object'},
                     'FilesystemAttachment': {'additionalProperties': False,
                                              'properties': {'filesystem-tag': {'type': 'string'},
                                                             'info': {'$ref': '#/definitions/FilesystemAttachmentInfo'},
                                                             'machine-tag': {'type': 'string'}},
                                              'required': ['filesystem-tag',
                                                           'machine-tag',
                                                           'info'],
                                              'type': 'object'},
                     'FilesystemAttachmentInfo': {'additionalProperties': False,
                                                  'properties': {'mount-point': {'type': 'string'},
                                                                 'read-only': {'type': 'boolean'}},
                                                  'type': 'object'},
                     'FilesystemAttachmentParams': {'additionalProperties': False,
                                                    'properties': {'filesystem-id': {'type': 'string'},
                                                                   'filesystem-tag': {'type': 'string'},
                                                                   'instance-id': {'type': 'string'},
                                                                   'machine-tag': {'type': 'string'},
                                                                   'mount-point': {'type': 'string'},
                                                                   'provider': {'type': 'string'},
                                                                   'read-only': {'type': 'boolean'}},
                                                    'required': ['filesystem-tag',
                                                                 'machine-tag',
                                                                 'provider'],
                                                    'type': 'object'},
                     'FilesystemAttachmentParamsResult': {'additionalProperties': False,
                                                          'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                         'result': {'$ref': '#/definitions/FilesystemAttachmentParams'}},
                                                          'required': ['result'],
                                                          'type': 'object'},
                     'FilesystemAttachmentParamsResults': {'additionalProperties': False,
                                                           'properties': {'results': {'items': {'$ref': '#/definitions/FilesystemAttachmentParamsResult'},
                                                                                      'type': 'array'}},
                                                           'type': 'object'},
                     'FilesystemAttachmentResult': {'additionalProperties': False,
                                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                   'result': {'$ref': '#/definitions/FilesystemAttachment'}},
                                                    'required': ['result'],
                                                    'type': 'object'},
                     'FilesystemAttachmentResults': {'additionalProperties': False,
                                                     'properties': {'results': {'items': {'$ref': '#/definitions/FilesystemAttachmentResult'},
                                                                                'type': 'array'}},
                                                     'type': 'object'},
                     'FilesystemAttachments': {'additionalProperties': False,
                                               'properties': {'filesystem-attachments': {'items': {'$ref': '#/definitions/FilesystemAttachment'},
                                                                                         'type': 'array'}},
                                               'required': ['filesystem-attachments'],
                                               'type': 'object'},
                     'FilesystemInfo': {'additionalProperties': False,
                                        'properties': {'filesystem-id': {'type': 'string'},
                                                       'size': {'type': 'integer'}},
                                        'required': ['filesystem-id', 'size'],
                                        'type': 'object'},
                     'FilesystemParams': {'additionalProperties': False,
                                          'properties': {'attachment': {'$ref': '#/definitions/FilesystemAttachmentParams'},
                                                         'attributes': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                     'type': 'object'}},
                                                                        'type': 'object'},
                                                         'filesystem-tag': {'type': 'string'},
                                                         'provider': {'type': 'string'},
                                                         'size': {'type': 'integer'},
                                                         'tags': {'patternProperties': {'.*': {'type': 'string'}},
                                                                  'type': 'object'},
                                                         'volume-tag': {'type': 'string'}},
                                          'required': ['filesystem-tag',
                                                       'size',
                                                       'provider'],
                                          'type': 'object'},
                     'FilesystemParamsResult': {'additionalProperties': False,
                                                'properties': {'error': {'$ref': '#/definitions/Error'},
                                                               'result': {'$ref': '#/definitions/FilesystemParams'}},
                                                'required': ['result'],
                                                'type': 'object'},
                     'FilesystemParamsResults': {'additionalProperties': False,
                                                 'properties': {'results': {'items': {'$ref': '#/definitions/FilesystemParamsResult'},
                                                                            'type': 'array'}},
                                                 'type': 'object'},
                     'FilesystemResult': {'additionalProperties': False,
                                          'properties': {'error': {'$ref': '#/definitions/Error'},
                                                         'result': {'$ref': '#/definitions/Filesystem'}},
                                          'required': ['result'],
                                          'type': 'object'},
                     'FilesystemResults': {'additionalProperties': False,
                                           'properties': {'results': {'items': {'$ref': '#/definitions/FilesystemResult'},
                                                                      'type': 'array'}},
                                           'type': 'object'},
                     'Filesystems': {'additionalProperties': False,
                                     'properties': {'filesystems': {'items': {'$ref': '#/definitions/Filesystem'},
                                                                    'type': 'array'}},
                                     'required': ['filesystems'],
                                     'type': 'object'},
                     'LifeResult': {'additionalProperties': False,
                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                   'life': {'type': 'string'}},
                                    'required': ['life'],
                                    'type': 'object'},
                     'LifeResults': {'additionalProperties': False,
                                     'properties': {'results': {'items': {'$ref': '#/definitions/LifeResult'},
                                                                'type': 'array'}},
                                     'required': ['results'],
                                     'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MachineStorageId': {'additionalProperties': False,
                                          'properties': {'attachment-tag': {'type': 'string'},
                                                         'machine-tag': {'type': 'string'}},
                                          'required': ['machine-tag',
                                                       'attachment-tag'],
                                          'type': 'object'},
                     'MachineStorageIds': {'additionalProperties': False,
                                           'properties': {'ids': {'items': {'$ref': '#/definitions/MachineStorageId'},
                                                                  'type': 'array'}},
                                           'required': ['ids'],
                                           'type': 'object'},
                     'MachineStorageIdsWatchResult': {'additionalProperties': False,
                                                      'properties': {'changes': {'items': {'$ref': '#/definitions/MachineStorageId'},
                                                                                 'type': 'array'},
                                                                     'error': {'$ref': '#/definitions/Error'},
                                                                     'watcher-id': {'type': 'string'}},
                                                      'required': ['watcher-id',
                                                                   'changes'],
                                                      'type': 'object'},
                     'MachineStorageIdsWatchResults': {'additionalProperties': False,
                                                       'properties': {'results': {'items': {'$ref': '#/definitions/MachineStorageIdsWatchResult'},
                                                                                  'type': 'array'}},
                                                       'required': ['results'],
                                                       'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'NotifyWatchResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/NotifyWatchResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'SetStatus': {'additionalProperties': False,
                                   'properties': {'entities': {'items': {'$ref': '#/definitions/EntityStatusArgs'},
                                                               'type': 'array'}},
                                   'required': ['entities'],
                                   'type': 'object'},
                     'StringResult': {'additionalProperties': False,
                                      'properties': {'error': {'$ref': '#/definitions/Error'},
                                                     'result': {'type': 'string'}},
                                      'required': ['result'],
                                      'type': 'object'},
                     'StringResults': {'additionalProperties': False,
                                       'properties': {'results': {'items': {'$ref': '#/definitions/StringResult'},
                                                                  'type': 'array'}},
                                       'required': ['results'],
                                       'type': 'object'},
                     'StringsWatchResult': {'additionalProperties': False,
                                            'properties': {'changes': {'items': {'type': 'string'},
                                                                       'type': 'array'},
                                                           'error': {'$ref': '#/definitions/Error'},
                                                           'watcher-id': {'type': 'string'}},
                                            'required': ['watcher-id'],
                                            'type': 'object'},
                     'StringsWatchResults': {'additionalProperties': False,
                                             'properties': {'results': {'items': {'$ref': '#/definitions/StringsWatchResult'},
                                                                        'type': 'array'}},
                                             'required': ['results'],
                                             'type': 'object'},
                     'Volume': {'additionalProperties': False,
                                'properties': {'info': {'$ref': '#/definitions/VolumeInfo'},
                                               'volume-tag': {'type': 'string'}},
                                'required': ['volume-tag', 'info'],
                                'type': 'object'},
                     'VolumeAttachment': {'additionalProperties': False,
                                          'properties': {'info': {'$ref': '#/definitions/VolumeAttachmentInfo'},
                                                         'machine-tag': {'type': 'string'},
                                                         'volume-tag': {'type': 'string'}},
                                          'required': ['volume-tag',
                                                       'machine-tag',
                                                       'info'],
                                          'type': 'object'},
                     'VolumeAttachmentInfo': {'additionalProperties': False,
                                              'properties': {'bus-address': {'type': 'string'},
                                                             'device-link': {'type': 'string'},
                                                             'device-name': {'type': 'string'},
                                                             'read-only': {'type': 'boolean'}},
                                              'type': 'object'},
                     'VolumeAttachmentParams': {'additionalProperties': False,
                                                'properties': {'instance-id': {'type': 'string'},
                                                               'machine-tag': {'type': 'string'},
                                                               'provider': {'type': 'string'},
                                                               'read-only': {'type': 'boolean'},
                                                               'volume-id': {'type': 'string'},
                                                               'volume-tag': {'type': 'string'}},
                                                'required': ['volume-tag',
                                                             'machine-tag',
                                                             'provider'],
                                                'type': 'object'},
                     'VolumeAttachmentParamsResult': {'additionalProperties': False,
                                                      'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                     'result': {'$ref': '#/definitions/VolumeAttachmentParams'}},
                                                      'required': ['result'],
                                                      'type': 'object'},
                     'VolumeAttachmentParamsResults': {'additionalProperties': False,
                                                       'properties': {'results': {'items': {'$ref': '#/definitions/VolumeAttachmentParamsResult'},
                                                                                  'type': 'array'}},
                                                       'type': 'object'},
                     'VolumeAttachmentResult': {'additionalProperties': False,
                                                'properties': {'error': {'$ref': '#/definitions/Error'},
                                                               'result': {'$ref': '#/definitions/VolumeAttachment'}},
                                                'required': ['result'],
                                                'type': 'object'},
                     'VolumeAttachmentResults': {'additionalProperties': False,
                                                 'properties': {'results': {'items': {'$ref': '#/definitions/VolumeAttachmentResult'},
                                                                            'type': 'array'}},
                                                 'type': 'object'},
                     'VolumeAttachments': {'additionalProperties': False,
                                           'properties': {'volume-attachments': {'items': {'$ref': '#/definitions/VolumeAttachment'},
                                                                                 'type': 'array'}},
                                           'required': ['volume-attachments'],
                                           'type': 'object'},
                     'VolumeInfo': {'additionalProperties': False,
                                    'properties': {'hardware-id': {'type': 'string'},
                                                   'persistent': {'type': 'boolean'},
                                                   'size': {'type': 'integer'},
                                                   'volume-id': {'type': 'string'}},
                                    'required': ['volume-id', 'size', 'persistent'],
                                    'type': 'object'},
                     'VolumeParams': {'additionalProperties': False,
                                      'properties': {'attachment': {'$ref': '#/definitions/VolumeAttachmentParams'},
                                                     'attributes': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                 'type': 'object'}},
                                                                    'type': 'object'},
                                                     'provider': {'type': 'string'},
                                                     'size': {'type': 'integer'},
                                                     'tags': {'patternProperties': {'.*': {'type': 'string'}},
                                                              'type': 'object'},
                                                     'volume-tag': {'type': 'string'}},
                                      'required': ['volume-tag',
                                                   'size',
                                                   'provider'],
                                      'type': 'object'},
                     'VolumeParamsResult': {'additionalProperties': False,
                                            'properties': {'error': {'$ref': '#/definitions/Error'},
                                                           'result': {'$ref': '#/definitions/VolumeParams'}},
                                            'required': ['result'],
                                            'type': 'object'},
                     'VolumeParamsResults': {'additionalProperties': False,
                                             'properties': {'results': {'items': {'$ref': '#/definitions/VolumeParamsResult'},
                                                                        'type': 'array'}},
                                             'type': 'object'},
                     'VolumeResult': {'additionalProperties': False,
                                      'properties': {'error': {'$ref': '#/definitions/Error'},
                                                     'result': {'$ref': '#/definitions/Volume'}},
                                      'required': ['result'],
                                      'type': 'object'},
                     'VolumeResults': {'additionalProperties': False,
                                       'properties': {'results': {'items': {'$ref': '#/definitions/VolumeResult'},
                                                                  'type': 'array'}},
                                       'type': 'object'},
                     'Volumes': {'additionalProperties': False,
                                 'properties': {'volumes': {'items': {'$ref': '#/definitions/Volume'},
                                                            'type': 'array'}},
                                 'required': ['volumes'],
                                 'type': 'object'}},
     'properties': {'AttachmentLife': {'properties': {'Params': {'$ref': '#/definitions/MachineStorageIds'},
                                                      'Result': {'$ref': '#/definitions/LifeResults'}},
                                       'type': 'object'},
                    'EnsureDead': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'},
                    'FilesystemAttachmentParams': {'properties': {'Params': {'$ref': '#/definitions/MachineStorageIds'},
                                                                  'Result': {'$ref': '#/definitions/FilesystemAttachmentParamsResults'}},
                                                   'type': 'object'},
                    'FilesystemAttachments': {'properties': {'Params': {'$ref': '#/definitions/MachineStorageIds'},
                                                             'Result': {'$ref': '#/definitions/FilesystemAttachmentResults'}},
                                              'type': 'object'},
                    'FilesystemParams': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                        'Result': {'$ref': '#/definitions/FilesystemParamsResults'}},
                                         'type': 'object'},
                    'Filesystems': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                   'Result': {'$ref': '#/definitions/FilesystemResults'}},
                                    'type': 'object'},
                    'InstanceId': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/StringResults'}},
                                   'type': 'object'},
                    'Life': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                            'Result': {'$ref': '#/definitions/LifeResults'}},
                             'type': 'object'},
                    'Remove': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                              'Result': {'$ref': '#/definitions/ErrorResults'}},
                               'type': 'object'},
                    'RemoveAttachment': {'properties': {'Params': {'$ref': '#/definitions/MachineStorageIds'},
                                                        'Result': {'$ref': '#/definitions/ErrorResults'}},
                                         'type': 'object'},
                    'SetFilesystemAttachmentInfo': {'properties': {'Params': {'$ref': '#/definitions/FilesystemAttachments'},
                                                                   'Result': {'$ref': '#/definitions/ErrorResults'}},
                                                    'type': 'object'},
                    'SetFilesystemInfo': {'properties': {'Params': {'$ref': '#/definitions/Filesystems'},
                                                         'Result': {'$ref': '#/definitions/ErrorResults'}},
                                          'type': 'object'},
                    'SetStatus': {'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                 'Result': {'$ref': '#/definitions/ErrorResults'}},
                                  'type': 'object'},
                    'SetVolumeAttachmentInfo': {'properties': {'Params': {'$ref': '#/definitions/VolumeAttachments'},
                                                               'Result': {'$ref': '#/definitions/ErrorResults'}},
                                                'type': 'object'},
                    'SetVolumeInfo': {'properties': {'Params': {'$ref': '#/definitions/Volumes'},
                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                      'type': 'object'},
                    'UpdateStatus': {'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                    'Result': {'$ref': '#/definitions/ErrorResults'}},
                                     'type': 'object'},
                    'VolumeAttachmentParams': {'properties': {'Params': {'$ref': '#/definitions/MachineStorageIds'},
                                                              'Result': {'$ref': '#/definitions/VolumeAttachmentParamsResults'}},
                                               'type': 'object'},
                    'VolumeAttachments': {'properties': {'Params': {'$ref': '#/definitions/MachineStorageIds'},
                                                         'Result': {'$ref': '#/definitions/VolumeAttachmentResults'}},
                                          'type': 'object'},
                    'VolumeBlockDevices': {'properties': {'Params': {'$ref': '#/definitions/MachineStorageIds'},
                                                          'Result': {'$ref': '#/definitions/BlockDeviceResults'}},
                                           'type': 'object'},
                    'VolumeParams': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                    'Result': {'$ref': '#/definitions/VolumeParamsResults'}},
                                     'type': 'object'},
                    'Volumes': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                               'Result': {'$ref': '#/definitions/VolumeResults'}},
                                'type': 'object'},
                    'WatchBlockDevices': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                         'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                          'type': 'object'},
                    'WatchFilesystemAttachments': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                  'Result': {'$ref': '#/definitions/MachineStorageIdsWatchResults'}},
                                                   'type': 'object'},
                    'WatchFilesystems': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                        'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                         'type': 'object'},
                    'WatchMachines': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                     'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                      'type': 'object'},
                    'WatchVolumeAttachments': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                              'Result': {'$ref': '#/definitions/MachineStorageIdsWatchResults'}},
                                               'type': 'object'},
                    'WatchVolumes': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                    'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                     'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(LifeResults)
    async def AttachmentLife(self, ids):
        '''
        ids : typing.Sequence<+T_co>[~MachineStorageId]<~MachineStorageId>
        Returns -> typing.Sequence<+T_co>[~LifeResult]<~LifeResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='AttachmentLife', version=3, params=params)
        params['ids'] = ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def EnsureDead(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='EnsureDead', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(FilesystemAttachmentParamsResults)
    async def FilesystemAttachmentParams(self, ids):
        '''
        ids : typing.Sequence<+T_co>[~MachineStorageId]<~MachineStorageId>
        Returns -> typing.Sequence<+T_co>[~FilesystemAttachmentParamsResult]<~FilesystemAttachmentParamsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='FilesystemAttachmentParams', version=3, params=params)
        params['ids'] = ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(FilesystemAttachmentResults)
    async def FilesystemAttachments(self, ids):
        '''
        ids : typing.Sequence<+T_co>[~MachineStorageId]<~MachineStorageId>
        Returns -> typing.Sequence<+T_co>[~FilesystemAttachmentResult]<~FilesystemAttachmentResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='FilesystemAttachments', version=3, params=params)
        params['ids'] = ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(FilesystemParamsResults)
    async def FilesystemParams(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~FilesystemParamsResult]<~FilesystemParamsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='FilesystemParams', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(FilesystemResults)
    async def Filesystems(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~FilesystemResult]<~FilesystemResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='Filesystems', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def InstanceId(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringResult]<~StringResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='InstanceId', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(LifeResults)
    async def Life(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~LifeResult]<~LifeResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='Life', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def Remove(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='Remove', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def RemoveAttachment(self, ids):
        '''
        ids : typing.Sequence<+T_co>[~MachineStorageId]<~MachineStorageId>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='RemoveAttachment', version=3, params=params)
        params['ids'] = ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetFilesystemAttachmentInfo(self, filesystem_attachments):
        '''
        filesystem_attachments : typing.Sequence<+T_co>[~FilesystemAttachment]<~FilesystemAttachment>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='SetFilesystemAttachmentInfo', version=3, params=params)
        params['filesystem-attachments'] = filesystem_attachments
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetFilesystemInfo(self, filesystems):
        '''
        filesystems : typing.Sequence<+T_co>[~Filesystem]<~Filesystem>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='SetFilesystemInfo', version=3, params=params)
        params['filesystems'] = filesystems
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityStatusArgs]<~EntityStatusArgs>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='SetStatus', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetVolumeAttachmentInfo(self, volume_attachments):
        '''
        volume_attachments : typing.Sequence<+T_co>[~VolumeAttachment]<~VolumeAttachment>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='SetVolumeAttachmentInfo', version=3, params=params)
        params['volume-attachments'] = volume_attachments
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetVolumeInfo(self, volumes):
        '''
        volumes : typing.Sequence<+T_co>[~Volume]<~Volume>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='SetVolumeInfo', version=3, params=params)
        params['volumes'] = volumes
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def UpdateStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityStatusArgs]<~EntityStatusArgs>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='UpdateStatus', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(VolumeAttachmentParamsResults)
    async def VolumeAttachmentParams(self, ids):
        '''
        ids : typing.Sequence<+T_co>[~MachineStorageId]<~MachineStorageId>
        Returns -> typing.Sequence<+T_co>[~VolumeAttachmentParamsResult]<~VolumeAttachmentParamsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='VolumeAttachmentParams', version=3, params=params)
        params['ids'] = ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(VolumeAttachmentResults)
    async def VolumeAttachments(self, ids):
        '''
        ids : typing.Sequence<+T_co>[~MachineStorageId]<~MachineStorageId>
        Returns -> typing.Sequence<+T_co>[~VolumeAttachmentResult]<~VolumeAttachmentResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='VolumeAttachments', version=3, params=params)
        params['ids'] = ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(BlockDeviceResults)
    async def VolumeBlockDevices(self, ids):
        '''
        ids : typing.Sequence<+T_co>[~MachineStorageId]<~MachineStorageId>
        Returns -> typing.Sequence<+T_co>[~BlockDeviceResult]<~BlockDeviceResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='VolumeBlockDevices', version=3, params=params)
        params['ids'] = ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(VolumeParamsResults)
    async def VolumeParams(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~VolumeParamsResult]<~VolumeParamsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='VolumeParams', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(VolumeResults)
    async def Volumes(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~VolumeResult]<~VolumeResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='Volumes', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchBlockDevices(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='WatchBlockDevices', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(MachineStorageIdsWatchResults)
    async def WatchFilesystemAttachments(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~MachineStorageIdsWatchResult]<~MachineStorageIdsWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='WatchFilesystemAttachments', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchFilesystems(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringsWatchResult]<~StringsWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='WatchFilesystems', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchMachines(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='WatchMachines', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(MachineStorageIdsWatchResults)
    async def WatchVolumeAttachments(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~MachineStorageIdsWatchResult]<~MachineStorageIdsWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='WatchVolumeAttachments', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchVolumes(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringsWatchResult]<~StringsWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StorageProvisioner', request='WatchVolumes', version=3, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class StringsWatcherFacade(Type):
    name = 'StringsWatcher'
    version = 1
    schema =     {'definitions': {'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'StringsWatchResult': {'additionalProperties': False,
                                            'properties': {'changes': {'items': {'type': 'string'},
                                                                       'type': 'array'},
                                                           'error': {'$ref': '#/definitions/Error'},
                                                           'watcher-id': {'type': 'string'}},
                                            'required': ['watcher-id'],
                                            'type': 'object'}},
     'properties': {'Next': {'properties': {'Result': {'$ref': '#/definitions/StringsWatchResult'}},
                             'type': 'object'},
                    'Stop': {'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(StringsWatchResult)
    async def Next(self):
        '''

        Returns -> typing.Union[typing.Sequence<+T_co>[str], _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StringsWatcher', request='Next', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Stop(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='StringsWatcher', request='Stop', version=1, params=params)

        reply = await self.rpc(msg)
        return reply


class SubnetsFacade(Type):
    name = 'Subnets'
    version = 2
    schema =     {'definitions': {'AddSubnetParams': {'additionalProperties': False,
                                         'properties': {'space-tag': {'type': 'string'},
                                                        'subnet-provider-id': {'type': 'string'},
                                                        'subnet-tag': {'type': 'string'},
                                                        'zones': {'items': {'type': 'string'},
                                                                  'type': 'array'}},
                                         'required': ['space-tag'],
                                         'type': 'object'},
                     'AddSubnetsParams': {'additionalProperties': False,
                                          'properties': {'subnets': {'items': {'$ref': '#/definitions/AddSubnetParams'},
                                                                     'type': 'array'}},
                                          'required': ['subnets'],
                                          'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'ListSubnetsResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/Subnet'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'SpaceResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'},
                                                    'tag': {'type': 'string'}},
                                     'required': ['tag'],
                                     'type': 'object'},
                     'SpaceResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/SpaceResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Subnet': {'additionalProperties': False,
                                'properties': {'cidr': {'type': 'string'},
                                               'life': {'type': 'string'},
                                               'provider-id': {'type': 'string'},
                                               'space-tag': {'type': 'string'},
                                               'status': {'type': 'string'},
                                               'vlan-tag': {'type': 'integer'},
                                               'zones': {'items': {'type': 'string'},
                                                         'type': 'array'}},
                                'required': ['cidr',
                                             'vlan-tag',
                                             'life',
                                             'space-tag',
                                             'zones'],
                                'type': 'object'},
                     'SubnetsFilters': {'additionalProperties': False,
                                        'properties': {'space-tag': {'type': 'string'},
                                                       'zone': {'type': 'string'}},
                                        'type': 'object'},
                     'ZoneResult': {'additionalProperties': False,
                                    'properties': {'available': {'type': 'boolean'},
                                                   'error': {'$ref': '#/definitions/Error'},
                                                   'name': {'type': 'string'}},
                                    'required': ['name', 'available'],
                                    'type': 'object'},
                     'ZoneResults': {'additionalProperties': False,
                                     'properties': {'results': {'items': {'$ref': '#/definitions/ZoneResult'},
                                                                'type': 'array'}},
                                     'required': ['results'],
                                     'type': 'object'}},
     'properties': {'AddSubnets': {'properties': {'Params': {'$ref': '#/definitions/AddSubnetsParams'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'},
                    'AllSpaces': {'properties': {'Result': {'$ref': '#/definitions/SpaceResults'}},
                                  'type': 'object'},
                    'AllZones': {'properties': {'Result': {'$ref': '#/definitions/ZoneResults'}},
                                 'type': 'object'},
                    'ListSubnets': {'properties': {'Params': {'$ref': '#/definitions/SubnetsFilters'},
                                                   'Result': {'$ref': '#/definitions/ListSubnetsResults'}},
                                    'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResults)
    async def AddSubnets(self, subnets):
        '''
        subnets : typing.Sequence<+T_co>[~AddSubnetParams]<~AddSubnetParams>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Subnets', request='AddSubnets', version=2, params=params)
        params['subnets'] = subnets
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(SpaceResults)
    async def AllSpaces(self):
        '''

        Returns -> typing.Sequence<+T_co>[~SpaceResult]<~SpaceResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Subnets', request='AllSpaces', version=2, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ZoneResults)
    async def AllZones(self):
        '''

        Returns -> typing.Sequence<+T_co>[~ZoneResult]<~ZoneResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Subnets', request='AllZones', version=2, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ListSubnetsResults)
    async def ListSubnets(self, space_tag, zone):
        '''
        space_tag : str
        zone : str
        Returns -> typing.Sequence<+T_co>[~Subnet]<~Subnet>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Subnets', request='ListSubnets', version=2, params=params)
        params['space-tag'] = space_tag
        params['zone'] = zone
        reply = await self.rpc(msg)
        return reply


class UndertakerFacade(Type):
    name = 'Undertaker'
    version = 1
    schema =     {'definitions': {'EntityStatusArgs': {'additionalProperties': False,
                                          'properties': {'data': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                               'type': 'object'}},
                                                                  'type': 'object'},
                                                         'info': {'type': 'string'},
                                                         'status': {'type': 'string'},
                                                         'tag': {'type': 'string'}},
                                          'required': ['tag',
                                                       'status',
                                                       'info',
                                                       'data'],
                                          'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'ModelConfigResult': {'additionalProperties': False,
                                           'properties': {'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                  'type': 'object'}},
                                                                     'type': 'object'}},
                                           'required': ['config'],
                                           'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'NotifyWatchResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/NotifyWatchResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'SetStatus': {'additionalProperties': False,
                                   'properties': {'entities': {'items': {'$ref': '#/definitions/EntityStatusArgs'},
                                                               'type': 'array'}},
                                   'required': ['entities'],
                                   'type': 'object'},
                     'UndertakerModelInfo': {'additionalProperties': False,
                                             'properties': {'global-name': {'type': 'string'},
                                                            'is-system': {'type': 'boolean'},
                                                            'life': {'type': 'string'},
                                                            'name': {'type': 'string'},
                                                            'uuid': {'type': 'string'}},
                                             'required': ['uuid',
                                                          'name',
                                                          'global-name',
                                                          'is-system',
                                                          'life'],
                                             'type': 'object'},
                     'UndertakerModelInfoResult': {'additionalProperties': False,
                                                   'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                  'result': {'$ref': '#/definitions/UndertakerModelInfo'}},
                                                   'required': ['result'],
                                                   'type': 'object'}},
     'properties': {'ModelConfig': {'properties': {'Result': {'$ref': '#/definitions/ModelConfigResult'}},
                                    'type': 'object'},
                    'ModelInfo': {'properties': {'Result': {'$ref': '#/definitions/UndertakerModelInfoResult'}},
                                  'type': 'object'},
                    'ProcessDyingModel': {'type': 'object'},
                    'RemoveModel': {'type': 'object'},
                    'SetStatus': {'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                 'Result': {'$ref': '#/definitions/ErrorResults'}},
                                  'type': 'object'},
                    'UpdateStatus': {'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                    'Result': {'$ref': '#/definitions/ErrorResults'}},
                                     'type': 'object'},
                    'WatchModelResources': {'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                            'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ModelConfigResult)
    async def ModelConfig(self):
        '''

        Returns -> typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Undertaker', request='ModelConfig', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(UndertakerModelInfoResult)
    async def ModelInfo(self):
        '''

        Returns -> typing.Union[_ForwardRef('Error'), _ForwardRef('UndertakerModelInfo')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Undertaker', request='ModelInfo', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def ProcessDyingModel(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Undertaker', request='ProcessDyingModel', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def RemoveModel(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Undertaker', request='RemoveModel', version=1, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityStatusArgs]<~EntityStatusArgs>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Undertaker', request='SetStatus', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def UpdateStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityStatusArgs]<~EntityStatusArgs>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Undertaker', request='UpdateStatus', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchModelResources(self):
        '''

        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Undertaker', request='WatchModelResources', version=1, params=params)

        reply = await self.rpc(msg)
        return reply


class UnitAssignerFacade(Type):
    name = 'UnitAssigner'
    version = 1
    schema =     {'definitions': {'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'EntityStatusArgs': {'additionalProperties': False,
                                          'properties': {'data': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                               'type': 'object'}},
                                                                  'type': 'object'},
                                                         'info': {'type': 'string'},
                                                         'status': {'type': 'string'},
                                                         'tag': {'type': 'string'}},
                                          'required': ['tag',
                                                       'status',
                                                       'info',
                                                       'data'],
                                          'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'SetStatus': {'additionalProperties': False,
                                   'properties': {'entities': {'items': {'$ref': '#/definitions/EntityStatusArgs'},
                                                               'type': 'array'}},
                                   'required': ['entities'],
                                   'type': 'object'},
                     'StringsWatchResult': {'additionalProperties': False,
                                            'properties': {'changes': {'items': {'type': 'string'},
                                                                       'type': 'array'},
                                                           'error': {'$ref': '#/definitions/Error'},
                                                           'watcher-id': {'type': 'string'}},
                                            'required': ['watcher-id'],
                                            'type': 'object'}},
     'properties': {'AssignUnits': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                   'Result': {'$ref': '#/definitions/ErrorResults'}},
                                    'type': 'object'},
                    'SetAgentStatus': {'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                      'Result': {'$ref': '#/definitions/ErrorResults'}},
                                       'type': 'object'},
                    'WatchUnitAssignments': {'properties': {'Result': {'$ref': '#/definitions/StringsWatchResult'}},
                                             'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(ErrorResults)
    async def AssignUnits(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='UnitAssigner', request='AssignUnits', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetAgentStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityStatusArgs]<~EntityStatusArgs>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='UnitAssigner', request='SetAgentStatus', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResult)
    async def WatchUnitAssignments(self):
        '''

        Returns -> typing.Union[typing.Sequence<+T_co>[str], _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='UnitAssigner', request='WatchUnitAssignments', version=1, params=params)

        reply = await self.rpc(msg)
        return reply


class UniterFacade(Type):
    name = 'Uniter'
    version = 4
    schema =     {'definitions': {'APIHostPortsResult': {'additionalProperties': False,
                                            'properties': {'servers': {'items': {'items': {'$ref': '#/definitions/HostPort'},
                                                                                 'type': 'array'},
                                                                       'type': 'array'}},
                                            'required': ['servers'],
                                            'type': 'object'},
                     'Action': {'additionalProperties': False,
                                'properties': {'name': {'type': 'string'},
                                               'parameters': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                           'type': 'object'}},
                                                              'type': 'object'},
                                               'receiver': {'type': 'string'},
                                               'tag': {'type': 'string'}},
                                'required': ['tag', 'receiver', 'name'],
                                'type': 'object'},
                     'ActionExecutionResult': {'additionalProperties': False,
                                               'properties': {'action-tag': {'type': 'string'},
                                                              'message': {'type': 'string'},
                                                              'results': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                       'type': 'object'}},
                                                                          'type': 'object'},
                                                              'status': {'type': 'string'}},
                                               'required': ['action-tag', 'status'],
                                               'type': 'object'},
                     'ActionExecutionResults': {'additionalProperties': False,
                                                'properties': {'results': {'items': {'$ref': '#/definitions/ActionExecutionResult'},
                                                                           'type': 'array'}},
                                                'type': 'object'},
                     'ActionResult': {'additionalProperties': False,
                                      'properties': {'action': {'$ref': '#/definitions/Action'},
                                                     'completed': {'format': 'date-time',
                                                                   'type': 'string'},
                                                     'enqueued': {'format': 'date-time',
                                                                  'type': 'string'},
                                                     'error': {'$ref': '#/definitions/Error'},
                                                     'message': {'type': 'string'},
                                                     'output': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                             'type': 'object'}},
                                                                'type': 'object'},
                                                     'started': {'format': 'date-time',
                                                                 'type': 'string'},
                                                     'status': {'type': 'string'}},
                                      'type': 'object'},
                     'ActionResults': {'additionalProperties': False,
                                       'properties': {'results': {'items': {'$ref': '#/definitions/ActionResult'},
                                                                  'type': 'array'}},
                                       'type': 'object'},
                     'Address': {'additionalProperties': False,
                                 'properties': {'scope': {'type': 'string'},
                                                'space-name': {'type': 'string'},
                                                'type': {'type': 'string'},
                                                'value': {'type': 'string'}},
                                 'required': ['value', 'type', 'scope'],
                                 'type': 'object'},
                     'ApplicationStatusResult': {'additionalProperties': False,
                                                 'properties': {'application': {'$ref': '#/definitions/StatusResult'},
                                                                'error': {'$ref': '#/definitions/Error'},
                                                                'units': {'patternProperties': {'.*': {'$ref': '#/definitions/StatusResult'}},
                                                                          'type': 'object'}},
                                                 'required': ['application',
                                                              'units'],
                                                 'type': 'object'},
                     'ApplicationStatusResults': {'additionalProperties': False,
                                                  'properties': {'results': {'items': {'$ref': '#/definitions/ApplicationStatusResult'},
                                                                             'type': 'array'}},
                                                  'required': ['results'],
                                                  'type': 'object'},
                     'BoolResult': {'additionalProperties': False,
                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                   'result': {'type': 'boolean'}},
                                    'required': ['result'],
                                    'type': 'object'},
                     'BoolResults': {'additionalProperties': False,
                                     'properties': {'results': {'items': {'$ref': '#/definitions/BoolResult'},
                                                                'type': 'array'}},
                                     'required': ['results'],
                                     'type': 'object'},
                     'BytesResult': {'additionalProperties': False,
                                     'properties': {'result': {'items': {'type': 'integer'},
                                                               'type': 'array'}},
                                     'required': ['result'],
                                     'type': 'object'},
                     'CharmRelation': {'additionalProperties': False,
                                       'properties': {'interface': {'type': 'string'},
                                                      'limit': {'type': 'integer'},
                                                      'name': {'type': 'string'},
                                                      'optional': {'type': 'boolean'},
                                                      'role': {'type': 'string'},
                                                      'scope': {'type': 'string'}},
                                       'required': ['name',
                                                    'role',
                                                    'interface',
                                                    'optional',
                                                    'limit',
                                                    'scope'],
                                       'type': 'object'},
                     'CharmURL': {'additionalProperties': False,
                                  'properties': {'url': {'type': 'string'}},
                                  'required': ['url'],
                                  'type': 'object'},
                     'CharmURLs': {'additionalProperties': False,
                                   'properties': {'urls': {'items': {'$ref': '#/definitions/CharmURL'},
                                                           'type': 'array'}},
                                   'required': ['urls'],
                                   'type': 'object'},
                     'ConfigSettingsResult': {'additionalProperties': False,
                                              'properties': {'error': {'$ref': '#/definitions/Error'},
                                                             'settings': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                       'type': 'object'}},
                                                                          'type': 'object'}},
                                              'required': ['settings'],
                                              'type': 'object'},
                     'ConfigSettingsResults': {'additionalProperties': False,
                                               'properties': {'results': {'items': {'$ref': '#/definitions/ConfigSettingsResult'},
                                                                          'type': 'array'}},
                                               'required': ['results'],
                                               'type': 'object'},
                     'Endpoint': {'additionalProperties': False,
                                  'properties': {'application-name': {'type': 'string'},
                                                 'relation': {'$ref': '#/definitions/CharmRelation'}},
                                  'required': ['application-name', 'relation'],
                                  'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'EntitiesCharmURL': {'additionalProperties': False,
                                          'properties': {'entities': {'items': {'$ref': '#/definitions/EntityCharmURL'},
                                                                      'type': 'array'}},
                                          'required': ['entities'],
                                          'type': 'object'},
                     'EntitiesPortRanges': {'additionalProperties': False,
                                            'properties': {'entities': {'items': {'$ref': '#/definitions/EntityPortRange'},
                                                                        'type': 'array'}},
                                            'required': ['entities'],
                                            'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'EntityCharmURL': {'additionalProperties': False,
                                        'properties': {'charm-url': {'type': 'string'},
                                                       'tag': {'type': 'string'}},
                                        'required': ['tag', 'charm-url'],
                                        'type': 'object'},
                     'EntityPortRange': {'additionalProperties': False,
                                         'properties': {'from-port': {'type': 'integer'},
                                                        'protocol': {'type': 'string'},
                                                        'tag': {'type': 'string'},
                                                        'to-port': {'type': 'integer'}},
                                         'required': ['tag',
                                                      'protocol',
                                                      'from-port',
                                                      'to-port'],
                                         'type': 'object'},
                     'EntityStatusArgs': {'additionalProperties': False,
                                          'properties': {'data': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                               'type': 'object'}},
                                                                  'type': 'object'},
                                                         'info': {'type': 'string'},
                                                         'status': {'type': 'string'},
                                                         'tag': {'type': 'string'}},
                                          'required': ['tag',
                                                       'status',
                                                       'info',
                                                       'data'],
                                          'type': 'object'},
                     'EntityWorkloadVersion': {'additionalProperties': False,
                                               'properties': {'tag': {'type': 'string'},
                                                              'workload-version': {'type': 'string'}},
                                               'required': ['tag',
                                                            'workload-version'],
                                               'type': 'object'},
                     'EntityWorkloadVersions': {'additionalProperties': False,
                                                'properties': {'entities': {'items': {'$ref': '#/definitions/EntityWorkloadVersion'},
                                                                            'type': 'array'}},
                                                'required': ['entities'],
                                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'GetLeadershipSettingsBulkResults': {'additionalProperties': False,
                                                          'properties': {'results': {'items': {'$ref': '#/definitions/GetLeadershipSettingsResult'},
                                                                                     'type': 'array'}},
                                                          'required': ['results'],
                                                          'type': 'object'},
                     'GetLeadershipSettingsResult': {'additionalProperties': False,
                                                     'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                    'settings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                                 'type': 'object'}},
                                                     'required': ['settings'],
                                                     'type': 'object'},
                     'HostPort': {'additionalProperties': False,
                                  'properties': {'Address': {'$ref': '#/definitions/Address'},
                                                 'port': {'type': 'integer'}},
                                  'required': ['Address', 'port'],
                                  'type': 'object'},
                     'IntResult': {'additionalProperties': False,
                                   'properties': {'error': {'$ref': '#/definitions/Error'},
                                                  'result': {'type': 'integer'}},
                                   'required': ['result'],
                                   'type': 'object'},
                     'IntResults': {'additionalProperties': False,
                                    'properties': {'results': {'items': {'$ref': '#/definitions/IntResult'},
                                                               'type': 'array'}},
                                    'required': ['results'],
                                    'type': 'object'},
                     'LifeResult': {'additionalProperties': False,
                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                   'life': {'type': 'string'}},
                                    'required': ['life'],
                                    'type': 'object'},
                     'LifeResults': {'additionalProperties': False,
                                     'properties': {'results': {'items': {'$ref': '#/definitions/LifeResult'},
                                                                'type': 'array'}},
                                     'required': ['results'],
                                     'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MachinePortRange': {'additionalProperties': False,
                                          'properties': {'port-range': {'$ref': '#/definitions/PortRange'},
                                                         'relation-tag': {'type': 'string'},
                                                         'unit-tag': {'type': 'string'}},
                                          'required': ['unit-tag',
                                                       'relation-tag',
                                                       'port-range'],
                                          'type': 'object'},
                     'MachinePortsResult': {'additionalProperties': False,
                                            'properties': {'error': {'$ref': '#/definitions/Error'},
                                                           'ports': {'items': {'$ref': '#/definitions/MachinePortRange'},
                                                                     'type': 'array'}},
                                            'required': ['ports'],
                                            'type': 'object'},
                     'MachinePortsResults': {'additionalProperties': False,
                                             'properties': {'results': {'items': {'$ref': '#/definitions/MachinePortsResult'},
                                                                        'type': 'array'}},
                                             'required': ['results'],
                                             'type': 'object'},
                     'MergeLeadershipSettingsBulkParams': {'additionalProperties': False,
                                                           'properties': {'params': {'items': {'$ref': '#/definitions/MergeLeadershipSettingsParam'},
                                                                                     'type': 'array'}},
                                                           'required': ['params'],
                                                           'type': 'object'},
                     'MergeLeadershipSettingsParam': {'additionalProperties': False,
                                                      'properties': {'application-tag': {'type': 'string'},
                                                                     'settings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                                  'type': 'object'}},
                                                      'required': ['application-tag',
                                                                   'settings'],
                                                      'type': 'object'},
                     'MeterStatusResult': {'additionalProperties': False,
                                           'properties': {'code': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'},
                                                          'info': {'type': 'string'}},
                                           'required': ['code', 'info'],
                                           'type': 'object'},
                     'MeterStatusResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/MeterStatusResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'Metric': {'additionalProperties': False,
                                'properties': {'key': {'type': 'string'},
                                               'time': {'format': 'date-time',
                                                        'type': 'string'},
                                               'value': {'type': 'string'}},
                                'required': ['key', 'value', 'time'],
                                'type': 'object'},
                     'MetricBatch': {'additionalProperties': False,
                                     'properties': {'charm-url': {'type': 'string'},
                                                    'created': {'format': 'date-time',
                                                                'type': 'string'},
                                                    'metrics': {'items': {'$ref': '#/definitions/Metric'},
                                                                'type': 'array'},
                                                    'uuid': {'type': 'string'}},
                                     'required': ['uuid',
                                                  'charm-url',
                                                  'created',
                                                  'metrics'],
                                     'type': 'object'},
                     'MetricBatchParam': {'additionalProperties': False,
                                          'properties': {'batch': {'$ref': '#/definitions/MetricBatch'},
                                                         'tag': {'type': 'string'}},
                                          'required': ['tag', 'batch'],
                                          'type': 'object'},
                     'MetricBatchParams': {'additionalProperties': False,
                                           'properties': {'batches': {'items': {'$ref': '#/definitions/MetricBatchParam'},
                                                                      'type': 'array'}},
                                           'required': ['batches'],
                                           'type': 'object'},
                     'ModelConfigResult': {'additionalProperties': False,
                                           'properties': {'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                  'type': 'object'}},
                                                                     'type': 'object'}},
                                           'required': ['config'],
                                           'type': 'object'},
                     'ModelResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'},
                                                    'name': {'type': 'string'},
                                                    'uuid': {'type': 'string'}},
                                     'required': ['name', 'uuid'],
                                     'type': 'object'},
                     'NetworkConfig': {'additionalProperties': False,
                                       'properties': {'address': {'type': 'string'},
                                                      'cidr': {'type': 'string'},
                                                      'config-type': {'type': 'string'},
                                                      'device-index': {'type': 'integer'},
                                                      'disabled': {'type': 'boolean'},
                                                      'dns-search-domains': {'items': {'type': 'string'},
                                                                             'type': 'array'},
                                                      'dns-servers': {'items': {'type': 'string'},
                                                                      'type': 'array'},
                                                      'gateway-address': {'type': 'string'},
                                                      'interface-name': {'type': 'string'},
                                                      'interface-type': {'type': 'string'},
                                                      'mac-address': {'type': 'string'},
                                                      'mtu': {'type': 'integer'},
                                                      'no-auto-start': {'type': 'boolean'},
                                                      'parent-interface-name': {'type': 'string'},
                                                      'provider-address-id': {'type': 'string'},
                                                      'provider-id': {'type': 'string'},
                                                      'provider-space-id': {'type': 'string'},
                                                      'provider-subnet-id': {'type': 'string'},
                                                      'provider-vlan-id': {'type': 'string'},
                                                      'vlan-tag': {'type': 'integer'}},
                                       'required': ['device-index',
                                                    'mac-address',
                                                    'cidr',
                                                    'mtu',
                                                    'provider-id',
                                                    'provider-subnet-id',
                                                    'provider-space-id',
                                                    'provider-address-id',
                                                    'provider-vlan-id',
                                                    'vlan-tag',
                                                    'interface-name',
                                                    'parent-interface-name',
                                                    'interface-type',
                                                    'disabled'],
                                       'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'NotifyWatchResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/NotifyWatchResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'PortRange': {'additionalProperties': False,
                                   'properties': {'from-port': {'type': 'integer'},
                                                  'protocol': {'type': 'string'},
                                                  'to-port': {'type': 'integer'}},
                                   'required': ['from-port', 'to-port', 'protocol'],
                                   'type': 'object'},
                     'RelationIds': {'additionalProperties': False,
                                     'properties': {'relation-ids': {'items': {'type': 'integer'},
                                                                     'type': 'array'}},
                                     'required': ['relation-ids'],
                                     'type': 'object'},
                     'RelationResult': {'additionalProperties': False,
                                        'properties': {'endpoint': {'$ref': '#/definitions/Endpoint'},
                                                       'error': {'$ref': '#/definitions/Error'},
                                                       'id': {'type': 'integer'},
                                                       'key': {'type': 'string'},
                                                       'life': {'type': 'string'}},
                                        'required': ['life',
                                                     'id',
                                                     'key',
                                                     'endpoint'],
                                        'type': 'object'},
                     'RelationResults': {'additionalProperties': False,
                                         'properties': {'results': {'items': {'$ref': '#/definitions/RelationResult'},
                                                                    'type': 'array'}},
                                         'required': ['results'],
                                         'type': 'object'},
                     'RelationUnit': {'additionalProperties': False,
                                      'properties': {'relation': {'type': 'string'},
                                                     'unit': {'type': 'string'}},
                                      'required': ['relation', 'unit'],
                                      'type': 'object'},
                     'RelationUnitPair': {'additionalProperties': False,
                                          'properties': {'local-unit': {'type': 'string'},
                                                         'relation': {'type': 'string'},
                                                         'remote-unit': {'type': 'string'}},
                                          'required': ['relation',
                                                       'local-unit',
                                                       'remote-unit'],
                                          'type': 'object'},
                     'RelationUnitPairs': {'additionalProperties': False,
                                           'properties': {'relation-unit-pairs': {'items': {'$ref': '#/definitions/RelationUnitPair'},
                                                                                  'type': 'array'}},
                                           'required': ['relation-unit-pairs'],
                                           'type': 'object'},
                     'RelationUnitSettings': {'additionalProperties': False,
                                              'properties': {'relation': {'type': 'string'},
                                                             'settings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                          'type': 'object'},
                                                             'unit': {'type': 'string'}},
                                              'required': ['relation',
                                                           'unit',
                                                           'settings'],
                                              'type': 'object'},
                     'RelationUnits': {'additionalProperties': False,
                                       'properties': {'relation-units': {'items': {'$ref': '#/definitions/RelationUnit'},
                                                                         'type': 'array'}},
                                       'required': ['relation-units'],
                                       'type': 'object'},
                     'RelationUnitsChange': {'additionalProperties': False,
                                             'properties': {'changed': {'patternProperties': {'.*': {'$ref': '#/definitions/UnitSettings'}},
                                                                        'type': 'object'},
                                                            'departed': {'items': {'type': 'string'},
                                                                         'type': 'array'}},
                                             'required': ['changed'],
                                             'type': 'object'},
                     'RelationUnitsSettings': {'additionalProperties': False,
                                               'properties': {'relation-units': {'items': {'$ref': '#/definitions/RelationUnitSettings'},
                                                                                 'type': 'array'}},
                                               'required': ['relation-units'],
                                               'type': 'object'},
                     'RelationUnitsWatchResult': {'additionalProperties': False,
                                                  'properties': {'changes': {'$ref': '#/definitions/RelationUnitsChange'},
                                                                 'error': {'$ref': '#/definitions/Error'},
                                                                 'watcher-id': {'type': 'string'}},
                                                  'required': ['watcher-id',
                                                               'changes'],
                                                  'type': 'object'},
                     'RelationUnitsWatchResults': {'additionalProperties': False,
                                                   'properties': {'results': {'items': {'$ref': '#/definitions/RelationUnitsWatchResult'},
                                                                              'type': 'array'}},
                                                   'required': ['results'],
                                                   'type': 'object'},
                     'ResolvedModeResult': {'additionalProperties': False,
                                            'properties': {'error': {'$ref': '#/definitions/Error'},
                                                           'mode': {'type': 'string'}},
                                            'required': ['mode'],
                                            'type': 'object'},
                     'ResolvedModeResults': {'additionalProperties': False,
                                             'properties': {'results': {'items': {'$ref': '#/definitions/ResolvedModeResult'},
                                                                        'type': 'array'}},
                                             'required': ['results'],
                                             'type': 'object'},
                     'SetStatus': {'additionalProperties': False,
                                   'properties': {'entities': {'items': {'$ref': '#/definitions/EntityStatusArgs'},
                                                               'type': 'array'}},
                                   'required': ['entities'],
                                   'type': 'object'},
                     'SettingsResult': {'additionalProperties': False,
                                        'properties': {'error': {'$ref': '#/definitions/Error'},
                                                       'settings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                    'type': 'object'}},
                                        'required': ['settings'],
                                        'type': 'object'},
                     'SettingsResults': {'additionalProperties': False,
                                         'properties': {'results': {'items': {'$ref': '#/definitions/SettingsResult'},
                                                                    'type': 'array'}},
                                         'required': ['results'],
                                         'type': 'object'},
                     'StatusResult': {'additionalProperties': False,
                                      'properties': {'data': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                           'type': 'object'}},
                                                              'type': 'object'},
                                                     'error': {'$ref': '#/definitions/Error'},
                                                     'id': {'type': 'string'},
                                                     'info': {'type': 'string'},
                                                     'life': {'type': 'string'},
                                                     'since': {'format': 'date-time',
                                                               'type': 'string'},
                                                     'status': {'type': 'string'}},
                                      'required': ['id',
                                                   'life',
                                                   'status',
                                                   'info',
                                                   'data',
                                                   'since'],
                                      'type': 'object'},
                     'StatusResults': {'additionalProperties': False,
                                       'properties': {'results': {'items': {'$ref': '#/definitions/StatusResult'},
                                                                  'type': 'array'}},
                                       'required': ['results'],
                                       'type': 'object'},
                     'StorageAddParams': {'additionalProperties': False,
                                          'properties': {'name': {'type': 'string'},
                                                         'storage': {'$ref': '#/definitions/StorageConstraints'},
                                                         'unit': {'type': 'string'}},
                                          'required': ['unit', 'name', 'storage'],
                                          'type': 'object'},
                     'StorageAttachment': {'additionalProperties': False,
                                           'properties': {'kind': {'type': 'integer'},
                                                          'life': {'type': 'string'},
                                                          'location': {'type': 'string'},
                                                          'owner-tag': {'type': 'string'},
                                                          'storage-tag': {'type': 'string'},
                                                          'unit-tag': {'type': 'string'}},
                                           'required': ['storage-tag',
                                                        'owner-tag',
                                                        'unit-tag',
                                                        'kind',
                                                        'location',
                                                        'life'],
                                           'type': 'object'},
                     'StorageAttachmentId': {'additionalProperties': False,
                                             'properties': {'storage-tag': {'type': 'string'},
                                                            'unit-tag': {'type': 'string'}},
                                             'required': ['storage-tag',
                                                          'unit-tag'],
                                             'type': 'object'},
                     'StorageAttachmentIds': {'additionalProperties': False,
                                              'properties': {'ids': {'items': {'$ref': '#/definitions/StorageAttachmentId'},
                                                                     'type': 'array'}},
                                              'required': ['ids'],
                                              'type': 'object'},
                     'StorageAttachmentIdsResult': {'additionalProperties': False,
                                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                   'result': {'$ref': '#/definitions/StorageAttachmentIds'}},
                                                    'required': ['result'],
                                                    'type': 'object'},
                     'StorageAttachmentIdsResults': {'additionalProperties': False,
                                                     'properties': {'results': {'items': {'$ref': '#/definitions/StorageAttachmentIdsResult'},
                                                                                'type': 'array'}},
                                                     'type': 'object'},
                     'StorageAttachmentResult': {'additionalProperties': False,
                                                 'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                'result': {'$ref': '#/definitions/StorageAttachment'}},
                                                 'required': ['result'],
                                                 'type': 'object'},
                     'StorageAttachmentResults': {'additionalProperties': False,
                                                  'properties': {'results': {'items': {'$ref': '#/definitions/StorageAttachmentResult'},
                                                                             'type': 'array'}},
                                                  'type': 'object'},
                     'StorageConstraints': {'additionalProperties': False,
                                            'properties': {'count': {'type': 'integer'},
                                                           'pool': {'type': 'string'},
                                                           'size': {'type': 'integer'}},
                                            'type': 'object'},
                     'StoragesAddParams': {'additionalProperties': False,
                                           'properties': {'storages': {'items': {'$ref': '#/definitions/StorageAddParams'},
                                                                       'type': 'array'}},
                                           'required': ['storages'],
                                           'type': 'object'},
                     'StringBoolResult': {'additionalProperties': False,
                                          'properties': {'error': {'$ref': '#/definitions/Error'},
                                                         'ok': {'type': 'boolean'},
                                                         'result': {'type': 'string'}},
                                          'required': ['result', 'ok'],
                                          'type': 'object'},
                     'StringBoolResults': {'additionalProperties': False,
                                           'properties': {'results': {'items': {'$ref': '#/definitions/StringBoolResult'},
                                                                      'type': 'array'}},
                                           'required': ['results'],
                                           'type': 'object'},
                     'StringResult': {'additionalProperties': False,
                                      'properties': {'error': {'$ref': '#/definitions/Error'},
                                                     'result': {'type': 'string'}},
                                      'required': ['result'],
                                      'type': 'object'},
                     'StringResults': {'additionalProperties': False,
                                       'properties': {'results': {'items': {'$ref': '#/definitions/StringResult'},
                                                                  'type': 'array'}},
                                       'required': ['results'],
                                       'type': 'object'},
                     'StringsResult': {'additionalProperties': False,
                                       'properties': {'error': {'$ref': '#/definitions/Error'},
                                                      'result': {'items': {'type': 'string'},
                                                                 'type': 'array'}},
                                       'type': 'object'},
                     'StringsResults': {'additionalProperties': False,
                                        'properties': {'results': {'items': {'$ref': '#/definitions/StringsResult'},
                                                                   'type': 'array'}},
                                        'required': ['results'],
                                        'type': 'object'},
                     'StringsWatchResult': {'additionalProperties': False,
                                            'properties': {'changes': {'items': {'type': 'string'},
                                                                       'type': 'array'},
                                                           'error': {'$ref': '#/definitions/Error'},
                                                           'watcher-id': {'type': 'string'}},
                                            'required': ['watcher-id'],
                                            'type': 'object'},
                     'StringsWatchResults': {'additionalProperties': False,
                                             'properties': {'results': {'items': {'$ref': '#/definitions/StringsWatchResult'},
                                                                        'type': 'array'}},
                                             'required': ['results'],
                                             'type': 'object'},
                     'UnitNetworkConfig': {'additionalProperties': False,
                                           'properties': {'binding-name': {'type': 'string'},
                                                          'unit-tag': {'type': 'string'}},
                                           'required': ['unit-tag', 'binding-name'],
                                           'type': 'object'},
                     'UnitNetworkConfigResult': {'additionalProperties': False,
                                                 'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                'info': {'items': {'$ref': '#/definitions/NetworkConfig'},
                                                                         'type': 'array'}},
                                                 'required': ['info'],
                                                 'type': 'object'},
                     'UnitNetworkConfigResults': {'additionalProperties': False,
                                                  'properties': {'results': {'items': {'$ref': '#/definitions/UnitNetworkConfigResult'},
                                                                             'type': 'array'}},
                                                  'required': ['results'],
                                                  'type': 'object'},
                     'UnitSettings': {'additionalProperties': False,
                                      'properties': {'version': {'type': 'integer'}},
                                      'required': ['version'],
                                      'type': 'object'},
                     'UnitsNetworkConfig': {'additionalProperties': False,
                                            'properties': {'args': {'items': {'$ref': '#/definitions/UnitNetworkConfig'},
                                                                    'type': 'array'}},
                                            'required': ['args'],
                                            'type': 'object'}},
     'properties': {'APIAddresses': {'properties': {'Result': {'$ref': '#/definitions/StringsResult'}},
                                     'type': 'object'},
                    'APIHostPorts': {'properties': {'Result': {'$ref': '#/definitions/APIHostPortsResult'}},
                                     'type': 'object'},
                    'Actions': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                               'Result': {'$ref': '#/definitions/ActionResults'}},
                                'type': 'object'},
                    'AddMetricBatches': {'properties': {'Params': {'$ref': '#/definitions/MetricBatchParams'},
                                                        'Result': {'$ref': '#/definitions/ErrorResults'}},
                                         'type': 'object'},
                    'AddUnitStorage': {'properties': {'Params': {'$ref': '#/definitions/StoragesAddParams'},
                                                      'Result': {'$ref': '#/definitions/ErrorResults'}},
                                       'type': 'object'},
                    'AllMachinePorts': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                       'Result': {'$ref': '#/definitions/MachinePortsResults'}},
                                        'type': 'object'},
                    'ApplicationStatus': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                         'Result': {'$ref': '#/definitions/ApplicationStatusResults'}},
                                          'type': 'object'},
                    'AssignedMachine': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                       'Result': {'$ref': '#/definitions/StringResults'}},
                                        'type': 'object'},
                    'AvailabilityZone': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                        'Result': {'$ref': '#/definitions/StringResults'}},
                                         'type': 'object'},
                    'BeginActions': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                    'Result': {'$ref': '#/definitions/ErrorResults'}},
                                     'type': 'object'},
                    'CACert': {'properties': {'Result': {'$ref': '#/definitions/BytesResult'}},
                               'type': 'object'},
                    'CharmArchiveSha256': {'properties': {'Params': {'$ref': '#/definitions/CharmURLs'},
                                                          'Result': {'$ref': '#/definitions/StringResults'}},
                                           'type': 'object'},
                    'CharmModifiedVersion': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                            'Result': {'$ref': '#/definitions/IntResults'}},
                                             'type': 'object'},
                    'CharmURL': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                'Result': {'$ref': '#/definitions/StringBoolResults'}},
                                 'type': 'object'},
                    'ClearResolved': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                      'type': 'object'},
                    'ClosePorts': {'properties': {'Params': {'$ref': '#/definitions/EntitiesPortRanges'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'},
                    'ConfigSettings': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                      'Result': {'$ref': '#/definitions/ConfigSettingsResults'}},
                                       'type': 'object'},
                    'CurrentModel': {'properties': {'Result': {'$ref': '#/definitions/ModelResult'}},
                                     'type': 'object'},
                    'Destroy': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                               'Result': {'$ref': '#/definitions/ErrorResults'}},
                                'type': 'object'},
                    'DestroyAllSubordinates': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                              'Result': {'$ref': '#/definitions/ErrorResults'}},
                                               'type': 'object'},
                    'DestroyUnitStorageAttachments': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                                      'type': 'object'},
                    'EnsureDead': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'},
                    'EnterScope': {'properties': {'Params': {'$ref': '#/definitions/RelationUnits'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'},
                    'FinishActions': {'properties': {'Params': {'$ref': '#/definitions/ActionExecutionResults'},
                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                      'type': 'object'},
                    'GetMeterStatus': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                      'Result': {'$ref': '#/definitions/MeterStatusResults'}},
                                       'type': 'object'},
                    'GetPrincipal': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                    'Result': {'$ref': '#/definitions/StringBoolResults'}},
                                     'type': 'object'},
                    'HasSubordinates': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                       'Result': {'$ref': '#/definitions/BoolResults'}},
                                        'type': 'object'},
                    'JoinedRelations': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                       'Result': {'$ref': '#/definitions/StringsResults'}},
                                        'type': 'object'},
                    'LeaveScope': {'properties': {'Params': {'$ref': '#/definitions/RelationUnits'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'},
                    'Life': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                            'Result': {'$ref': '#/definitions/LifeResults'}},
                             'type': 'object'},
                    'Merge': {'properties': {'Params': {'$ref': '#/definitions/MergeLeadershipSettingsBulkParams'},
                                             'Result': {'$ref': '#/definitions/ErrorResults'}},
                              'type': 'object'},
                    'ModelConfig': {'properties': {'Result': {'$ref': '#/definitions/ModelConfigResult'}},
                                    'type': 'object'},
                    'ModelUUID': {'properties': {'Result': {'$ref': '#/definitions/StringResult'}},
                                  'type': 'object'},
                    'NetworkConfig': {'properties': {'Params': {'$ref': '#/definitions/UnitsNetworkConfig'},
                                                     'Result': {'$ref': '#/definitions/UnitNetworkConfigResults'}},
                                      'type': 'object'},
                    'OpenPorts': {'properties': {'Params': {'$ref': '#/definitions/EntitiesPortRanges'},
                                                 'Result': {'$ref': '#/definitions/ErrorResults'}},
                                  'type': 'object'},
                    'PrivateAddress': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                      'Result': {'$ref': '#/definitions/StringResults'}},
                                       'type': 'object'},
                    'ProviderType': {'properties': {'Result': {'$ref': '#/definitions/StringResult'}},
                                     'type': 'object'},
                    'PublicAddress': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                     'Result': {'$ref': '#/definitions/StringResults'}},
                                      'type': 'object'},
                    'Read': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                            'Result': {'$ref': '#/definitions/GetLeadershipSettingsBulkResults'}},
                             'type': 'object'},
                    'ReadRemoteSettings': {'properties': {'Params': {'$ref': '#/definitions/RelationUnitPairs'},
                                                          'Result': {'$ref': '#/definitions/SettingsResults'}},
                                           'type': 'object'},
                    'ReadSettings': {'properties': {'Params': {'$ref': '#/definitions/RelationUnits'},
                                                    'Result': {'$ref': '#/definitions/SettingsResults'}},
                                     'type': 'object'},
                    'Relation': {'properties': {'Params': {'$ref': '#/definitions/RelationUnits'},
                                                'Result': {'$ref': '#/definitions/RelationResults'}},
                                 'type': 'object'},
                    'RelationById': {'properties': {'Params': {'$ref': '#/definitions/RelationIds'},
                                                    'Result': {'$ref': '#/definitions/RelationResults'}},
                                     'type': 'object'},
                    'RemoveStorageAttachments': {'properties': {'Params': {'$ref': '#/definitions/StorageAttachmentIds'},
                                                                'Result': {'$ref': '#/definitions/ErrorResults'}},
                                                 'type': 'object'},
                    'RequestReboot': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                      'type': 'object'},
                    'Resolved': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                'Result': {'$ref': '#/definitions/ResolvedModeResults'}},
                                 'type': 'object'},
                    'SetAgentStatus': {'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                      'Result': {'$ref': '#/definitions/ErrorResults'}},
                                       'type': 'object'},
                    'SetApplicationStatus': {'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                            'Result': {'$ref': '#/definitions/ErrorResults'}},
                                             'type': 'object'},
                    'SetCharmURL': {'properties': {'Params': {'$ref': '#/definitions/EntitiesCharmURL'},
                                                   'Result': {'$ref': '#/definitions/ErrorResults'}},
                                    'type': 'object'},
                    'SetStatus': {'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                 'Result': {'$ref': '#/definitions/ErrorResults'}},
                                  'type': 'object'},
                    'SetUnitStatus': {'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                      'type': 'object'},
                    'SetWorkloadVersion': {'properties': {'Params': {'$ref': '#/definitions/EntityWorkloadVersions'},
                                                          'Result': {'$ref': '#/definitions/ErrorResults'}},
                                           'type': 'object'},
                    'StorageAttachmentLife': {'properties': {'Params': {'$ref': '#/definitions/StorageAttachmentIds'},
                                                             'Result': {'$ref': '#/definitions/LifeResults'}},
                                              'type': 'object'},
                    'StorageAttachments': {'properties': {'Params': {'$ref': '#/definitions/StorageAttachmentIds'},
                                                          'Result': {'$ref': '#/definitions/StorageAttachmentResults'}},
                                           'type': 'object'},
                    'UnitStatus': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/StatusResults'}},
                                   'type': 'object'},
                    'UnitStorageAttachments': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                              'Result': {'$ref': '#/definitions/StorageAttachmentIdsResults'}},
                                               'type': 'object'},
                    'UpdateSettings': {'properties': {'Params': {'$ref': '#/definitions/RelationUnitsSettings'},
                                                      'Result': {'$ref': '#/definitions/ErrorResults'}},
                                       'type': 'object'},
                    'Watch': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                             'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                              'type': 'object'},
                    'WatchAPIHostPorts': {'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResult'}},
                                          'type': 'object'},
                    'WatchActionNotifications': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                                 'type': 'object'},
                    'WatchApplicationRelations': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                 'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                                  'type': 'object'},
                    'WatchConfigSettings': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                           'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                            'type': 'object'},
                    'WatchForModelConfigChanges': {'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResult'}},
                                                   'type': 'object'},
                    'WatchLeadershipSettings': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                               'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                                'type': 'object'},
                    'WatchMeterStatus': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                        'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                         'type': 'object'},
                    'WatchRelationUnits': {'properties': {'Params': {'$ref': '#/definitions/RelationUnits'},
                                                          'Result': {'$ref': '#/definitions/RelationUnitsWatchResults'}},
                                           'type': 'object'},
                    'WatchStorageAttachments': {'properties': {'Params': {'$ref': '#/definitions/StorageAttachmentIds'},
                                                               'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                                'type': 'object'},
                    'WatchUnitAddresses': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                          'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                           'type': 'object'},
                    'WatchUnitStorageAttachments': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                   'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                                    'type': 'object'},
                    'WorkloadVersion': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                       'Result': {'$ref': '#/definitions/StringResults'}},
                                        'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(StringsResult)
    async def APIAddresses(self):
        '''

        Returns -> typing.Union[_ForwardRef('Error'), typing.Sequence<+T_co>[str]]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='APIAddresses', version=4, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(APIHostPortsResult)
    async def APIHostPorts(self):
        '''

        Returns -> typing.Sequence<+T_co>[~HostPort]<~HostPort>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='APIHostPorts', version=4, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ActionResults)
    async def Actions(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ActionResult]<~ActionResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='Actions', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def AddMetricBatches(self, batches):
        '''
        batches : typing.Sequence<+T_co>[~MetricBatchParam]<~MetricBatchParam>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='AddMetricBatches', version=4, params=params)
        params['batches'] = batches
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def AddUnitStorage(self, storages):
        '''
        storages : typing.Sequence<+T_co>[~StorageAddParams]<~StorageAddParams>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='AddUnitStorage', version=4, params=params)
        params['storages'] = storages
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(MachinePortsResults)
    async def AllMachinePorts(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~MachinePortsResult]<~MachinePortsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='AllMachinePorts', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ApplicationStatusResults)
    async def ApplicationStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ApplicationStatusResult]<~ApplicationStatusResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='ApplicationStatus', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def AssignedMachine(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringResult]<~StringResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='AssignedMachine', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def AvailabilityZone(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringResult]<~StringResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='AvailabilityZone', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def BeginActions(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='BeginActions', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(BytesResult)
    async def CACert(self):
        '''

        Returns -> typing.Sequence<+T_co>[int]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='CACert', version=4, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def CharmArchiveSha256(self, urls):
        '''
        urls : typing.Sequence<+T_co>[~CharmURL]<~CharmURL>
        Returns -> typing.Sequence<+T_co>[~StringResult]<~StringResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='CharmArchiveSha256', version=4, params=params)
        params['urls'] = urls
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(IntResults)
    async def CharmModifiedVersion(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~IntResult]<~IntResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='CharmModifiedVersion', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringBoolResults)
    async def CharmURL(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringBoolResult]<~StringBoolResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='CharmURL', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def ClearResolved(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='ClearResolved', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def ClosePorts(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityPortRange]<~EntityPortRange>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='ClosePorts', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ConfigSettingsResults)
    async def ConfigSettings(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ConfigSettingsResult]<~ConfigSettingsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='ConfigSettings', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelResult)
    async def CurrentModel(self):
        '''

        Returns -> typing.Union[_ForwardRef('Error'), str]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='CurrentModel', version=4, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def Destroy(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='Destroy', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def DestroyAllSubordinates(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='DestroyAllSubordinates', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def DestroyUnitStorageAttachments(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='DestroyUnitStorageAttachments', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def EnsureDead(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='EnsureDead', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def EnterScope(self, relation_units):
        '''
        relation_units : typing.Sequence<+T_co>[~RelationUnit]<~RelationUnit>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='EnterScope', version=4, params=params)
        params['relation-units'] = relation_units
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def FinishActions(self, results):
        '''
        results : typing.Sequence<+T_co>[~ActionExecutionResult]<~ActionExecutionResult>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='FinishActions', version=4, params=params)
        params['results'] = results
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(MeterStatusResults)
    async def GetMeterStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~MeterStatusResult]<~MeterStatusResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='GetMeterStatus', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringBoolResults)
    async def GetPrincipal(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringBoolResult]<~StringBoolResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='GetPrincipal', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(BoolResults)
    async def HasSubordinates(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~BoolResult]<~BoolResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='HasSubordinates', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsResults)
    async def JoinedRelations(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringsResult]<~StringsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='JoinedRelations', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def LeaveScope(self, relation_units):
        '''
        relation_units : typing.Sequence<+T_co>[~RelationUnit]<~RelationUnit>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='LeaveScope', version=4, params=params)
        params['relation-units'] = relation_units
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(LifeResults)
    async def Life(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~LifeResult]<~LifeResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='Life', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def Merge(self, params):
        '''
        params : typing.Sequence<+T_co>[~MergeLeadershipSettingsParam]<~MergeLeadershipSettingsParam>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='Merge', version=4, params=params)
        params['params'] = params
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelConfigResult)
    async def ModelConfig(self):
        '''

        Returns -> typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='ModelConfig', version=4, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResult)
    async def ModelUUID(self):
        '''

        Returns -> typing.Union[_ForwardRef('Error'), str]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='ModelUUID', version=4, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(UnitNetworkConfigResults)
    async def NetworkConfig(self, args):
        '''
        args : typing.Sequence<+T_co>[~UnitNetworkConfig]<~UnitNetworkConfig>
        Returns -> typing.Sequence<+T_co>[~UnitNetworkConfigResult]<~UnitNetworkConfigResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='NetworkConfig', version=4, params=params)
        params['args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def OpenPorts(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityPortRange]<~EntityPortRange>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='OpenPorts', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def PrivateAddress(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringResult]<~StringResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='PrivateAddress', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResult)
    async def ProviderType(self):
        '''

        Returns -> typing.Union[_ForwardRef('Error'), str]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='ProviderType', version=4, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def PublicAddress(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringResult]<~StringResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='PublicAddress', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(GetLeadershipSettingsBulkResults)
    async def Read(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~GetLeadershipSettingsResult]<~GetLeadershipSettingsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='Read', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(SettingsResults)
    async def ReadRemoteSettings(self, relation_unit_pairs):
        '''
        relation_unit_pairs : typing.Sequence<+T_co>[~RelationUnitPair]<~RelationUnitPair>
        Returns -> typing.Sequence<+T_co>[~SettingsResult]<~SettingsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='ReadRemoteSettings', version=4, params=params)
        params['relation-unit-pairs'] = relation_unit_pairs
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(SettingsResults)
    async def ReadSettings(self, relation_units):
        '''
        relation_units : typing.Sequence<+T_co>[~RelationUnit]<~RelationUnit>
        Returns -> typing.Sequence<+T_co>[~SettingsResult]<~SettingsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='ReadSettings', version=4, params=params)
        params['relation-units'] = relation_units
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(RelationResults)
    async def Relation(self, relation_units):
        '''
        relation_units : typing.Sequence<+T_co>[~RelationUnit]<~RelationUnit>
        Returns -> typing.Sequence<+T_co>[~RelationResult]<~RelationResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='Relation', version=4, params=params)
        params['relation-units'] = relation_units
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(RelationResults)
    async def RelationById(self, relation_ids):
        '''
        relation_ids : typing.Sequence<+T_co>[int]
        Returns -> typing.Sequence<+T_co>[~RelationResult]<~RelationResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='RelationById', version=4, params=params)
        params['relation-ids'] = relation_ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def RemoveStorageAttachments(self, ids):
        '''
        ids : typing.Sequence<+T_co>[~StorageAttachmentId]<~StorageAttachmentId>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='RemoveStorageAttachments', version=4, params=params)
        params['ids'] = ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def RequestReboot(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='RequestReboot', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ResolvedModeResults)
    async def Resolved(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ResolvedModeResult]<~ResolvedModeResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='Resolved', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetAgentStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityStatusArgs]<~EntityStatusArgs>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='SetAgentStatus', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetApplicationStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityStatusArgs]<~EntityStatusArgs>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='SetApplicationStatus', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetCharmURL(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityCharmURL]<~EntityCharmURL>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='SetCharmURL', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityStatusArgs]<~EntityStatusArgs>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='SetStatus', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetUnitStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityStatusArgs]<~EntityStatusArgs>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='SetUnitStatus', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetWorkloadVersion(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~EntityWorkloadVersion]<~EntityWorkloadVersion>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='SetWorkloadVersion', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(LifeResults)
    async def StorageAttachmentLife(self, ids):
        '''
        ids : typing.Sequence<+T_co>[~StorageAttachmentId]<~StorageAttachmentId>
        Returns -> typing.Sequence<+T_co>[~LifeResult]<~LifeResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='StorageAttachmentLife', version=4, params=params)
        params['ids'] = ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StorageAttachmentResults)
    async def StorageAttachments(self, ids):
        '''
        ids : typing.Sequence<+T_co>[~StorageAttachmentId]<~StorageAttachmentId>
        Returns -> typing.Sequence<+T_co>[~StorageAttachmentResult]<~StorageAttachmentResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='StorageAttachments', version=4, params=params)
        params['ids'] = ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StatusResults)
    async def UnitStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StatusResult]<~StatusResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='UnitStatus', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StorageAttachmentIdsResults)
    async def UnitStorageAttachments(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StorageAttachmentIdsResult]<~StorageAttachmentIdsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='UnitStorageAttachments', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def UpdateSettings(self, relation_units):
        '''
        relation_units : typing.Sequence<+T_co>[~RelationUnitSettings]<~RelationUnitSettings>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='UpdateSettings', version=4, params=params)
        params['relation-units'] = relation_units
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def Watch(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='Watch', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResult)
    async def WatchAPIHostPorts(self):
        '''

        Returns -> typing.Union[str, _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='WatchAPIHostPorts', version=4, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchActionNotifications(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringsWatchResult]<~StringsWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='WatchActionNotifications', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchApplicationRelations(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringsWatchResult]<~StringsWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='WatchApplicationRelations', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchConfigSettings(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='WatchConfigSettings', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResult)
    async def WatchForModelConfigChanges(self):
        '''

        Returns -> typing.Union[str, _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='WatchForModelConfigChanges', version=4, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchLeadershipSettings(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='WatchLeadershipSettings', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchMeterStatus(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='WatchMeterStatus', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(RelationUnitsWatchResults)
    async def WatchRelationUnits(self, relation_units):
        '''
        relation_units : typing.Sequence<+T_co>[~RelationUnit]<~RelationUnit>
        Returns -> typing.Sequence<+T_co>[~RelationUnitsWatchResult]<~RelationUnitsWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='WatchRelationUnits', version=4, params=params)
        params['relation-units'] = relation_units
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchStorageAttachments(self, ids):
        '''
        ids : typing.Sequence<+T_co>[~StorageAttachmentId]<~StorageAttachmentId>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='WatchStorageAttachments', version=4, params=params)
        params['ids'] = ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchUnitAddresses(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='WatchUnitAddresses', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchUnitStorageAttachments(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringsWatchResult]<~StringsWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='WatchUnitStorageAttachments', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def WorkloadVersion(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~StringResult]<~StringResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Uniter', request='WorkloadVersion', version=4, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class UpgraderFacade(Type):
    name = 'Upgrader'
    version = 1
    schema =     {'definitions': {'Binary': {'additionalProperties': False,
                                'properties': {'Arch': {'type': 'string'},
                                               'Number': {'$ref': '#/definitions/Number'},
                                               'Series': {'type': 'string'}},
                                'required': ['Number', 'Series', 'Arch'],
                                'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'EntitiesVersion': {'additionalProperties': False,
                                         'properties': {'agent-tools': {'items': {'$ref': '#/definitions/EntityVersion'},
                                                                        'type': 'array'}},
                                         'required': ['agent-tools'],
                                         'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'EntityVersion': {'additionalProperties': False,
                                       'properties': {'tag': {'type': 'string'},
                                                      'tools': {'$ref': '#/definitions/Version'}},
                                       'required': ['tag', 'tools'],
                                       'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'NotifyWatchResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/NotifyWatchResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'Number': {'additionalProperties': False,
                                'properties': {'Build': {'type': 'integer'},
                                               'Major': {'type': 'integer'},
                                               'Minor': {'type': 'integer'},
                                               'Patch': {'type': 'integer'},
                                               'Tag': {'type': 'string'}},
                                'required': ['Major',
                                             'Minor',
                                             'Tag',
                                             'Patch',
                                             'Build'],
                                'type': 'object'},
                     'Tools': {'additionalProperties': False,
                               'properties': {'sha256': {'type': 'string'},
                                              'size': {'type': 'integer'},
                                              'url': {'type': 'string'},
                                              'version': {'$ref': '#/definitions/Binary'}},
                               'required': ['version', 'url', 'size'],
                               'type': 'object'},
                     'ToolsResult': {'additionalProperties': False,
                                     'properties': {'disable-ssl-hostname-verification': {'type': 'boolean'},
                                                    'error': {'$ref': '#/definitions/Error'},
                                                    'tools': {'items': {'$ref': '#/definitions/Tools'},
                                                              'type': 'array'}},
                                     'required': ['tools',
                                                  'disable-ssl-hostname-verification'],
                                     'type': 'object'},
                     'ToolsResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ToolsResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Version': {'additionalProperties': False,
                                 'properties': {'version': {'$ref': '#/definitions/Binary'}},
                                 'required': ['version'],
                                 'type': 'object'},
                     'VersionResult': {'additionalProperties': False,
                                       'properties': {'error': {'$ref': '#/definitions/Error'},
                                                      'version': {'$ref': '#/definitions/Number'}},
                                       'type': 'object'},
                     'VersionResults': {'additionalProperties': False,
                                        'properties': {'results': {'items': {'$ref': '#/definitions/VersionResult'},
                                                                   'type': 'array'}},
                                        'required': ['results'],
                                        'type': 'object'}},
     'properties': {'DesiredVersion': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                      'Result': {'$ref': '#/definitions/VersionResults'}},
                                       'type': 'object'},
                    'SetTools': {'properties': {'Params': {'$ref': '#/definitions/EntitiesVersion'},
                                                'Result': {'$ref': '#/definitions/ErrorResults'}},
                                 'type': 'object'},
                    'Tools': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                             'Result': {'$ref': '#/definitions/ToolsResults'}},
                              'type': 'object'},
                    'WatchAPIVersion': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                       'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                        'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(VersionResults)
    async def DesiredVersion(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~VersionResult]<~VersionResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Upgrader', request='DesiredVersion', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetTools(self, agent_tools):
        '''
        agent_tools : typing.Sequence<+T_co>[~EntityVersion]<~EntityVersion>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Upgrader', request='SetTools', version=1, params=params)
        params['agent-tools'] = agent_tools
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ToolsResults)
    async def Tools(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ToolsResult]<~ToolsResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Upgrader', request='Tools', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchAPIVersion(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='Upgrader', request='WatchAPIVersion', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


class UserManagerFacade(Type):
    name = 'UserManager'
    version = 1
    schema =     {'definitions': {'AddUser': {'additionalProperties': False,
                                 'properties': {'display-name': {'type': 'string'},
                                                'password': {'type': 'string'},
                                                'username': {'type': 'string'}},
                                 'required': ['username', 'display-name'],
                                 'type': 'object'},
                     'AddUserResult': {'additionalProperties': False,
                                       'properties': {'error': {'$ref': '#/definitions/Error'},
                                                      'secret-key': {'items': {'type': 'integer'},
                                                                     'type': 'array'},
                                                      'tag': {'type': 'string'}},
                                       'type': 'object'},
                     'AddUserResults': {'additionalProperties': False,
                                        'properties': {'results': {'items': {'$ref': '#/definitions/AddUserResult'},
                                                                   'type': 'array'}},
                                        'required': ['results'],
                                        'type': 'object'},
                     'AddUsers': {'additionalProperties': False,
                                  'properties': {'users': {'items': {'$ref': '#/definitions/AddUser'},
                                                           'type': 'array'}},
                                  'required': ['users'],
                                  'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'EntityPassword': {'additionalProperties': False,
                                        'properties': {'password': {'type': 'string'},
                                                       'tag': {'type': 'string'}},
                                        'required': ['tag', 'password'],
                                        'type': 'object'},
                     'EntityPasswords': {'additionalProperties': False,
                                         'properties': {'changes': {'items': {'$ref': '#/definitions/EntityPassword'},
                                                                    'type': 'array'}},
                                         'required': ['changes'],
                                         'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MacaroonResult': {'additionalProperties': False,
                                        'properties': {'error': {'$ref': '#/definitions/Error'},
                                                       'result': {'$ref': '#/definitions/Macaroon'}},
                                        'type': 'object'},
                     'MacaroonResults': {'additionalProperties': False,
                                         'properties': {'results': {'items': {'$ref': '#/definitions/MacaroonResult'},
                                                                    'type': 'array'}},
                                         'required': ['results'],
                                         'type': 'object'},
                     'UserInfo': {'additionalProperties': False,
                                  'properties': {'access': {'type': 'string'},
                                                 'created-by': {'type': 'string'},
                                                 'date-created': {'format': 'date-time',
                                                                  'type': 'string'},
                                                 'disabled': {'type': 'boolean'},
                                                 'display-name': {'type': 'string'},
                                                 'last-connection': {'format': 'date-time',
                                                                     'type': 'string'},
                                                 'username': {'type': 'string'}},
                                  'required': ['username',
                                               'display-name',
                                               'access',
                                               'created-by',
                                               'date-created',
                                               'disabled'],
                                  'type': 'object'},
                     'UserInfoRequest': {'additionalProperties': False,
                                         'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                                     'type': 'array'},
                                                        'include-disabled': {'type': 'boolean'}},
                                         'required': ['entities',
                                                      'include-disabled'],
                                         'type': 'object'},
                     'UserInfoResult': {'additionalProperties': False,
                                        'properties': {'error': {'$ref': '#/definitions/Error'},
                                                       'result': {'$ref': '#/definitions/UserInfo'}},
                                        'type': 'object'},
                     'UserInfoResults': {'additionalProperties': False,
                                         'properties': {'results': {'items': {'$ref': '#/definitions/UserInfoResult'},
                                                                    'type': 'array'}},
                                         'required': ['results'],
                                         'type': 'object'}},
     'properties': {'AddUser': {'properties': {'Params': {'$ref': '#/definitions/AddUsers'},
                                               'Result': {'$ref': '#/definitions/AddUserResults'}},
                                'type': 'object'},
                    'CreateLocalLoginMacaroon': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                'Result': {'$ref': '#/definitions/MacaroonResults'}},
                                                 'type': 'object'},
                    'DisableUser': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                   'Result': {'$ref': '#/definitions/ErrorResults'}},
                                    'type': 'object'},
                    'EnableUser': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'},
                    'RemoveUser': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'},
                    'SetPassword': {'properties': {'Params': {'$ref': '#/definitions/EntityPasswords'},
                                                   'Result': {'$ref': '#/definitions/ErrorResults'}},
                                    'type': 'object'},
                    'UserInfo': {'properties': {'Params': {'$ref': '#/definitions/UserInfoRequest'},
                                                'Result': {'$ref': '#/definitions/UserInfoResults'}},
                                 'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(AddUserResults)
    async def AddUser(self, users):
        '''
        users : typing.Sequence<+T_co>[~AddUser]<~AddUser>
        Returns -> typing.Sequence<+T_co>[~AddUserResult]<~AddUserResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='UserManager', request='AddUser', version=1, params=params)
        params['users'] = users
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(MacaroonResults)
    async def CreateLocalLoginMacaroon(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~MacaroonResult]<~MacaroonResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='UserManager', request='CreateLocalLoginMacaroon', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def DisableUser(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='UserManager', request='DisableUser', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def EnableUser(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='UserManager', request='EnableUser', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def RemoveUser(self, entities):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='UserManager', request='RemoveUser', version=1, params=params)
        params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetPassword(self, changes):
        '''
        changes : typing.Sequence<+T_co>[~EntityPassword]<~EntityPassword>
        Returns -> typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='UserManager', request='SetPassword', version=1, params=params)
        params['changes'] = changes
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(UserInfoResults)
    async def UserInfo(self, entities, include_disabled):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        include_disabled : bool
        Returns -> typing.Sequence<+T_co>[~UserInfoResult]<~UserInfoResult>
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='UserManager', request='UserInfo', version=1, params=params)
        params['entities'] = entities
        params['include-disabled'] = include_disabled
        reply = await self.rpc(msg)
        return reply


class VolumeAttachmentsWatcherFacade(Type):
    name = 'VolumeAttachmentsWatcher'
    version = 2
    schema =     {'definitions': {'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'$ref': '#/definitions/ErrorInfo'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorInfo': {'additionalProperties': False,
                                   'properties': {'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                  'macaroon-path': {'type': 'string'}},
                                   'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'MachineStorageId': {'additionalProperties': False,
                                          'properties': {'attachment-tag': {'type': 'string'},
                                                         'machine-tag': {'type': 'string'}},
                                          'required': ['machine-tag',
                                                       'attachment-tag'],
                                          'type': 'object'},
                     'MachineStorageIdsWatchResult': {'additionalProperties': False,
                                                      'properties': {'changes': {'items': {'$ref': '#/definitions/MachineStorageId'},
                                                                                 'type': 'array'},
                                                                     'error': {'$ref': '#/definitions/Error'},
                                                                     'watcher-id': {'type': 'string'}},
                                                      'required': ['watcher-id',
                                                                   'changes'],
                                                      'type': 'object'}},
     'properties': {'Next': {'properties': {'Result': {'$ref': '#/definitions/MachineStorageIdsWatchResult'}},
                             'type': 'object'},
                    'Stop': {'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(MachineStorageIdsWatchResult)
    async def Next(self):
        '''

        Returns -> typing.Union[typing.Sequence<+T_co>[~MachineStorageId]<~MachineStorageId>, _ForwardRef('Error')]
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='VolumeAttachmentsWatcher', request='Next', version=2, params=params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Stop(self):
        '''

        Returns -> None
        '''
        # map input types to rpc msg
        params = dict()
        msg = dict(type='VolumeAttachmentsWatcher', request='Stop', version=2, params=params)

        reply = await self.rpc(msg)
        return reply


